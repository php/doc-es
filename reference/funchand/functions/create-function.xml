<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 39752929cd4ab78db8a7310dfb328444c558df99 Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: yes -->
<refentry xml:id="function.create-function" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>create_function</refname>
  <refpurpose>Crea una función anónima</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
  &warn.deprecated.function-7-2-0.removed-8-0-0;
 </refsynopsisdiv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>string</type><methodname>create_function</methodname>
   <methodparam><type>string</type><parameter>args</parameter></methodparam>
   <methodparam><type>string</type><parameter>code</parameter></methodparam>
  </methodsynopsis>
  <para>
   <function>create_function</function> crea una función anónima,
   a partir de los argumentos pasados, y devuelve un nombre de función único.
  </para>
  <caution>
   <para>
    Esta función, internamente, utiliza la función
    <function>eval</function> y por lo tanto los requisitos
    de seguridad son idénticos a los de la función <function>eval</function>.
    Además, el rendimiento no es óptimo y el uso de memoria
    es significativo.
   </para>
   <para>
    Una <link linkend="functions.anonymous">función anónima</link> nativa
    debería ser utilizada en su lugar.
   </para>
  </caution>
 </refsect1>
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   Generalmente, los argumentos <parameter>args</parameter> son
   presentados en forma de una cadena entre comillas simples, y la misma
   recomendación aplica para <parameter>code</parameter>.
   La razón de usar comillas simples es proteger
   los nombres de variables del reemplazo por su valor. Si se usan
   comillas dobles, no se olvide de escapar
   los nombres de variables (i.e. <literal>\$avar</literal>).
   <variablelist>
    <varlistentry>
     <term><parameter>args</parameter></term>
     <listitem>
      <para>
       Los argumentos de la función.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>code</parameter></term>
     <listitem>
      <para>
       El código de la función.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Devuelve un nombre de función único, en forma de una &string;,
   o &false; si ocurre un error.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>
     Creación de una función anónima con <function>create_function</function>
    </title>
    <para>
     Esta función puede ser utilizada para (por ejemplo) crear
     una función a partir de información recolectada
     durante la ejecución:
    </para>
    <programlisting role="php">
<![CDATA[
<?php
$newfunc = create_function('$a,$b', 'return "ln($a) + ln($b) = " . log($a * $b);');
echo "Nueva función anónima: $newfunc\n";
echo $newfunc(2, M_E) . "\n";
// mostrará:
// Nueva función anónima: lambda_1
// ln(2) + ln(2.718281828459) = 1.6931471805599
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   O, para poder aplicar una función genérica
   a una lista de argumentos.
  </para>
  <para>
   <example>
    <title>
     Procesamiento genérico por función con <function>create_function</function>
    </title>
    <programlisting role="php">
<![CDATA[
<?php
function process($var1, $var2, $farr)
{
    foreach ($farr as $f) {
        echo $f($var1, $var2) . "\n";
    }
}

// Creación de una serie de funciones matemáticas
$f1 = 'if ($a >=0) {return "b*a^2 = ".$b*sqrt($a);} else {return false;}';
$f2 = "return \"min(b^2+a, a^2,b) = \".min(\$a*\$a+\$b,\$b*\$b+\$a);";
$f3 = 'if ($a > 0 && $b != 0) {return "ln(a)/b = ".log($a)/$b; } else { return false; }';
$farr = array(
    create_function('$x,$y', 'return "un poco de trigonometría: ".(sin($x) + $x*cos($y));'),
    create_function('$x,$y', 'return "una hipotenusa: ".sqrt($x*$x + $y*$y);'),
    create_function('$a,$b', $f1),
    create_function('$a,$b', $f2),
    create_function('$a,$b', $f3)
    );

echo "\nUso de la primera lista de funciones anónimas\n";
echo "parámetros: 2.3445, M_PI\n";
process(2.3445, M_PI, $farr);

// Ahora una lista de funciones sobre cadenas de caracteres
$garr = array(
    create_function('$b,$a', 'if (strncmp($a, $b, 3) == 0) return "** \"$a\" '.
    'and \"$b\"\n** Look the same to me! (looking at the first 3 chars)";'),
    create_function('$a,$b', '; return "CRCs: " . crc32($a) . ", ".crc32($b);'),
    create_function('$a,$b', '; return "similaridad (a,b) = " . similar_text($a, $b, &$p) . "($p%)";')
    );
echo "\nUso de la segunda lista de funciones anónimas\n";
process("Twas brilling and the slithy toves", "Twas the night", $garr);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Uso de la primera lista de funciones anónimas
parámetros: 2.3445, M_PI
un poco de trigonometría: -1.6291725057799
una hipotenusa: 3.9199852871011
b*a^2 = 4.8103313314525
min(b^2+a, a^2,b) = 8.6382729035898
ln(a)/b = 0.27122299212594

Uso de la segunda lista de funciones anónimas
** "Twas the night" and "Twas brilling and the slithy toves"
** Estas cadenas se parecen! (mirando los tres primeros caracteres)
CRCs: -725381282, 342550513
similaridad (a,b) = 11(45.833333333333%)
]]>
    </screen>
   </example>
  </para>
  <para>
   Pero el uso más común de las funciones lambda es la
   función de devolución de llamada, por ejemplo, al utilizar
   <function>array_walk</function> o <function>usort</function>
  </para>
  <para>
   <example>
    <title>Uso de funciones anónimas como función de devolución de llamada</title>
    <programlisting role="php">
<![CDATA[
<?php
$av = array("la ", "una ", "cette ", "une certaine ");
array_walk($av, create_function('&$v,$k', '$v = $v . "maison";'));
print_r($av);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Array
(
  [0] => la maison
  [1] => une maison
  [2] => cette maison
  [3] => une certaine maison
)
]]>
    </screen>
    <para>
     un array de cadenas de caracteres ordenadas de la más corta a la más larga
    </para>
    <programlisting role="php">
<![CDATA[
<?php

$sv = array("petite", "longue", "une très longue chaîne", "une phrase toute entière");
print_r($sv);

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Array
(
  [0] => petite
  [1] => longue
  [2] => une très longue chaîne
  [3] => une phrase toute entière
)
]]>
    </screen>
    <para>
     ordenadas de la más larga a la más corta
    </para>
    <programlisting role="php">
<![CDATA[
<?php

usort($sv, create_function('$a,$b','return strlen($b) - strlen($a);'));
print_r($sv);

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Array
(
  [0] => une phrase toute entière
  [1] => une très longue chaîne
  [2] => longue
  [3] => petite
)
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><link linkend="functions.anonymous">Funciones anónimas</link></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
