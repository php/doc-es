<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: de42b5016e8d9cbfd245d70f65354a86f4e2f031 Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: no -->

<refentry xml:id="function.func-get-args" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>func_get_args</refname>
  <refpurpose>Devuelve los argumentos de una función en forma de array</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>array</type><methodname>func_get_args</methodname>
   <void/>
  </methodsynopsis>
  <para>
   Recupera los argumentos de una función en forma de array.
  </para>
  <para>
   <function>func_get_arg</function> puede ser utilizado conjuntamente con
   <function>func_num_args</function> y <function>func_get_args</function>
   para permitir que las funciones de usuario acepten un número variable de argumentos.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  &no.function.parameters;
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Devuelve un array donde cada elemento es una copia del miembro correspondiente de la lista
   de argumentos de la función.
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   Generará una advertencia si es llamada fuera de una función.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Ejemplo con <function>func_get_args</function></title>
    <programlisting role="php">
<![CDATA[
<?php
function foo()
{
    $numargs = func_num_args();
    echo "Número de argumentos : $numargs \n";
    if ($numargs >= 2) {
        echo "El segundo argumento es : " . func_get_arg(1) . "\n";
    }
    $arg_list = func_get_args();
    for ($i = 0; $i < $numargs; $i++) {
        echo "El argumento $i es : " . $arg_list[$i] . "\n";
    }
}

foo(1, 2, 3);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Número de argumentos : 3
El segundo argumento es : 2
El argumento 0 es : 1
El argumento 1 es : 2
El argumento 2 es : 3
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title>Ejemplo <function>func_get_args</function> con argumentos por referencia y por valor</title>
    <programlisting role="php">
<![CDATA[
<?php
function byVal($arg) {
    echo 'Tal como se pasó     : ', var_export(func_get_args()), PHP_EOL;
    $arg = 'baz';
    echo 'Después del cambio  : ', var_export(func_get_args()), PHP_EOL;
}

function byRef(&$arg) {
    echo 'Tal como se pasó     : ', var_export(func_get_args()), PHP_EOL;
    $arg = 'baz';
    echo 'Después del cambio  : ', var_export(func_get_args()), PHP_EOL;
}

$arg = 'bar';
byVal($arg);
byRef($arg);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
Tel que passé     : array (
  0 => 'bar',
)
Après changement  : array (
  0 => 'baz',
)
Tel que passé     : array (
  0 => 'bar',
)
Après changement  : array (
  0 => 'baz',
)
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  &note.func-named-params;
  &note.funcbyref;
  <note>
   <simpara>
    Esta función devuelve únicamente una copia de los argumentos pasados, y no cuenta
    ni trata los argumentos por defecto (no pasados).
   </simpara>
  </note>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member>La sintaxis <link linkend="functions.variable-arg-list"><literal>...</literal></link></member>
    <member><function>func_get_arg</function></member>
    <member><function>func_num_args</function></member>
    <member><methodname>ReflectionFunctionAbstract::getParameters</methodname></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
