<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 3c0b61c45a5dabe46865510311e57b77ea3dddb7 Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: no -->
<refentry xml:id="gearmanclient.addtaskbackground" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>GearmanClient::addTaskBackground</refname>
  <refpurpose>Añade una tarea de fondo para su ejecución en paralelo</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis role="GearmanClient">
   <modifier>public</modifier> <type class="union"><type>GearmanTask</type><type>false</type></type><methodname>GearmanClient::addTaskBackground</methodname>
   <methodparam><type>string</type><parameter>function_name</parameter></methodparam>
   <methodparam><type class="union"><type>string</type><type>int</type><type>float</type></type><parameter>workload</parameter></methodparam>
   <methodparam choice="opt"><type>mixed</type><parameter>context</parameter><initializer>&null;</initializer></methodparam>
   <methodparam choice="opt"><type class="union"><type>string</type><type>null</type></type><parameter>unique_key</parameter><initializer>&null;</initializer></methodparam>
  </methodsynopsis>
  <para>
   Añade una tarea de fondo para su ejecución en paralelo con otras tareas.
   Llámese a este método para todas las tareas que deban ejecutarse en paralelo, y
   luego, llámese al método <methodname>GearmanClient::runTasks</methodname> para realizar las tareas.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>function_name</parameter></term>
     <listitem>
      <para>
       &gearman.parameter.functionname;
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>workload</parameter></term>
     <listitem>
      <para>
       &gearman.parameter.workload;
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>context</parameter></term>
     <listitem>
      <para>
       &gearman.parameter.context;
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>unique_key</parameter></term>
     <listitem>
      <para>
       &gearman.parameter.unique;
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Un objeto <classname>GearmanTask</classname> o &false; si la tarea
   no pudo ser añadida.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>2 tareas, una de ellas en segundo plano</title>
    <para>
     Este ejemplo muestra la diferencia entre la ejecución en segundo plano
     y una ejecución normal. El cliente añade 2 tareas que deben ejecutar
     la misma función, pero una ha sido añadida con el método
     <methodname>addTaskBackground</methodname>. Se define una función de retorno
     para monitorear el progreso del trabajo. Un agente simple con un retraso
     artificial reporta el progreso y el cliente lo procesa mediante la función de retorno.
     Se ejecutan 2 agentes en este ejemplo. Obsérvese que la tarea en segundo plano
     no es mostrada por el cliente.
    </para>
    <programlisting role="php">
<![CDATA[
<?php

# El script del cliente

# Crea un cliente Gearman
$gmc= new GearmanClient();

# Añade un servidor de trabajos por omisión
$gmc->addServer();

# Define 2 funciones de retorno para monitorear el progreso
$gmc->setCompleteCallback("reverse_complete");
$gmc->setStatusCallback("reverse_status");

# Añade una tarea para la función "reverse"
$task= $gmc->addTask("reverse", "Hello World!", null, "1");

# Añade otra tarea, pero esta vez, en segundo plano
$task= $gmc->addTaskBackground("reverse", "!dlroW olleH", null, "2");

if (! $gmc->runTasks())
{
    echo "ERROR " . $gmc->error() . "\n";
    exit;
}

echo "HECHO\n";

function reverse_status($task)
{
    echo "ESTADO : " . $task->unique() . ", " . $task->jobHandle() . " - " . $task->taskNumerator() . 
         "/" . $task->taskDenominator() . "\n";
}

function reverse_complete($task)
{
    echo "TERMINADO : " . $task->unique() . ", " . $task->data() . "\n";
}

?>
]]>
    </programlisting>
    <programlisting role="php">
<![CDATA[
<?php

# El script del agente

echo "Inicio\n";

# Crea un agente.
$gmworker= new GearmanWorker();

# Añade un servidor por omisión (localhost).
$gmworker->addServer();

# Registra la función "reverse" en este servidor.
$gmworker->addFunction("reverse", "reverse_fn");

print "Esperando trabajo...\n";
while($gmworker->work())
{
  if ($gmworker->returnCode() != GEARMAN_SUCCESS)
  {
    echo "return_code: " . $gmworker->returnCode() . "\n";
    break;
  }
}

function reverse_fn($job)
{
  echo "Trabajo recibido : " . $job->handle() . "\n";

  $workload = $job->workload();
  $workload_size = $job->workloadSize();

  echo "Carga del agente : $workload ($workload_size)\n";

  # Este ciclo no es necesario, pero ayuda a entender el funcionamiento
  for ($x= 0; $x < $workload_size; $x++)
  {
    echo "Enviando estado : " . ($x + 1) . "/$workload_size complete\n";
    $job->sendStatus($x+1, $workload_size);
    $job->sendData(substr($workload, $x, 1));
    sleep(1);
  }

  $result= strrev($workload);
  echo "Resultado : $result\n";

  # Se devuelve al cliente lo que se desee.
  return $result;
}

?>
]]>
    </programlisting>
    <para>
     El agente muestra, para los 2 trabajos :
    </para>
    <screen>
<![CDATA[
Trabajo recibido : H:foo.local:65
Carga del agente : !dlroW olleH (12)
1/12 complete
Trabajo recibido : H:foo.local:66
Carga del agente : Hello World! (12)
Enviando estado : 1/12 complete
Enviando estado : 2/12 complete
Enviando estado : 2/12 complete
Enviando estado : 3/12 complete
Enviando estado : 3/12 complete
Enviando estado : 4/12 complete
Enviando estado : 4/12 complete
Enviando estado : 5/12 complete
Enviando estado : 5/12 complete
Enviando estado : 6/12 complete
Enviando estado : 6/12 complete
Enviando estado : 7/12 complete
Enviando estado : 7/12 complete
Enviando estado : 8/12 complete
Enviando estado : 8/12 complete
Enviando estado : 9/12 complete
Enviando estado : 9/12 complete
Enviando estado : 10/12 complete
Enviando estado : 10/12 complete
Enviando estado : 11/12 complete
Enviando estado : 11/12 complete
Enviando estado : 12/12 complete
Enviando estado : 12/12 complete
Resultado : !dlroW olleH
Resultado : Hello World!
]]>
    </screen>
    <para>
     Salida del cliente :
    </para>
    <screen>
<![CDATA[
ESTADO : 1, H:foo.local:66 - 1/12
ESTADO : 1, H:foo.local:66 - 2/12
ESTADO : 1, H:foo.local:66 - 3/12
ESTADO : 1, H:foo.local:66 - 4/12
ESTADO : 1, H:foo.local:66 - 5/12
ESTADO : 1, H:foo.local:66 - 6/12
ESTADO : 1, H:foo.local:66 - 7/12
ESTADO : 1, H:foo.local:66 - 8/12
ESTADO : 1, H:foo.local:66 - 9/12
ESTADO : 1, H:foo.local:66 - 10/12
ESTADO : 1, H:foo.local:66 - 11/12
ESTADO : 1, H:foo.local:66 - 12/12
TERMINADO : 1, !dlroW olleH
HECHO
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><methodname>GearmanClient::addTask</methodname></member>
    <member><methodname>GearmanClient::addTaskHigh</methodname></member>
    <member><methodname>GearmanClient::addTaskLow</methodname></member>
    <member><methodname>GearmanClient::addTaskHighBackground</methodname></member>
    <member><methodname>GearmanClient::addTaskLowBackground</methodname></member>
    <member><methodname>GearmanClient::runTasks</methodname></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
