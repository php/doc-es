<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 3c0b61c45a5dabe46865510311e57b77ea3dddb7 Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: no -->
<refentry xml:id="gearmanclient.donormal" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>GearmanClient::doNormal</refname>
  <refpurpose>Ejecuta una tarea y devuelve el resultado</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis role="GearmanClient">
   <modifier>public</modifier> <type>string</type><methodname>GearmanClient::doNormal</methodname>
   <methodparam><type>string</type><parameter>function</parameter></methodparam>
   <methodparam><type>string</type><parameter>workload</parameter></methodparam>
   <methodparam choice="opt"><type class="union"><type>string</type><type>null</type></type><parameter>unique</parameter><initializer>&null;</initializer></methodparam>
  </methodsynopsis>
  <para>
   Ejecuta una tarea y devuelve una &string; que representa
   el resultado. Corresponde a las clases <classname>GearmanClient</classname>
   y <classname>GearmanWorker</classname> aceptar el formato del resultado.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>function</parameter></term>
     <listitem>
      <para>
       &gearman.parameter.functionname;
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>workload</parameter></term>
     <listitem>
      <para>
       &gearman.parameter.workload;
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>unique</parameter></term>
     <listitem>
      <para>
       &gearman.parameter.unique;
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Una &string; que representa el resultado de la tarea ejecutada.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Envío de una tarea con retorno inmediato</title>
    <programlisting role="php">
<![CDATA[
<?php

?>
]]>
    </programlisting>
    <programlisting role="php">
<![CDATA[
<?php

# Código del cliente

echo "Inicio\n";

# Creación del objeto cliente.
$gmclient= new GearmanClient();

# Adición del servidor por omisión (localhost).
$gmclient->addServer();

echo "Envío de la tarea\n";

$result = $gmclient->doNormal("reverse", "Hello!");

echo "Éxito: $result\n";

?>
]]>
    </programlisting>
    <programlisting role="php">
<![CDATA[
<?php

echo "Inicio\n";

# Creación del objeto worker.
$gmworker= new GearmanWorker();

# Adición del servidor por omisión (localhost).
$gmworker->addServer();

# Registro de la función "reverse" con el servidor. Modifica la función worker
# a "reverse_fn_fast" para un worker más rápido sin salida.
$gmworker->addFunction("reverse", "reverse_fn");

print "Esperando una tarea...\n";
while($gmworker->work())
{
  if ($gmworker->returnCode() != GEARMAN_SUCCESS)
  {
    echo "return_code: " . $gmworker->returnCode() . "\n";
    break;
  }
}

function reverse_fn($job)
{
  return strrev($job->workload());
}

?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
Inicio
Envío de la tarea
Éxito: !olleH
]]>
    </screen>
   </example>
   <example>
    <title>Envío de una tarea y recuperación incremental del estado</title>
    <para>
     Una tarea es enviada y el script se ejecuta en bucle para recuperar las
     informaciones de estado. El worker tiene un retraso artificial que lo convierte en una tarea larga
     y envía el estado y los datos cuando la ejecución ocurre.
     Cada subllamada a la función <methodname>GearmanClient::doNormal</methodname>
     produce informaciones de estado sobre la tarea en curso.
    </para>
    <programlisting role="php">
<![CDATA[
<?php

# Código del cliente

# Creación del objeto cliente.
$gmclient= new GearmanClient();

# Adición del servidor por omisión (localhost).
$gmclient->addServer();

echo "Envío de la tarea\n";

# Envío de la tarea reverse
do
{
  $result = $gmclient->doNormal("reverse", "Hello!");
  # Verifica los paquetes devueltos así como los errores.

  switch($gmclient->returnCode())
  {
    case GEARMAN_WORK_DATA:
      echo "Datos: $result\n";
      break;
    case GEARMAN_WORK_STATUS:
      list($numerator, $denominator)= $gmclient->doStatus();
      echo "Estado: $numerator/$denominator completado\n";
      break;
    case GEARMAN_WORK_FAIL:
      echo "Fallo\n";
      exit;
    case GEARMAN_SUCCESS:
      break;
    default:
      echo "RET: " . $gmclient->returnCode() . "\n";
      echo "Error: " . $gmclient->error() . "\n";
      echo "Errno: " . $gmclient->getErrno() . "\n";
      exit;
  }
}
while($gmclient->returnCode() != GEARMAN_SUCCESS);

echo "Éxito: $result\n";

?>
]]>
    </programlisting>
    <programlisting role="php">
<![CDATA[
<?php

# Código del worker

echo "Inicio\n";

# Creación del objeto worker.
$gmworker= new GearmanWorker();

# Adición del servidor por omisión (localhost).
$gmworker->addServer();

# Registro de la función "reverse" con el servidor.
$gmworker->addFunction("reverse", "reverse_fn");

print "Esperando una tarea...\n";
while($gmworker->work())
{
  if ($gmworker->returnCode() != GEARMAN_SUCCESS)
  {
    echo "return_code: " . $gmworker->returnCode() . "\n";
    break;
  }
}

function reverse_fn($job)
{
  echo "Tarea recibida: " . $job->handle() . "\n";

  $workload = $job->workload();
  $workload_size = $job->workloadSize();

  echo "Workload: $workload ($workload_size)\n";

  # Este bucle de estado no es necesario, solo muestra cómo funciona
  for ($x= 0; $x < $workload_size; $x++)
  {
    echo "Envío del estado: " + $x + 1 . "/$workload_size completado\n";
    $job->sendStatus($x+1, $workload_size);
    $job->sendData(substr($workload, $x, 1));
    sleep(1);
  }

  $result= strrev($workload);
  echo "Resultado: $result\n";

  # Devuelve lo que se desea devolver al cliente.
  return $result;
}

?>
]]>
    </programlisting>
    &example.outputs.similar;
    <para>
     Salida del worker:
    </para>
    <screen>
<![CDATA[
Inicio
Esperando una tarea...
Tarea recibida: H:foo.local:106
Workload: Hello! (6)
1/6 completado
2/6 completado
3/6 completado
4/6 completado
5/6 completado
6/6 completado
Resultado: !olleH
]]>
    </screen>
    <para>
     Salida del cliente:
    </para>
    <screen>
<![CDATA[
Inicio
Envío de la tarea
Estado: 1/6 completado
Datos: H
Estado: 2/6 completado
Datos: e
Estado: 3/6 completado
Datos: l
Estado: 4/6 completado
Datos: l
Estado: 5/6 completado
Datos: o
Estado: 6/6 completado
Datos: !
Éxito: !olleH
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><methodname>GearmanClient::doHigh</methodname></member>
    <member><methodname>GearmanClient::doLow</methodname></member>
    <member><methodname>GearmanClient::doBackground</methodname></member>
    <member><methodname>GearmanClient::doHighBackground</methodname></member>
    <member><methodname>GearmanClient::doLowBackground</methodname></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
