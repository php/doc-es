<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: e50e79746736dbdfbabe9bd3566793b3ddf38f58 Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: yes Maintainer: girgias -->

<appendix xml:id="array.constants" xmlns="http://docbook.org/ns/docbook">
 &reftitle.constants;
 &extension.constants.core;
 <para>
 <variablelist>
  <varlistentry xml:id="constant.case-lower">
   <term>
    <constant>CASE_LOWER</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     <constant>CASE_LOWER</constant> se utiliza con
     <function>array_change_key_case</function> y sirve para convertir
     todos los índices de un array en minúsculas. Este es también el comportamiento
     por omisión de <function>array_change_key_case</function>.
     A partir de PHP 8.2.0, solo los caracteres ASCII serán convertidos.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.case-upper">
   <term>
    <constant>CASE_UPPER</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     <constant>CASE_UPPER</constant> se utiliza con
     <function>array_change_key_case</function> y sirve para convertir
     todos los índices de un array en mayúsculas.
     A partir de PHP 8.2.0, solo los caracteres ASCII serán convertidos.
    </simpara>
   </listitem>
  </varlistentry>
 </variablelist>
 </para>

 <para>Constantes de ordenación:
 <variablelist>
  <varlistentry xml:id="constant.sort-asc">
   <term>
    <constant>SORT_ASC</constant>
    (<type>int</type>)
   </term>
     <listitem>
      <simpara>
       <constant>SORT_ASC</constant> se utiliza con
       <function>array_multisort</function> para ordenar en orden ascendente.
      </simpara>
     </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.sort-desc">
   <term>
    <constant>SORT_DESC</constant>
    (<type>int</type>)
   </term>
     <listitem>
      <simpara>
       <constant>SORT_DESC</constant> se utiliza con
       <function>array_multisort</function> para ordenar en orden descendente.
      </simpara>
     </listitem>
  </varlistentry>
 </variablelist>
 </para>

 <para> Otras constantes de ordenación:
 <variablelist>
  <varlistentry xml:id="constant.sort-regular">
   <term>
    <constant>SORT_REGULAR</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     <constant>SORT_REGULAR</constant> compara normalmente los valores de una ordenación.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.sort-numeric">
   <term>
    <constant>SORT_NUMERIC</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     <constant>SORT_NUMERIC</constant> compara numéricamente los valores de una ordenación.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.sort-string">
   <term>
    <constant>SORT_STRING</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     <constant>SORT_STRING</constant> compara alfabéticamente los valores de una ordenación.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.sort-locale-string">
   <term>
    <constant>SORT_LOCALE_STRING</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     <constant>SORT_LOCALE_STRING</constant> se utiliza para comparar
     alfabéticamente los valores de una ordenación, utilizando la configuración local actual.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.sort-natural">
   <term>
    <constant>SORT_NATURAL</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     <constant>SORT_NATURAL</constant> se utiliza para comparar
     los elementos como strings, utilizando un "orden natural"
     como lo hace la función <function>natsort</function>.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.sort-flag-case">
   <term>
    <constant>SORT_FLAG_CASE</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     <constant>SORT_FLAG_CASE</constant> puede ser combinado
     (con el operador bitwise OR) con
     <constant>SORT_STRING</constant> o
     <constant>SORT_NATURAL</constant> para ordenar strings
     sin tener en cuenta la casilla.
     A partir de PHP 8.2.0, solo la conversión ASCII
     en función de la casilla será realizada.
    </simpara>
   </listitem>
  </varlistentry>
  </variablelist>
 </para>

 <para> Banderas de filtro:
 <variablelist>
  <varlistentry xml:id="constant.array-filter-use-key">
   <term>
    <constant>ARRAY_FILTER_USE_KEY</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     <constant>ARRAY_FILTER_USE_KEY</constant> se utiliza con
     <function>array_filter</function> para pasar cada clave como primer
     argumento a la función de retrollamada proporcionada.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.array-filter-use-both">
   <term>
    <constant>ARRAY_FILTER_USE_BOTH</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     <constant>ARRAY_FILTER_USE_BOTH</constant> se utiliza con
     <function>array_filter</function> para pasar el valor y la clave a la
     función de retrollamada proporcionada.
    </simpara>
   </listitem>
  </varlistentry>
 </variablelist>
 </para>
 <variablelist>
  <varlistentry xml:id="constant.count-normal">
   <term>
    <constant>COUNT_NORMAL</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>

    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.count-recursive">
   <term>
    <constant>COUNT_RECURSIVE</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>

    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.extr-overwrite">
   <term>
    <constant>EXTR_OVERWRITE</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>

    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.extr-skip">
   <term>
    <constant>EXTR_SKIP</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>

    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.extr-prefix-same">
   <term>
    <constant>EXTR_PREFIX_SAME</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>

    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.extr-prefix-all">
   <term>
    <constant>EXTR_PREFIX_ALL</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>

    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.extr-prefix-invalid">
   <term>
    <constant>EXTR_PREFIX_INVALID</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>

    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.extr-prefix-if-exists">
   <term>
    <constant>EXTR_PREFIX_IF_EXISTS</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>

    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.extr-if-exists">
   <term>
    <constant>EXTR_IF_EXISTS</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>

    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.extr-refs">
   <term>
    <constant>EXTR_REFS</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>

    </simpara>
   </listitem>
  </varlistentry>
 </variablelist>
</appendix>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
