<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 2e60c5134e7a847c99f81eb3f7ecee1f5efeeace Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: no -->
<!-- CREDITS: DavidA. -->
<refentry xml:id="function.array-map" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>array_map</refname>
  <refpurpose>Aplica una función sobre los elementos de un array</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>array</type><methodname>array_map</methodname>
   <methodparam><type class="union"><type>callable</type><type>null</type></type><parameter>callback</parameter></methodparam>
   <methodparam><type>array</type><parameter>array</parameter></methodparam>
   <methodparam rep="repeat"><type>array</type><parameter>arrays</parameter></methodparam>
  </methodsynopsis>
  <para>
   <function>array_map</function> devuelve un &array; que contiene
   los resultados de la aplicación de la función de devolución de llamada
   <parameter>callback</parameter> al valor correspondiente de
   <parameter>array</parameter> (y <parameter>arrays</parameter> si se proporcionan
   más arrays) utilizados como argumentos para la función de devolución de llamada.
   El número de argumentos que la función de devolución de llamada <parameter>callback</parameter>
   acepta debe corresponder al número de arrays pasados a
   <function>array_map</function>.
   Los arrays de entrada adicionales son ignorados.
   Se lanza una <classname>ArgumentCountError</classname> si se proporciona un número
   insuficiente de argumentos.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>callback</parameter></term>
     <listitem>
      <para>
       La función de devolución de llamada de tipo <type>callable</type> a ejecutar
       para cada elemento de cada array.
      </para>
      <para>
       &null; puede ser pasado como valor a <parameter>callback</parameter>
       para ejecutar una operación zip sobre varios arrays y devolver un array
       cuyos elementos son cada uno un array que contiene los elementos de los arrays de entrada
       con el mismo índice (ver el ejemplo a continuación).
       Si solo <parameter>array</parameter> es proporcionado,
       <methodname>array_map</methodname> devolverá el array de entrada.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>array</parameter></term>
     <listitem>
      <para>
       Un array a ejecutar a través de la función de devolución de llamada <parameter>callback</parameter>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>arrays</parameter></term>
     <listitem>
      <para>
       Lista variable de argumentos de arrays adicionales a ejecutar a través
       de la función de devolución de llamada <parameter>callback</parameter>.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Devuelve un &array; que contiene los resultados de la aplicación de la función
   de devolución de llamada <parameter>callback</parameter> al valor correspondiente de
   <parameter>array</parameter> (y <parameter>arrays</parameter> si se proporcionan
   más arrays) utilizados como argumentos para la función de devolución de llamada.
  </para>
  <para>
   El &array; devuelto conservará las claves del array pasado como argumento,
   si y solo si, se pasa un solo array. Si se pasan varios arrays como argumento,
   el &array; devuelto tendrá claves secuenciales en forma de &integer;.
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <informaltable>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>&Version;</entry>
      <entry>&Description;</entry>
     </row>
    </thead>
    <tbody>
     &array.changelog.by-ref;
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Ejemplo con <function>array_map</function></title>
    <programlisting role="php">
<![CDATA[
<?php
function cube($n)
{
    return ($n * $n * $n);
}

$a = [1, 2, 3, 4, 5];
$b = array_map('cube', $a);
print_r($b);
?>
]]>
    </programlisting>
    <para>
     El contenido de la variable <varname>$b</varname> será:
    </para>
    <screen>
<![CDATA[
Array
(
    [0] => 1
    [1] => 8
    [2] => 27
    [3] => 64
    [4] => 125
)
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title><function>array_map</function> utilizando una función cualquiera</title>
    <programlisting role="php">
<![CDATA[
<?php

$func = function(int $value): int {
    return $value * 2;
};

print_r(array_map($func, range(1, 5)));

// O a partir de PHP 7.4.0:

print_r(array_map(fn($value): int => $value * 2, range(1, 5)));

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Array
(
    [0] => 2
    [1] => 4
    [2] => 6
    [3] => 8
    [4] => 10
)
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title><function>array_map</function>: uso de varios arrays</title>
    <programlisting role="php">
<![CDATA[
<?php
function show_Spanish(int $n, string $m): string
{
    return "El número {$n} se dice {$m} en Español";
}

function map_Spanish(int $n, string $m): array
{
    return [$n => $m];
}

$a = [1, 2, 3, 4, 5];
$b = ['uno', 'dos', 'tres', 'cuatro', 'cinco'];

$c = array_map('show_Spanish', $a, $b);
print_r($c);

$d = array_map('map_Spanish', $a , $b);
print_r($d);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
// Contenido de $c
Array
(
    [0] => El número 1 se dice uno en Español
    [1] => El número 2 se dice dos en Español
    [2] => El número 3 se dice tres en Español
    [3] => El número 4 se dice cuatro en Español
    [4] => El número 5 se dice cinco en Español
)

// Contenido de $d
Array
(
    [0] => Array
        (
            [1] => uno
        )

    [1] => Array
        (
            [2] => dos
        )

    [2] => Array
        (
            [3] => tres
        )

    [3] => Array
        (
            [4] => cuatro
        )

    [4] => Array
        (
            [5] => cinco
        )

)
]]>
    </screen>
   </example>
  </para>
  <para>
   Generalmente, al utilizar varios arrays, estos deben
   tener la misma longitud, ya que la función de devolución de llamada se aplica de manera
   similar a todos los arrays. Si los arrays tienen longitudes desiguales,
   los más pequeños serán completados con elementos vacíos para alcanzar
   la longitud del más grande.
  </para>
  <para>
   Un uso interesante de esta función es la construcción
   de arrays de arrays, fácilmente realizada pasando el valor
   &null; como nombre de función de devolución de llamada.
  </para>
  <para>
   <example>
    <title>Ejecutar una operación zip de arrays</title>
    <programlisting role="php">
<![CDATA[
<?php
$a = [1, 2, 3, 4, 5];
$b = ['one', 'two', 'three', 'four', 'five'];
$c = ['uno', 'dos', 'tres', 'cuatro', 'cinco'];

$d = array_map(null, $a, $b, $c);
print_r($d);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Array
(
    [0] => Array
        (
            [0] => 1
            [1] => one
            [2] => uno
        )

    [1] => Array
        (
            [0] => 2
            [1] => two
            [2] => dos
        )

    [2] => Array
        (
            [0] => 3
            [1] => three
            [2] => tres
        )

    [3] => Array
        (
            [0] => 4
            [1] => four
            [2] => cuatro
        )

    [4] => Array
        (
            [0] => 5
            [1] => five
            [2] => cinco
        )

)
]]>
    </screen>
   </example>
  </para>

  <para>
   <example>
    <title>
     &null; <parameter>callback</parameter> con solo
     <parameter>array</parameter>
    </title>
    <programlisting role="php">
<![CDATA[
<?php
$array = [1, 2, 3];
var_dump(array_map(null, $array));
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
array(3) {
  [0]=>
  int(1)
  [1]=>
  int(2)
  [2]=>
  int(3)
}
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title>
     <function>array_map</function> - con claves en forma de &string;
    </title>
    <programlisting role="php">
<![CDATA[
<?php
$arr = ['stringkey' => 'value'];
function cb1($a) {
    return [$a];
}
function cb2($a, $b) {
    return [$a, $b];
}
var_dump(array_map('cb1', $arr));
var_dump(array_map('cb2', $arr, $arr));
var_dump(array_map(null,  $arr));
var_dump(array_map(null, $arr, $arr));
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
array(1) {
  ["stringkey"]=>
  array(1) {
    [0]=>
    string(5) "value"
  }
}
array(1) {
  [0]=>
  array(2) {
    [0]=>
    string(5) "value"
    [1]=>
    string(5) "value"
  }
}
array(1) {
  ["stringkey"]=>
  string(5) "value"
}
array(1) {
  [0]=>
  array(2) {
    [0]=>
    string(5) "value"
    [1]=>
    string(5) "value"
  }
}
]]>
    </screen>
   </example>
   <example>
    <title><function>array_map</function> - arrays asociativos</title>
    <para>
     Aunque <function>array_map</function> no soporta directamente
     el uso de las claves de un array como entrada, esto puede ser simulado
     utilizando <function>array_keys</function>.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
$arr = [
    'v1' => 'First release',
    'v2' => 'Second release',
    'v3' => 'Third release',
];
// Nota: Anterior a 7.4.0, se debe utilizar la sintaxis más larga para las
// funciones anónimas en su lugar.
$callback = fn(string $k, string $v): string => "$k was the $v";
$result = array_map($callback, array_keys($arr), array_values($arr));
var_dump($result);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
array(3) {
  [0]=>
  string(24) "v1 was the First release"
  [1]=>
  string(25) "v2 was the Second release"
  [2]=>
  string(24) "v3 was the Third release"
}
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>array_filter</function></member>
    <member><function>array_reduce</function></member>
    <member><function>array_walk</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
