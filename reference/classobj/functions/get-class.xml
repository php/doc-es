<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 4f36c26a72c40b16e955c3c1c88041910932d0bf Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: yes Maintainer: pmartin -->
<refentry xml:id="function.get-class" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>get_class</refname>
  <refpurpose>Devuelve el nombre de la clase de un objeto</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>string</type><methodname>get_class</methodname>
   <methodparam choice="opt"><type>object</type><parameter>object</parameter></methodparam>
  </methodsynopsis>
  <para>
   Devuelve el nombre de la clase del objeto <parameter>obj</parameter>.
  </para>
 </refsect1>
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>object</parameter></term>
     <listitem>
      <para>
       El objeto probado.
      </para>
      <note>
       <simpara>
        Pasar explícitamente &null; en <parameter>object</parameter> ya no es
        permitido desde PHP 7.2.0 y emite una <constant>E_WARNING</constant>.
        A partir de PHP 8.0.0, se emite una <classname>TypeError</classname>
        cuando &null; es utilizado.
       </simpara>
      </note>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Devuelve el nombre de la clase de la cual <parameter>object</parameter>
   es una instancia.
  </para>
  <para>
   Si <parameter>object</parameter> es una instancia de una clase que existe
   en un espacio de nombres, el nombre con el espacio de nombres de la clase será devuelto.
  </para>
 </refsect1>
 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   Si <function>get_class</function> es llamada con algo que no sea un objeto,
   se levanta una <classname>TypeError</classname>. Anteriormente a PHP 8.0.0,
   se emitía una advertencia de nivel <constant>E_WARNING</constant>.
  </para>
  <para>
   Si <function>get_class</function> es llamado sin argumento fuera de una
   clase, se levanta una <classname>Error</classname>. Anteriormente a PHP 8.0.0,
   se emitía una advertencia de nivel <constant>E_WARNING</constant>.
  </para>
 </refsect1>
 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>8.3.0</entry>
       <entry>
        Llamar a <function>get_class</function> sin argumento ahora desencadena una advertencia
        <constant>E_DEPRECATED</constant>; previamente, llamar a esta función dentro de una clase devolvía el nombre de esa clase.
       </entry>
      </row>
      <row>
       <entry>8.0.0</entry>
       <entry>
        Llamar a esta función desde fuera de una clase ahora lanza una <classname>Error</classname>.
        Anteriormente, se generaba un <constant>E_WARNING</constant> y la función devolvía &false;.
       </entry>
      </row>
      <row>
       <entry>7.2.0</entry>
       <entry>
        Anteriormente a esta versión, el valor por omisión para
        <parameter>object</parameter> era &null; y tenía el mismo efecto que
        no pasar ningún valor. Ahora &null; ya no es el valor por omisión
        para <parameter>object</parameter>, y ya no es una entrada válida.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>
 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Ejemplo con <function>get_class</function></title>
    <programlisting role="php">
<![CDATA[
<?php

class foo {
    function name()
    {
        echo "Mi nombre es " , get_class($this) , "\n";
    }
}

// creación de un objeto
$bar = new foo();

// Llamada externa
echo "Su nombre es " , get_class($bar) , "\n";

// Llamada interna
$bar->name();

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Su nombre es foo
Mi nombre es foo
]]>
    </screen>
   </example>
   <example>
    <title>Uso de <function>get_class</function> en una superclase</title>
    <programlisting role="php">
<![CDATA[
<?php

abstract class bar {
    public function __construct()
    {
        var_dump(get_class($this));
        var_dump(get_class());
    }
}

class foo extends bar {
}

new foo;

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
string(3) "foo"
string(3) "bar"
]]>
    </screen>
   </example>
   <example>
    <title>Uso de <function>get_class</function> con espacios de nombres de clase</title>
    <programlisting role="php">
<![CDATA[
<?php

namespace Foo\Bar;

class Baz {
    public function __construct()
    {

    }
}

$baz = new \Foo\Bar\Baz;

var_dump(get_class($baz));
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
string(11) "Foo\Bar\Baz"
]]>
    </screen>
   </example>
  </para>
 </refsect1>
 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>get_called_class</function></member>
    <member><function>get_parent_class</function></member>
    <member><function>gettype</function></member>
    <member><function>get_debug_type</function></member>
    <member><function>is_subclass_of</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
