<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: e58094c4537a9ac89a6a0a7e64a4256d63e05514 Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: yes -->
<refentry xml:id="function.ob-start" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>ob_start</refname>
  <refpurpose>Activa el temporizador de salida</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>bool</type><methodname>ob_start</methodname>
   <methodparam choice="opt"><type class="union"><type>callable</type><type>null</type></type><parameter>callback</parameter><initializer>&null;</initializer></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>chunk_size</parameter><initializer>0</initializer></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>flags</parameter><initializer><constant>PHP_OUTPUT_HANDLER_STDFLAGS</constant></initializer></methodparam>
  </methodsynopsis>
  <para>
   Esta función activa el almacenamiento en búfer de la salida.
   Cuando el almacenamiento en búfer está activo, ninguna salida es enviada desde el script;
   en su lugar, la salida se almacena en un búfer interno.
   Consulte <xref linkend="outcontrol.what-output-is-buffered"/>
   para saber exactamente qué salidas están afectadas.
  </para>
  <para>
   Los búferes de salida son apilables, es decir
   <function>ob_start</function> puede ser llamada mientras otro búfer está activo.
   Si varios búferes de salida están activos,
   la salida es filtrada secuencialmente
   a través de cada uno de ellos en el orden de anidación.
   Consulte <xref linkend="outcontrol.nesting-output-buffers"/> para más detalles.
  </para>
  <para>
   Consulte <xref linkend="outcontrol.user-level-output-buffers"/>
   para una descripción detallada de los búferes de salida.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>callback</parameter></term>
     <listitem>
      <para>
       Un <parameter>callback</parameter> <type>callable</type> opcional puede ser
       especificado. También puede ser omitido pasando &null;.
      </para>
      <para>
       <parameter>callback</parameter> es invocado cuando el búfer de salida es
       vaciado (enviado), limpiado, o cuando el búfer de salida es vaciado
       al final del script.
      </para>
      <para>
       La firma del <parameter>callback</parameter> es la siguiente:
      </para>
      <para>
       <methodsynopsis>
        <type>string</type><methodname><replaceable>handler</replaceable></methodname>
        <methodparam><type>string</type><parameter>buffer</parameter></methodparam>
        <methodparam choice="opt"><type>int</type><parameter>phase</parameter></methodparam>
       </methodsynopsis>
       <variablelist>
        <varlistentry>
         <term><parameter>buffer</parameter></term>
         <listitem>
          <simpara>
           Contenido del buffer de salida.
          </simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
         <term><parameter>phase</parameter></term>
         <listitem>
          <simpara>
           Máscara de bits de las constantes
           <link linkend="constant.php-output-handler-start">
            <constant>PHP_OUTPUT_HANDLER_<replaceable>*</replaceable></constant>
           </link>.
           Consulte <xref linkend="outcontrol.flags-passed-to-output-handlers"/>
           para más detalles.
          </simpara>
         </listitem>
        </varlistentry>
       </variablelist>
      </para>
      <para>
       Si <parameter>callback</parameter> devuelve &false;,
       el contenido del búfer es enviado.
       Consulte <xref linkend="outcontrol.output-handler-return-values"/>
       para más detalles.
      </para>
      <warning>
       <simpara>
        Llamar a alguna de las siguientes funciones desde un manejador de salida
        provocará un error fatal:
        <function>ob_clean</function>, <function>ob_end_clean</function>,
        <function>ob_end_flush</function>, <function>ob_flush</function>,
        <function>ob_get_clean</function>, <function>ob_get_flush</function>,
        <function>ob_start</function>.
       </simpara>
      </warning>
      <para>
       Consulte <xref linkend="outcontrol.output-handlers"/>
       y <xref linkend="outcontrol.working-with-output-handlers"/>
       para más detalles sobre los <parameter>callback</parameter>s (manejadores de salida).
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>chunk_size</parameter></term>
     <listitem>
      <para>
       Si el parámetro opcional <parameter>chunk_size</parameter> es pasado,
       la función de devolución de llamada es llamada cada nueva línea después
       de <parameter>chunk_size</parameter> bytes de salida.
       El valor por omisión <literal>0</literal> significa
       que toda la salida es almacenada en búfer hasta que el búfer sea desactivado.
       Consulte <xref linkend="outcontrol.buffer-size"/> para más detalles.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>flags</parameter></term>
     <listitem>
      <para>
       El parámetro <parameter>flags</parameter> es una máscara que controla
       las operaciones que pueden ser realizadas sobre el búfer de salida.
       Por omisión, permite que el búfer de salida sea limpiado, enviado
       y eliminado, lo cual puede ser definido explícitamente con los
       <link linkend="outcontrol.constants.buffer-control-flags">
        indicadores de control del búfer
       </link>.
       Consulte <xref linkend="outcontrol.operations-on-buffers"/>
       para más detalles.
      </para>
      <para>
       Cada flag controla el acceso a un conjunto de funciones, tal como se describe
       a continuación:
       <informaltable>
        <tgroup cols="2">
         <thead>
          <row>
           <entry>Constante</entry>
           <entry>Funciones</entry>
          </row>
         </thead>
         <tbody>
          <row>
           <entry><constant>PHP_OUTPUT_HANDLER_CLEANABLE</constant></entry>
           <entry>
            <function>ob_clean</function>,
           </entry>
          </row>
          <row>
           <entry><constant>PHP_OUTPUT_HANDLER_FLUSHABLE</constant></entry>
           <entry>
            <function>ob_flush</function>,
           </entry>
          </row>
          <row>
           <entry><constant>PHP_OUTPUT_HANDLER_REMOVABLE</constant></entry>
           <entry>
            <function>ob_end_clean</function>,
            <function>ob_end_flush</function> y
            <function>ob_get_clean</function>.
            <function>ob_get_flush</function>.
           </entry>
          </row>
         </tbody>
        </tgroup>
       </informaltable>
       <note>
        <simpara>
         Antes de PHP 8.4.0, el parámetro flags podía definir
         los <link linkend="outcontrol.constants.flags-returned-by-handler">flags de estado del manejador de salida</link> también.
        </simpara>
       </note>
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.success;
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Ejemplo de manejo de salida con función de devolución de llamada</title>
    <programlisting role="php">
<![CDATA[
<?php

function handler($buffer)
{
  // reemplaza todas las patatas por zanahorias
  return (str_replace("pommes de terre", "carottes", $buffer));
}

ob_start("handler");

?>
<html>
<body>
<p>Es como comparar zanahorias y patatas.</p>
</body>
</html>
<?php

ob_end_flush();

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
<html>
<body>
<p>Es como comparar zanahorias y zanahorias.</p>
</body>
</html>
]]>
    </screen>
   </example>
  </para>

  <para>
   <example xml:id="function.ob-start.flags-bc">
    <title>Crea un búfer de salida no eliminable</title>
    <programlisting role="php">
<![CDATA[
<?php

ob_start(null, 0, PHP_OUTPUT_HANDLER_STDFLAGS ^ PHP_OUTPUT_HANDLER_REMOVABLE);

?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>ob_get_contents</function></member>
    <member><function>ob_end_clean</function></member>
    <member><function>ob_end_flush</function></member>
    <member><function>ob_implicit_flush</function></member>
    <member><function>ob_gzhandler</function></member>
    <member><function>ob_iconv_handler</function></member>
    <member><function>mb_output_handler</function></member>
    <member><function>ob_tidyhandler</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
