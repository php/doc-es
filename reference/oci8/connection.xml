<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 5e41012cfdf8f2eff5fa56de446c7656afac536c Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: no -->
<chapter xml:id="oci8.connection" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Gestión de la conexión OCI8 y la cola de espera</title>
 <section>
  <title>Funciones de conexión</title>
  <para>
   La extensión oci8 proporciona tres funciones diferentes para conectarse
   a Oracle. La función de conexión estándar es la función
   <function>oci_connect</function>. Esta función crea una conexión
   a la base de datos Oracle y devuelve un recurso utilizado
   por las futuras llamadas a la base de datos.
  </para>
  <para>
   La conexión a un servidor Oracle es una operación razonablemente costosa
   en términos de tiempo. La función <function>oci_pconnect</function>
   utiliza un caché persistente de conexiones que puede ser reutilizado a través
   de diferentes scripts. Esto significa que una sola conexión será utilizada por
   proceso PHP (o un hijo Apache).
  </para>
  <para>
   Si su aplicación se conecta a Oracle utilizando un juego diferente de derechos
   de base de datos para cada usuario web, el caché persistente utilizado
   por la función <function>oci_pconnect</function> se vuelve menos apropiado
   ya que el aumento del número de usuarios concurrentes afectará el rendimiento
   del servidor Oracle, ya que deberá mantener demasiadas conexiones en caché.
   Si su aplicación es de este tipo, se recomienda optimizar su aplicación
   utilizando las opciones de configuración <link
   linkend="ini.oci8.max-persistent">oci8.max_persistent</link> y <link
   linkend="ini.oci8.persistent-timeout">oci8.persistent_timeout</link>
   (estas opciones le dan control sobre el tamaño y la vida útil del caché
   de conexiones persistentes) o utilizar el pool de conexiones residentes de Oracle
   (para las bases de datos Oracle 11g y posteriores), o bien, utilizar la función
   <function>oci_connect</function>.
  </para>
  <para>
   Las funciones <function>oci_connect</function> y <function>oci_pconnect</function>
   emplean un caché de conexiones; si se realizan múltiples llamadas
   a <function>oci_connect</function>, utilizando los mismos parámetros en
   un script dado, la segunda llamada y las siguientes devolverán el manejador
   de conexión existente. El caché utilizado por la función <function>oci_connect</function>
   se limpia al final de la ejecución del script o cuando se cierra explícitamente
   el manejador de conexión. <function>oci_pconnect</function> tiene un comportamiento
   sustancialmente idéntico, con la diferencia de que el caché se mantiene por separado
   y se conserva entre las peticiones HTTP.
  </para>
  <para>
   Es importante recordar esta funcionalidad de caché, ya que da la apariencia de que
   los dos manejadores no están aislados a nivel de transacciones
   (en realidad representan el mismo manejador de conexión, por lo que no están aislados
   en absoluto). Si su conexión necesita dos conexiones separadas, aisladas
   a nivel de transacciones, debe utilizar la función <function>oci_new_connect</function>.
  </para>
  <para>
   El caché de la función <function>oci_pconnect</function> se borra
   y todas las conexiones a la base de datos se cierran cuando el proceso
   PHP termina, por lo que las conexiones persistentes solo tienen interés cuando
   PHP se utiliza como módulo Apache o con FPM o similar.
   Las conexiones persistentes no tienen ningún interés a través de <function>oci_connect</function>
   cuando PHP se utiliza como CGI o en línea de comandos.
  </para>
  <para>
   <function>oci_new_connect</function> siempre crea una nueva conexión al
   servidor Oracle, independientemente de la existencia de otras conexiones.
   Las aplicaciones web de alto tráfico deben evitar utilizar
   <function>oci_new_connect</function>, especialmente en las secciones
   más cargadas de la aplicación.
  </para>
  <para>
   Las conexiones persistentes pueden ahora ser cerradas
   por el usuario, permitiendo un mejor control de los recursos
   de conexión. Las conexiones persistentes pueden ahora ser cerradas
   automáticamente cuando ninguna variable PHP las referencia, como podría ser el caso
   al final de un contexto de una función de usuario PHP.
   Esto invalidará todas las transacciones no confirmadas. Estos cambios en las
   conexiones persistentes hacen que funcionen como las funciones
   no persistentes, simplificando la interfaz, permitiendo una mayor
   coherencia de la aplicación y previsibilidad. Defina la directiva
   <link linkend="ini.oci8.old-oci-close-semantics">oci8.old_oci_close_semantics</link>
   a <emphasis>On</emphasis> para recuperar el comportamiento histórico.
  </para>
  <para>
   El restablecimiento automático de las conexiones persistentes PHP
   después del reinicio de un proceso Apache o FPM hace que los triggers
   <literal>LOGON</literal> sean únicamente recomendados para definir
   los atributos de sesión y no las peticiones de conexión de usuarios
   por aplicación.
  </para>
 </section>
 <section>
  <title>Pool de conexión DRCP</title>
  <para>
   PHP soporta el pool de conexiones residentes
   Oracle (DRCP). DRCP permite utilizar más eficientemente la memoria de la base de datos
   y permite una mejor escalabilidad. Se requieren pocos o ningún cambio
   para aprovechar DRCP.
  </para>
  <para>
   DRCP está previsto para aplicaciones que se conectan utilizando poco
   esquema de base de datos, y que mantienen las conexiones abiertas
   durante un corto período de tiempo. Las otras aplicaciones deben
   utilizar el proceso dedicado a la base de datos Oracle, o utilizar
   los servidores compartidos.
  </para>
  <para>
   DRCP se beneficia de las 3 funciones de conexión, pero solo la función
   <function>oci_pconnect</function> ofrece el mayor rendimiento.
  </para>
  <para>
   Para hacer DRCP disponible con OCI8, la versión de las bibliotecas clientes Oracle
   utilizadas por PHP así como la versión de la base de datos Oracle
   deben ser 11g o superiores.
  </para>
  <para>
   La documentación sobre DRCP puede encontrarse en los diferentes manuales
   Oracle. Por ejemplo, consulte la
   <link xlink:href="&url.oracle.drcp.configure;">configuración del pool
    de conexiones residentes a la base de datos</link> de la documentación
   Oracle para un ejemplo de uso.
   Un <link xlink:href="&url.oracle.drcp.whitepaper;">libro blanco sobre DRCP</link>
   contiene varias informaciones internas sobre DRCP.
  </para>
  <para>
   Para utilizar DRCP, instale la extensión OCI8 y las
   bibliotecas Oracle 11g (o posterior), luego, siga estos pasos:
  </para>
  <para>
   <itemizedlist>
    <listitem>
     <para>
      Utilizando los privilegios de administrador de la base de datos,
      utilice un programa como SQL*Plus para iniciar un pool
      de conexiones a la base de datos:
     </para>
     <para>
      <informalexample>
       <screen>
<![CDATA[
    SQL> execute dbms_connection_pool.start_pool;
]]>
       </screen>
      </informalexample>
     </para>
    </listitem>
    <listitem>
     <para>
      Opcionalmente, utilice <literal>dbms_connection_pool.alter_param()</literal>
      para configurar las opciones DRCP. Las opciones comunes del pool
      pueden encontrarse utilizando la vista <literal>DBA_CPOOL_INFO</literal>.
     </para>
    </listitem>
    <listitem>
     <para>
      Actualice las cadenas de conexión utilizadas. Para las aplicaciones PHP
      que actualmente se conectan mediante un nombre de conexión de red como
      <literal>MYDB</literal>:
     </para>
     <para>
      <informalexample>
       <screen>
<![CDATA[
    $c = oci_pconnect("myuser", "mypassword", "MYDB");
]]>
       </screen>
      </informalexample>
     </para>
     <para>
      modifique el archivo tnsnames.ora y añada una cláusula
      <literal>(SERVER=POOLED)</literal>, por ejemplo:
     </para>
     <para>
      <informalexample>
       <screen>
<![CDATA[
    MYDB = (DESCRIPTION=(ADDRESS=(PROTOCOL=tcp) (HOST=myhost.dom.com)
           (PORT=1521))(CONNECT_DATA=(SERVICE_NAME=sales)
           (SERVER=POOLED)))
]]>
       </screen>
      </informalexample>
     </para>
     <para>
      De lo contrario, puede modificar la sintaxis de conexión fácil en PHP y añadir
      <literal>:POOLED</literal> después del nombre del servicio:
     </para>
     <para>
      <informalexample>
       <screen>
<![CDATA[
    $c = oci_pconnect("myuser", "mypassword", "myhost.dom.com:1521/sales:POOLED");
]]>
       </screen>
      </informalexample>
     </para>
    </listitem>
    <listitem>
     <para>
      Edite &php.ini; y elija el nombre de la clase de conexión.
      Este nombre indica una división lógica del pool de conexión y puede
      ser utilizado para aislar el pool de diferentes aplicaciones.
      Todas las aplicaciones PHP utilizando el mismo usuario así como
      el mismo valor de clase de conexión podrán compartir
      el pool de conexiones, permitiendo así obtener una mayor disponibilidad.
     </para>
     <para>
      <informalexample>
       <screen>
<![CDATA[
    oci8.connection_class = "MY_APPLICATION_NAME"
]]>
       </screen>
      </informalexample>
     </para>
    </listitem>
    <listitem>
     <para>
      Ejecute su aplicación, conéctese a la base de datos
      11g (o superior).
     </para>
    </listitem>
   </itemizedlist>
  </para>
  <note>
   <para>
    Las aplicaciones que utilizan las bibliotecas cliente Oracle 10g que necesitan el rendimiento
    de las conexiones persistentes, pueden reducir la cantidad de memoria
    asignada al servidor de la base de datos utilizando los servidores
    compartidos Oracle (conocidos anteriormente como servidores multihilo).
    Consulte la documentación Oracle para obtener más información.
   </para>
  </note>
  <note>
   <para>
    La modificación de una contraseña durante conexiones DRCP fallará
    con el error "<emphasis>ORA-56609: Usage not supported with DRCP</emphasis>".
    Esto es una restricción documentada de la base de datos Oracle 11g.
   </para>
  </note>
 </section>
</chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
