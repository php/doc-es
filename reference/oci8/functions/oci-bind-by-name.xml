<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 5e41012cfdf8f2eff5fa56de446c7656afac536c Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: yes -->
<refentry xml:id="function.oci-bind-by-name" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>oci_bind_by_name</refname>
  <refpurpose>Asocia una variable PHP a un marcador Oracle</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>bool</type><methodname>oci_bind_by_name</methodname>
   <methodparam><type>resource</type><parameter>statement</parameter></methodparam>
   <methodparam><type>string</type><parameter>param</parameter></methodparam>
   <methodparam><type>mixed</type><parameter role="reference">var</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>max_length</parameter><initializer>-1</initializer></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>type</parameter><initializer>0</initializer></methodparam>
  </methodsynopsis>
  <para>
   Vincula una variable PHP <parameter>var</parameter> al marcador Oracle
   <parameter>param</parameter>. El hecho de vincular una
   variable es importante en términos de rendimiento de la
   base de datos Oracle, pero también en términos de seguridad
   relativa a las inyecciones SQL.
  </para>

  <para>
   El vínculo permite a las bases de datos reutilizar el contexto
   de ejecución de la consulta así como el caché asociado,
   incluso cuando otro usuario o proceso la ejecuta. El vínculo reduce el riesgo de
   inyección SQL ya que los datos asociados a una variable vinculada nunca son tratados como
   parte de la consulta SQL. Por lo tanto, no es necesario añadir comillas
   ni escapar estos datos.
  </para>
  <para>
   Las variables PHP vinculadas pueden cambiarse y la consulta re-ejecutarse
   sin necesidad de analizar de nuevo la consulta o de vincular
   de nuevo las variables.
  </para>
  <para>
   Con Oracle, las variables vinculadas suelen dividirse
   en vínculo <literal>IN</literal> para los valores pasados a la base
   de datos, y en vínculo <literal>OUT</literal> para los valores
   a devolver a PHP. Una variable vinculada puede ser a la vez en vínculo
   <literal>IN</literal> y <literal>OUT</literal>. En este caso,
   el hecho de saber si la variable vinculada debe ser utilizada
   para la entrada o la salida será determinado en el momento de la ejecución.
  </para>
  <para>
   Debe especificarse el parámetro <parameter>max_length</parameter>
   al utilizar el vínculo <literal>OUT</literal> para que PHP asigne
   suficiente memoria para contener el valor de retorno.
  </para>
  <para>
   Para los vínculos <literal>IN</literal>, se recomienda
   definir el parámetro <parameter>max_length</parameter> si la
   consulta se ejecuta varias veces con valores diferentes
   para las variables PHP. De lo contrario, Oracle puede truncar los datos
   a la longitud del valor inicial de la variable PHP. Si no se conoce la
   longitud máxima necesaria, entonces llame de nuevo a la función
   <function>oci_bind_by_name</function> con los datos actuales, antes de cada llamada a la función
   <function>oci_execute</function>. El hecho de asociar una longitud
   superior a la necesaria tiene un impacto en la memoria
   asociada al proceso para la base de datos.
  </para>

  <para>
   Una llamada a la funcionalidad de asociación de variables
   proporciona a Oracle la dirección de memoria a utilizar para leer los datos.
   Para los vínculos <literal>IN</literal>, esta dirección debe contener
   datos válidos al llamar a la función
   <function>oci_execute</function>. Esto significa que la variable vinculada
   debe permanecer en el contexto hasta la ejecución. Si no es así, pueden producirse resultados
   no esperados, así como errores de tipo "ORA-01460: unimplemented or unreasonable conversion requested".
   Para los vínculos <literal>OUT</literal>, un síntoma puede ser
   que no se haya definido ningún valor en la variable PHP.
  </para>

  <para>
   Para una consulta que se ejecuta varias veces, los valores vinculados que nunca cambian pueden reducir la capacidad del optimizador
   de Oracle para elegir el mejor plan de ejecución. Para las consultas que tardan mucho tiempo, que rara vez se llaman varias veces, la asociación
   de variables no aporta ningún beneficio. Sin embargo, en los 2 casos,
   la asociación es más segura que colocar directamente las cadenas de caracteres en la consulta SQL, sabiendo que existe un riesgo
   de filtrado incorrecto de la entrada del usuario.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>statement</parameter></term>
     <listitem>
      <para>
       Un identificador de consulta OCI8 válido.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>param</parameter></term>
     <listitem>
      <para>
       El marcador, prefijado por una coma, utilizado en la consulta.
       La coma es opcional en el parámetro
       <parameter>param</parameter>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>var</parameter></term>
     <listitem>
      <para>
       La variable PHP a asociar con el marcador del parámetro
       <parameter>param</parameter>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>max_length</parameter></term>
     <listitem>
      <para>
       Especifica la longitud máxima para los datos. Si el valor es -1,
       la función utilizará la longitud actual de los datos del parámetro
       <parameter>var</parameter> para definir la longitud máxima.
       En este caso, el parámetro <parameter>var</parameter> debe existir
       y contener datos al llamar a la función
       <function>oci_bind_by_name</function>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>type</parameter></term>
     <listitem>
      <para>
       El tipo de datos a utilizar por Oracle para tratar
       los datos. Por omisión, vale <constant>SQLT_CHR</constant>.
       Oracle convertirá los datos entre este tipo y la columna
       de la base de datos (o las variables de tipo PL/SQL),
       cuando sea posible.
      </para>
      <para>
       Si debe vincular tipos abstractos de datos (LOB/ROWID/BFILE),
       deberá asignarlos en primer lugar, con
       <function>oci_new_descriptor</function>. La longitud
       <parameter>length</parameter> no sirve para estos tipos y
       debería fijarse a -1.
      </para>
      <para>
       Los valores posibles para el parámetro
       <parameter>type</parameter> son :
       <itemizedlist>
        <listitem>
         <para>
          <constant>SQLT_FILE</constant> o <constant>OCI_B_BFILE</constant>
          - para los BFILEs ;
         </para>
        </listitem>
        <listitem>
         <para>
          <constant>SQLT_CFILE</constant> o <constant>OCI_B_CFILEE</constant>
          - para los CFILEs ;
         </para>
        </listitem>
        <listitem>
         <para>
          <constant>SQLT_CLOB</constant> o <constant>OCI_B_CLOB</constant>
          - para los CLOBs ;
         </para>
        </listitem>
        <listitem>
         <para>
          <constant>SQLT_BLOB</constant> o <constant>OCI_B_BLOB</constant>
          - para los BLOBs ;
         </para>
        </listitem>
        <listitem>
         <para>
          <constant>SQLT_RDD</constant> o <constant>OCI_B_ROWID</constant>
          - para los ROWIDs ;
         </para>
        </listitem>
        <listitem>
         <para>
          <constant>SQLT_NTY</constant> o <constant>OCI_B_NTY</constant>
          - para los tipos de datos nombrados ;
         </para>
        </listitem>
        <listitem>
         <para>
          <constant>SQLT_INT</constant> o <constant>OCI_B_INT</constant>
          - para los enteros ;
         </para>
        </listitem>
        <listitem>
         <para>
          <constant>SQLT_CHR</constant> - para los VARCHAR ;
         </para>
        </listitem>
        <listitem>
         <para>
          <constant>SQLT_BIN</constant> o <constant>OCI_B_BIN</constant>
          - para las columnas RAW ;
         </para>
        </listitem>
        <listitem>
         <para>
          <constant>SQLT_LNG</constant> - para las columnas LONG ;
         </para>
        </listitem>
        <listitem>
         <para>
          <constant>SQLT_LBI</constant> - para las columnas LONG RAW ;
         </para>
        </listitem>
        <listitem>
         <para>
          <constant>SQLT_RSET</constant> - para los cursores creados
          con la función <function>oci_new_cursor</function>;
         </para>
        </listitem>
        <listitem>
         <para>
          <constant>SQLT_BOL</constant> o <constant>OCI_B_BOL</constant>
          - para los booleanos (requiere Oracle Database 12c)
         </para>
        </listitem>
       </itemizedlist>
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.success;
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Inserción de datos con la función <function>oci_bind_by_name</function></title>
    <programlisting role="php">
<![CDATA[
<?php

// Creación de la tabla con :
//   CREATE TABLE mytab (id NUMBER, text VARCHAR2(40));

$conn = oci_connect('hr', 'welcome', 'localhost/XE');
if (!$conn) {
    $m = oci_error();
    trigger_error(htmlentities($m['message']), E_USER_ERROR);
}

$stid = oci_parse($conn,"INSERT INTO mytab (id, text) VALUES(:id_bv, :text_bv)");

$id = 1;
$text = "Datos a insertar     ";
oci_bind_by_name($stid, ":id_bv", $id);
oci_bind_by_name($stid, ":text_bv", $text);
oci_execute($stid);

// La tabla contiene ahora : 1, 'Datos a insertar

?>
]]>
    </programlisting>
   </example>
  </para>

  <para>
   <example>
    <title>Una asociación con múltiples llamadas</title>
    <programlisting role="php">
<![CDATA[
<?php

// Creación de la tabla con :
//   CREATE TABLE mytab (id NUMBER);

$conn = oci_connect('hr', 'welcome', 'localhost/XE');
if (!$conn) {
    $m = oci_error();
    trigger_error(htmlentities($m['message']), E_USER_ERROR);
}

$a = array(1,3,5,7,11);  // Datos a insertar

$stid = oci_parse($conn, 'INSERT INTO mytab (id) VALUES (:bv)');
oci_bind_by_name($stid, ':bv', $v, 20);
foreach ($a as $v) {
    $r = oci_execute($stid, OCI_DEFAULT);  // No validar automáticamente
}
oci_commit($conn); // Una sola validación

// La tabla contiene ahora 5 líneas : 1, 3, 5, 7, 11

oci_free_statement($stid);
oci_close($conn);

?>
]]>
    </programlisting>
   </example>
  </para>

  <para>
   <example>
    <title>Asociación con un bucle <literal>foreach</literal></title>
    <programlisting role="php">
<![CDATA[
<?php

$conn = oci_connect('hr', 'welcome', 'localhost/XE');
if (!$conn) {
    $m = oci_error();
    trigger_error(htmlentities($m['message']), E_USER_ERROR);
}

$sql = 'SELECT * FROM departments WHERE department_name = :dname AND location_id = :loc';
$stid = oci_parse($conn, $sql);

$ba = array(':dname' => 'IT Support', ':loc' => 1700);

foreach ($ba as $key => $val) {

    // oci_bind_by_name($stid, $key, $val) no funciona porque
    // asocia cada marcador al mismo lugar : $val
    // en lugar de utilizar el lugar actual de la dato $ba[$key]
    oci_bind_by_name($stid, $key, $ba[$key]);
}

oci_execute($stid);
$row = oci_fetch_array($stid, OCI_ASSOC+OCI_RETURN_NULLS);
foreach ($row as $item) {
    print $item."<br>\n";
}

oci_free_statement($stid);
oci_close($conn);

?>
]]>
    </programlisting>
   </example>
  </para>

  <para>
   <example>
    <title>Asociación en una cláusula WHERE</title>
    <programlisting role="php">
<![CDATA[
<?php

$conn = oci_connect("hr", "hrpwd", "localhost/XE");
if (!$conn) {
    $m = oci_error();
    trigger_error(htmlentities($m['message']), E_USER_ERROR);
}

$sql = 'SELECT last_name FROM employees WHERE department_id = :didbv ORDER BY last_name';
$stid = oci_parse($conn, $sql);
$didbv = 60;
oci_bind_by_name($stid, ':didbv', $didbv);
oci_execute($stid);
while (($row = oci_fetch_array($stid, OCI_ASSOC)) != false) {
    echo $row['LAST_NAME'] ."<br>\n";
}

// Muestra :
//    Austin
//    Ernst
//    Hunold
//    Lorentz
//    Pataballa

oci_free_statement($stid);
oci_close($conn);

?>
]]>
    </programlisting>
   </example>
  </para>

  <para>
   <example>
    <title>Asociación con una cláusula LIKE</title>
    <programlisting role="php">
<![CDATA[
<?php

$conn = oci_connect('hr', 'welcome', 'localhost/XE');
if (!$conn) {
    $m = oci_error();
    trigger_error(htmlentities($m['message']), E_USER_ERROR);
}

// Encuentra todos los criterios que comienzan por 'South'
$stid = oci_parse($conn, "SELECT city FROM locations WHERE city LIKE :bv");
$city = 'South%';  // '%' es un comodín en SQL
oci_bind_by_name($stid, ":bv", $city);
oci_execute($stid);
oci_fetch_all($stid, $res);

foreach ($res['CITY'] as $c) {
    print $c . "<br>\n";
}
// Muestra :
//   South Brunswick
//   South San Francisco
//   Southlake

oci_free_statement($stid);
oci_close($conn);

?>
]]>
    </programlisting>
   </example>
  </para>

  <para>
   <example>
    <title>Asociación con REGEXP_LIKE</title>
    <programlisting role="php">
<![CDATA[
<?php

$conn = oci_connect('hr', 'welcome', 'localhost/XE');
if (!$conn) {
    $m = oci_error();
    trigger_error(htmlentities($m['message']), E_USER_ERROR);
}

// Encuentra todos los criterios que contienen 'ing'
$stid = oci_parse($conn, "SELECT city FROM locations WHERE REGEXP_LIKE(city, :bv)");
$city = '.*ing.*';
oci_bind_by_name($stid, ":bv", $city);
oci_execute($stid);
oci_fetch_all($stid, $res);

foreach ($res['CITY'] as $c) {
    print $c . "<br>\n";
}
// Muestra :
//   Beijing
//   Singapore

oci_free_statement($stid);
oci_close($conn);

?>
]]>
    </programlisting>
   </example>
  </para>

  <para>
   Para algunas condiciones utilizadas en las cláusulas IN, utilice
   variables vinculadas individuales. Los valores desconocidos en el momento
   de la ejecución podrán definirse a NULL.
   Esto permite utilizar una sola consulta para todos los usuarios
   de la aplicación, maximizando así la eficacia del caché Oracle DB.
  </para>

  <para>
   <example>
    <title>Asociación de múltiples valores en una cláusula IN</title>
    <programlisting role="php">
<![CDATA[
<?php

$conn = oci_connect('hr', 'welcome', 'localhost/XE');
if (!$conn) {
    $m = oci_error();
    trigger_error(htmlentities($m['message']), E_USER_ERROR);
}

$sql = 'SELECT last_name FROM employees WHERE employee_id in (:e1, :e2, :e3)';
$stid = oci_parse($conn, $sql);
$mye1 = 103;
$mye2 = 104;
$mye3 = NULL; // fingimos que no nos fue dado este valor
oci_bind_by_name($stid, ':e1', $mye1);
oci_bind_by_name($stid, ':e2', $mye2);
oci_bind_by_name($stid, ':e3', $mye3);
oci_execute($stid);
oci_fetch_all($stid, $res);
foreach ($res['LAST_NAME'] as $name) {
    print $name ."<br>\n";
}

// Muestra :
//   Ernst
//   Hunold

oci_free_statement($stid);
oci_close($conn);

?>
]]>
    </programlisting>
   </example>
  </para>

  <para>
   <example>
    <title>Asociación de un ROWID devuelto por una consulta</title>
    <programlisting role="php">
<![CDATA[
<?php

// Creación de la tabla con :
//   CREATE TABLE mytab (id NUMBER, salary NUMBER, name VARCHAR2(40));
//   INSERT INTO mytab (id, salary, name) VALUES (1, 100, 'Chris');
//   COMMIT;

$conn = oci_connect('hr', 'welcome', 'localhost/XE');
if (!$conn) {
    $m = oci_error();
    trigger_error(htmlentities($m['message']), E_USER_ERROR);
}

$stid = oci_parse($conn, 'SELECT ROWID, name FROM mytab WHERE id = :id_bv FOR UPDATE');
$id = 1;
oci_bind_by_name($stid, ':id_bv', $id);
oci_execute($stid);
$row = oci_fetch_array($stid, OCI_ASSOC+OCI_RETURN_NULLS);
$rid = $row['ROWID'];
$name = $row['NAME'];

// Modificación del nombre en letra mayúscula & guardado de esta modificación
$name = strtoupper($name);
$stid = oci_parse($conn, 'UPDATE mytab SET name = :n_bv WHERE ROWID = :r_bv');
oci_bind_by_name($stid, ':n_bv', $name);
oci_bind_by_name($stid, ':r_bv', $rid, -1, OCI_B_ROWID);
oci_execute($stid);

// La tabla contiene ahora 1, 100, CHRIS

oci_free_statement($stid);
oci_close($conn);

?>
]]>
    </programlisting>
   </example>
  </para>

  <para>
   <example>
    <title>Asociación de un ROWID en un INSERT</title>
    <programlisting role="php">
<![CDATA[
<?php

// Este ejemplo inserta un id & un nombre, luego, actualiza el salario
// Creación de la tabla con :
//   CREATE TABLE mytab (id NUMBER, salary NUMBER, name VARCHAR2(40));
//
// Basado en el ejemplo original de ROWID, proporcionado por thies at thieso dot net (980221)

$conn = oci_connect('hr', 'welcome', 'localhost/XE');
if (!$conn) {
    $m = oci_error();
    trigger_error(htmlentities($m['message']), E_USER_ERROR);
}

$sql = "INSERT INTO mytab (id, name) VALUES(:id_bv, :name_bv)
        RETURNING ROWID INTO :rid";

$ins_stid = oci_parse($conn, $sql);

$rowid = oci_new_descriptor($conn, OCI_D_ROWID);
oci_bind_by_name($ins_stid, ":id_bv",   $id,    10);
oci_bind_by_name($ins_stid, ":name_bv", $name,  32);
oci_bind_by_name($ins_stid, ":rid",     $rowid, -1, OCI_B_ROWID);

$sql = "UPDATE mytab SET salary = :salary WHERE ROWID = :rid";
$upd_stid = oci_parse($conn, $sql);
oci_bind_by_name($upd_stid, ":rid", $rowid, -1, OCI_B_ROWID);
oci_bind_by_name($upd_stid, ":salary", $salary,   32);

// ids y nombres a insertar
$data = array(1111 => "Larry",
              2222 => "Bill",
              3333 => "Jim");

// Salario de cada persona
$salary = 10000;

// Inserción y actualización inmediata de cada línea
foreach ($data as $id => $name) {
    oci_execute($ins_stid);
    oci_execute($upd_stid);
}

$rowid->free();
oci_free_statement($upd_stid);
oci_free_statement($ins_stid);

// Visualización de las nuevas líneas
$stid = oci_parse($conn, "SELECT * FROM mytab");
oci_execute($stid);
while ($row = oci_fetch_array($stid, OCI_ASSOC+OCI_RETURN_NULLS)) {
    var_dump($row);
}

oci_free_statement($stid);
oci_close($conn);

?>
]]>
    </programlisting>
   </example>
  </para>

  <para>
   <example>
    <title>Asociación para una función almacenada PL/SQL</title>
    <programlisting role="php">
<![CDATA[
<?php

// Antes de ejecutar el programa PHP, una función almacenada debe ser creada
// en formato SQL*Plus o SQL Developer :
//
//  CREATE OR REPLACE FUNCTION myfunc(p IN NUMBER) RETURN NUMBER AS
//  BEGIN
//      RETURN p * 3;
//  END;

$conn = oci_connect('hr', 'welcome', 'localhost/XE');
if (!$conn) {
    $e = oci_error();
    trigger_error(htmlentities($e['message']), E_USER_ERROR);
}

$p = 8;

$stid = oci_parse($conn, 'begin :r := myfunc(:p); end;');
oci_bind_by_name($stid, ':p', $p);

// El valor devuelto es un vínculo OUT. El tipo por omisión deberá ser
// de tipo string, también, la asociación sobre una longitud de 40 significa
// que la cadena devuelta tendrá como máximo 40 caracteres.
oci_bind_by_name($stid, ':r', $r, 40);

oci_execute($stid);

print "$r\n";   // Muestra 24

oci_free_statement($stid);
oci_close($conn);

?>
]]>
    </programlisting>
   </example>
  </para>

  <para>
  <example>
   <title>Asociación de parámetros a un procedimiento almacenado PL/SQL</title>
    <programlisting role="php">
<![CDATA[
<?php

// Antes de ejecutar el programa PHP, un procedimiento almacenado debe ser creado
// en formato SQL*Plus o SQL Developer :
//
//  CREATE OR REPLACE PROCEDURE myproc(p1 IN NUMBER, p2 OUT NUMBER) AS
//  BEGIN
//      p2 := p1 * 2;
//  END;

$conn = oci_connect('hr', 'welcome', 'localhost/XE');
if (!$conn) {
    $e = oci_error();
    trigger_error(htmlentities($e['message']), E_USER_ERROR);
}

$p1 = 8;

$stid = oci_parse($conn, 'begin myproc(:p1, :p2); end;');
oci_bind_by_name($stid, ':p1', $p1);

// El segundo parámetro del procedimiento almacenado es un vínculo OUT.
// El tipo por omisión deberá ser de tipo string, también,
// la asociación sobre una longitud de 40 significa
// que la cadena devuelta tendrá como máximo 40 caracteres.

oci_bind_by_name($stid, ':p2', $p2, 40);

oci_execute($stid);

print "$p2\n";   // Muestra 16

oci_free_statement($stid);
oci_close($conn);

?>
]]>
    </programlisting>
   </example>
  </para>

  <para>
  <example>
   <title>Asociación sobre una columna CLOB</title>
    <programlisting role="php">
<![CDATA[
<?php

// Antes de la ejecución, es necesario crear la tabla :
//     CREATE TABLE mytab (mykey NUMBER, myclob CLOB);

$conn = oci_connect('hr', 'welcome', 'localhost/XE');
if (!$conn) {
    $e = oci_error();
    trigger_error(htmlentities($e['message']), E_USER_ERROR);
}

$mykey = 12343;  // Clave arbitraria para el ejemplo ;

$sql = "INSERT INTO mytab (mykey, myclob)
        VALUES (:mykey, EMPTY_CLOB())
        RETURNING myclob INTO :myclob";

$stid = oci_parse($conn, $sql);
$clob = oci_new_descriptor($conn, OCI_D_LOB);
oci_bind_by_name($stid, ":mykey", $mykey, 5);
oci_bind_by_name($stid, ":myclob", $clob, -1, OCI_B_CLOB);
oci_execute($stid, OCI_DEFAULT);
$clob->save("A very long string");

oci_commit($conn);

// Recuperación de los datos CLOB

$query = 'SELECT myclob FROM mytab WHERE mykey = :mykey';

$stid = oci_parse ($conn, $query);
oci_bind_by_name($stid, ":mykey", $mykey, 5);
oci_execute($stid);

print '<table border="1">';
while ($row = oci_fetch_array($stid, OCI_ASSOC+OCI_RETURN_LOBS)) {
    print '<tr><td>'.$row['MYCLOB'].'</td></tr>';
    // En un bucle, el hecho de liberar la variable antes de la recuperación de
    // la línea siguiente reduce el uso de memoria de PHP
    unset($row);
}
print '</table>';

?>
]]>
   </programlisting>
  </example>
  </para>
  <para>
  <example>
   <title>Asociación sobre un booleano en un script PL/SQL</title>
    <programlisting role="php">
<![CDATA[
<?php

$conn = oci_connect('hr', 'welcome', 'localhost/XE');
if (!$conn) {
    $e = oci_error();
    trigger_error(htmlentities($e['message']), E_USER_ERROR);
}

$plsql =
  "begin
    :output1 := true;
    :output2 := false;
   end;";

$s = oci_parse($c, $plsql);
oci_bind_by_name($s, ':output1', $output1, -1, OCI_B_BOL);
oci_bind_by_name($s, ':output2', $output2, -1, OCI_B_BOL);
oci_execute($s);
var_dump($output1);  // true
var_dump($output2);  // false

?>
]]>
   </programlisting>
  </example>
  </para>

 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <warning>
   <para>
    No utilice la función <function>addslashes</function> y
    <function>oci_bind_by_name</function> simultáneamente, ya que no es necesario añadir
    comillas. Si es así, entonces las comillas añadidas
    serán escritas en la base de datos ; de hecho, la función
    <function>oci_bind_by_name</function> inserta los datos sin procesar
    y no elimina ni las comillas añadidas, ni los caracteres de escape.
   </para>
  </warning>
  <note>
   <para>
    Si asocia una cadena de caracteres a una columna
    de tipo <literal>CHAR</literal> en una cláusula
    <literal>WHERE</literal>, recuerde que Oracle utiliza una comparación
    añadiendo caracteres vacíos para las columnas de tipo
    <literal>CHAR</literal>. Por lo tanto, su variable PHP debe ser
    completada con caracteres vacíos para alcanzar la misma longitud
    que la columna para que la cláusula <literal>WHERE</literal> funcione.
   </para>
  </note>
  <note>
   <para>
    El argumento PHP <parameter>var</parameter> es una referencia.
    Por lo tanto, algunos formatos de bucle pueden no funcionar como se espera :
   </para>
   <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
foreach ($myarray as $key => $value)  {
    oci_bind_by_name($stid, $key, $value);
}
?>
]]>
     </programlisting>
   </informalexample>
   <para>
    Esto asocia cada clave al valor apuntado por $value,
    por lo tanto, todas las variables asociadas apuntan hacia el
    valor de la última iteración del bucle.
    En su lugar, utilice esto :
   </para>
   <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
foreach ($myarray as $key => $value) {
    oci_bind_by_name($stid, $key, $myarray[$key]);
}
?>
]]>
     </programlisting>
   </informalexample>
  </note>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>oci_bind_array_by_name</function></member>
    <member><function>oci_parse</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
