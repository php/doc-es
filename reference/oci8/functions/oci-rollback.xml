<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 5e41012cfdf8f2eff5fa56de446c7656afac536c Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: yes -->
<refentry xml:id="function.oci-rollback" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>oci_rollback</refname>
  <refpurpose>Anula las transacciones Oracle en curso</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>bool</type><methodname>oci_rollback</methodname>
   <methodparam><type>resource</type><parameter>connection</parameter></methodparam>
  </methodsynopsis>
  <para>
   Anula todas las modificaciones no confirmadas para una
   conexión <parameter>connection</parameter> Oracle
   y finaliza la transacción actual. Todos los bloqueos serán
   liberados asimismo. Todos los puntos de guardado Oracle
   (<literal>SAVEPOINTS</literal>) serán eliminados.
  </para>
  <para>
   Una transacción comienza cuando la primera consulta SQL
   que modifica datos es ejecutada con la función
   <function>oci_execute</function> utilizando el flag
   <constant>OCI_NO_AUTO_COMMIT</constant>. Las modificaciones siguientes
   realizadas por otras consultas se convierten en parte de la
   misma transacción. Las modificaciones realizadas durante una transacción son
   temporales hasta que la transacción sea confirmada o anulada.
   Los demás usuarios de la base de datos no verán estas modificaciones
   hasta la confirmación de la transacción.
  </para>
  <para>
   Al insertar o actualizar datos, el uso de transacciones es
   altamente recomendado para garantizar la consistencia
   relacional de los datos, pero también por razones de rendimiento.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>connection</parameter></term>
     <listitem>
      <para>
       Un identificador de conexión Oracle, devuelto por la función
       <function>oci_connect</function>, <function>oci_pconnect</function>
       o <function>oci_new_connect</function>.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.success;
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Ejemplo con <function>oci_rollback</function></title>
    <programlisting role="php">
<![CDATA[
<?php

// Inserción en múltiples tablas, luego, anulación de las modificaciones si ocurren errores

$conn = oci_connect('hr', 'welcome', 'localhost/XE');

$stid = oci_parse($conn, "INSERT INTO mysalary (id, name) VALUES (1, 'Chris')");

// El flag OCI_NO_AUTO_COMMIT indica a Oracle no confirmar la inserción inmediatamente.
$r = oci_execute($stid, OCI_NO_AUTO_COMMIT);
if (!$r) {
    $e = oci_error($stid);
    trigger_error(htmlentities($e['message']), E_USER_ERROR);
}

$stid = oci_parse($conn, 'INSERT INTO myschedule (startday) VALUES (12)');
$r = oci_execute($stid, OCI_NO_AUTO_COMMIT);
if (!$r) {
    $e = oci_error($stid);
    oci_rollback($conn);  // Anulación de las modificaciones en las 2 tablas
    trigger_error(htmlentities($e['message']), E_USER_ERROR);
}

// Confirmación de las modificaciones en las 2 tablas
$r = oci_commit($conn);
if (!$r) {
    $e = oci_error($conn);
    trigger_error(htmlentities($e['message']), E_USER_ERROR);
}

?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title>Ejemplo de retorno a un punto de guardado (<literal>SAVEPOINT</literal>)</title>
    <programlisting role="php">
<![CDATA[
<?php
$stid = oci_parse($conn, 'UPDATE mytab SET id = 1111');
oci_execute($stid, OCI_NO_AUTO_COMMIT);

// creación del punto de guardado
$stid = oci_parse($conn, 'SAVEPOINT mysavepoint');
oci_execute($stid, OCI_NO_AUTO_COMMIT);

$stid = oci_parse($conn, 'UPDATE mytab SET id = 2222');
oci_execute($stid, OCI_NO_AUTO_COMMIT);

// utiliza una consulta SQL explícita para realizar el retorno al punto de guardado
$stid = oci_parse($conn, 'ROLLBACK TO SAVEPOINT mysavepoint');
oci_execute($stid, OCI_NO_AUTO_COMMIT);

oci_commit($conn);  // mytab tiene ahora un id de 1111
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <note>
   <para>
    Las transacciones son anuladas automáticamente al cerrar
    la conexión, o cuando el script finaliza, cualquiera de los dos que ocurra primero.
    Debe llamarse explícitamente a la función <function>oci_commit</function>
    para confirmar la conexión.
   </para>
   <para>
    Todas las llamadas a la función <function>oci_execute</function> que utilizan
    el modo <constant>OCI_COMMIT_ON_SUCCESS</constant>, ya sea por defecto o
    de forma explícita, confirmarán todas las transacciones pendientes.
   </para>
   <para>
    Todas las consultas Oracle como <literal>CREATE</literal>
    o <literal>DROP</literal> confirmarán asimismo,
    automáticamente, todas las transacciones pendientes.
   </para>
  </note>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>oci_commit</function></member>
    <member><function>oci_execute</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
