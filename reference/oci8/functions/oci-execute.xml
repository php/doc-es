<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 5e41012cfdf8f2eff5fa56de446c7656afac536c Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: yes Maintainer: mikaelkael -->
<refentry xml:id="function.oci-execute" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>oci_execute</refname>
  <refpurpose>Ejecuta un comando SQL de Oracle</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>bool</type><methodname>oci_execute</methodname>
   <methodparam><type>resource</type><parameter>statement</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>mode</parameter><initializer><constant>OCI_COMMIT_ON_SUCCESS</constant></initializer></methodparam>
  </methodsynopsis>
  <para>
   Ejecuta una consulta <parameter>statement</parameter> previamente
   devuelta por la función <function>oci_parse</function>.
  </para>
  <para>
   Tras la ejecución, las consultas como <literal>INSERT</literal>
   tendrán por omisión los datos validados (cometidos) en la base de datos.
   Para consultas como <literal>SELECT</literal>, la ejecución
   realiza la lógica de la consulta. Los resultados de la consulta
   pueden ser recuperados por PHP con funciones como
   <function>oci_fetch_array</function>.
  </para>
  <para>
   Cada consulta analizada puede ser ejecutada varias veces, por lo que
   no es necesario analizarlas de nuevo. Esto es práctico para consultas
   de tipo <literal>INSERT</literal> cuando los datos están vinculados
   mediante la función <function>oci_bind_by_name</function>.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>statement</parameter></term>
     <listitem>
      <para>
       Un identificador de consulta OCI válido.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>mode</parameter></term>
     <listitem>
      <para>
       Un segundo argumento opcional puede tomar una de las constantes siguientes:
       <table>
        <title>Modos de ejecución</title>
        <tgroup cols="2">
         <thead>
          <row>
           <entry>Constante</entry>
           <entry>Descripción</entry>
          </row>
         </thead>
         <tbody>
          <row>
           <entry><constant>OCI_COMMIT_ON_SUCCESS</constant></entry>
           <entry>Validación automática en la conexión cuando la consulta
            ha sido ejecutada con éxito. Este es el comportamiento por omisión.</entry>
          </row>
          <row>
           <entry><constant>OCI_DESCRIBE_ONLY</constant></entry>
           <entry>Hace disponibles los metadatos de la consulta a funciones
            como <function>oci_field_name</function> pero no crea un conjunto de resultados. Cualquier llamada a funciones de recuperación como
            <function>oci_fetch_array</function> fallará.</entry>
          </row>
          <row>
           <entry><constant>OCI_NO_AUTO_COMMIT</constant></entry>
           <entry>No valida automáticamente las modificaciones.</entry>
          </row>
         </tbody>
        </tgroup>
       </table>
      </para>
      <para>
       El uso del modo <constant>OCI_NO_AUTO_COMMIT</constant> inicia
       o continúa una transacción. Las transacciones son automáticamente anuladas
       cuando la conexión se cierra o cuando el script termina.
       Llame explícitamente a la función <function>oci_commit</function> para
       validar la transacción o a la función <function>oci_rollback</function>
       para anularla.
      </para>
      <para>
       Al insertar o actualizar datos, el uso de transacciones es altamente recomendado
       para garantizar la consistencia relacional de los datos, así como por un
       significativo aumento de rendimiento.
      </para>
      <para>
       Si el modo <constant>OCI_NO_AUTO_COMMIT</constant> es utilizado para
       todas las operaciones incluyendo consultas, y las funciones
       <function>oci_commit</function> y <function>oci_rollback</function>
       nunca son llamadas, OCI8 realizará una anulación al final del
       script incluso si los datos han cambiado. Para evitar este comportamiento,
       la mayoría de los scripts no utiliza el modo
       <constant>OCI_NO_AUTO_COMMIT</constant> para consultas o
       procedimientos almacenados PL/SQL. Asegúrese de la consistencia
       transaccional apropiada de sus aplicaciones al utilizar
       la función <function>oci_execute</function> con diferentes modos en
       el mismo script.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.success;
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Ejemplo con <function>oci_execute</function> para consultas</title>
    <programlisting role="php">
<![CDATA[
<?php

$conn = oci_connect('hr', 'welcome', 'localhost/XE');

$stid = oci_parse($conn, 'SELECT * FROM employees');
oci_execute($stid);

echo "<table border='1'>\n";
while ($row = oci_fetch_array($stid, OCI_ASSOC+OCI_RETURN_NULLS)) {
    echo "<tr>\n";
    foreach ($row as $item) {
        echo "    <td>" . ($item !== null ? htmlentities($item, ENT_QUOTES) : "") . "</td>\n";
    }
    echo "</tr>\n";
}
echo "</table>\n";

?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title>Ejemplo con <function>oci_execute</function> sin especificar modo</title>
    <programlisting role="php">
<![CDATA[
<?php

// Antes de la ejecución, cree la tabla:
//   CREATE TABLE MYTABLE (col1 NUMBER);

$conn = oci_connect('hr', 'welcome', 'localhost/XE');

$stid = oci_parse($conn, 'INSERT INTO mytab (col1) VALUES (123)');

oci_execute($stid); // La fila es validada y es inmediatamente visible por otros usuarios

?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title>Ejemplo con <function>oci_execute</function> y <constant>OCI_NO_AUTO_COMMIT</constant></title>
    <programlisting role="php">
<![CDATA[
<?php

// Antes de la ejecución, cree la tabla:
//   CREATE TABLE MYTABLE (col1 NUMBER);

$conn = oci_connect('hr', 'welcome', 'localhost/XE');

$stid = oci_parse($conn, 'INSERT INTO mytab (col1) VALUES (:bv)');
oci_bind_by_name($stid, ':bv', $i, 10);
for ($i = 1; $i <= 5; ++$i) {
    oci_execute($stid, OCI_NO_AUTO_COMMIT);
}
oci_commit($conn);  // valida todos los nuevos valores: 1, 2, 3, 4, 5

?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title>Ejemplo con <function>oci_execute</function> y diferentes modos en el mismo script</title>
    <programlisting role="php">
<![CDATA[
<?php

// Antes de la ejecución, cree la tabla:
//   CREATE TABLE MYTABLE (col1 NUMBER);

$conn = oci_connect('hr', 'welcome', 'localhost/XE');

$stid = oci_parse($conn, 'INSERT INTO mytab (col1) VALUES (123)');
oci_execute($stid, OCI_NO_AUTO_COMMIT);  // datos no cometidos

$stid = oci_parse($conn, 'INSERT INTO mytab (col1) VALUES (456)');
oci_execute($stid);  // valida tanto los valores 123 como 456

?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title>Ejemplo con <function>oci_execute</function> y
     <constant>OCI_DESCRIBE_ONLY</constant></title>
    <programlisting role="php">
<![CDATA[
<?php

$conn = oci_connect('hr', 'welcome', 'localhost/XE');

$stid = oci_parse($conn, 'SELECT * FROM locations');
oci_execute($s, OCI_DESCRIBE_ONLY);
for ($i = 1; $i <= oci_num_fields($stid); ++$i) {
    echo oci_field_name($stid, $i) . "<br>\n";
}

?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <note>
   <para>
    Las transacciones son automáticamente anuladas cuando las conexiones
    se cierran, o cuando el script termina, según lo que ocurra primero.
    Llame explícitamente a la función <function>oci_commit</function> para validar
    una transacción.
   </para>
   <para>
    Cualquier llamada a la función <function>oci_execute</function> que utilice el modo
    <constant>OCI_COMMIT_ON_SUCCESS</constant> explícita o implícitamente
    validará todas las transacciones en curso.
   </para>
   <para>
    Todas las consultas Oracle DDL como <literal>CREATE</literal>
    o <literal>DROP</literal> validarán todas las transacciones en curso.
   </para>
  </note>
  <note>
   <para>
    Debido a que la función <function>oci_execute</function> generalmente envía
    la consulta a la base de datos, la función
    <function>oci_execute</function> puede identificar errores de sintaxis
    de la consulta que la función <function>oci_parse</function> pudo no detectar.
   </para>
  </note>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>oci_parse</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
