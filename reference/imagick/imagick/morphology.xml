<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 1ef9c7a76700b3e72844050d75e6ed1b870f9ca7 Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: yes -->
<refentry xml:id="imagick.morphology" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>Imagick::morphology</refname>
  <refpurpose>Aplica un núcleo personalizado a la imagen según el método de morfología dado</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <type>bool</type><methodname>Imagick::morphology</methodname>
   <methodparam><type>int</type><parameter>morphologyMethod</parameter></methodparam>
   <methodparam><type>int</type><parameter>iterations</parameter></methodparam>
   <methodparam><type>ImagickKernel</type><parameter>ImagickKernel</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>channel</parameter><initializer>Imagick::CHANNEL_DEFAULT</initializer></methodparam>
  </methodsynopsis>
  <para>
   Aplica un núcleo personalizado a la imagen según el método de morfología dado.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <variablelist>
   <varlistentry>
    <term><parameter>morphologyMethod</parameter></term>
    <listitem>
     <para>
      Qué método de morfología utilizar entre las constantes \Imagick::MORPHOLOGY_*.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>iterations</parameter></term>
    <listitem>
     <para>
      El número de iteraciones a aplicar a la función de morfología. Un valor de -1 significa iterar hasta que no se encuentren más cambios. Cómo se aplica esto puede depender del método de morfología. Típicamente, se trata de un valor de 1.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>ImagickKernel</parameter></term>
    <listitem>
     <para>
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>channel</parameter></term>
    <listitem>
     <para>
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &imagick.return.success;
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
    <example>
      <title>Convolución <function>Imagick::morphology</function></title>
      <programlisting role="php">
      <![CDATA[
<?php
        $imagick = $this->getCharacter();
        $kernel = \ImagickKernel::fromBuiltIn(\Imagick::KERNEL_GAUSSIAN, "5,1");
        $imagick->morphology(\Imagick::MORPHOLOGY_CONVOLVE, 2, $kernel);
        header("Content-Type: image/png");
        echo $imagick->getImageBlob();
?>
]]>
      </programlisting>
    </example>

    <example>
      <title>Correlación <function>Imagick::morphology</function></title>
      <programlisting role="php">
      <![CDATA[
<?php
        // El píxel en la esquina superior izquierda debe ser negro
        // El píxel en la esquina inferior derecha debe ser blanco
        // El resto no importa.

        $imagick = $this->getCharacterOutline();
        $kernel = \ImagickKernel::fromMatrix(self::$correlateMatrix, [2, 2]);
        $imagick->morphology(\Imagick::MORPHOLOGY_CORRELATE, 1, $kernel);
        header("Content-Type: image/png");
        echo $imagick->getImageBlob();
?>
]]>
      </programlisting>
    </example>

    <example>
      <title>Erosión <function>Imagick::morphology</function></title>
      <programlisting role="php">
      <![CDATA[
<?php
        $canvas = $this->getCharacterOutline();
        $kernel = \ImagickKernel::fromBuiltIn(\Imagick::KERNEL_OCTAGON, "3");
        $canvas->morphology(\Imagick::MORPHOLOGY_ERODE, 2, $kernel);
        header("Content-Type: image/png");
        echo $canvas->getImageBlob();
?>
]]>
      </programlisting>
    </example>

    <example>
      <title>Erosión de intensidad <function>Imagick::morphology</function></title>
      <programlisting role="php">
      <![CDATA[
<?php
        $canvas = $this->getCharacter();
        $kernel = \ImagickKernel::fromBuiltIn(\Imagick::KERNEL_OCTAGON, "1");
        $canvas->morphology(\Imagick::MORPHOLOGY_ERODE_INTENSITY, 2, $kernel);
        header("Content-Type: image/png");
        echo $canvas->getImageBlob();
?>
]]>
      </programlisting>
    </example>

    <example>
      <title>Dilatación <function>Imagick::morphology</function></title>
      <programlisting role="php">
      <![CDATA[
<?php
        $canvas = $this->getCharacterOutline();
        $kernel = \ImagickKernel::fromBuiltIn(\Imagick::KERNEL_OCTAGON, "3");
        $canvas->morphology(\Imagick::MORPHOLOGY_DILATE, 4, $kernel);
        header("Content-Type: image/png");
        echo $canvas->getImageBlob();
?>
]]>
      </programlisting>
    </example>

    <example>
      <title>Dilatación de intensidad <function>Imagick::morphology</function></title>
      <programlisting role="php">
      <![CDATA[
<?php
        $canvas = $this->getCharacter();
        $kernel = \ImagickKernel::fromBuiltIn(\Imagick::KERNEL_OCTAGON, "1");
        $canvas->morphology(\Imagick::MORPHOLOGY_DILATE_INTENSITY, 4, $kernel);
        header("Content-Type: image/png");
        echo $canvas->getImageBlob();
?>
]]>
      </programlisting>
    </example>

    <example>
      <title>Distancia con núcleo de Chebyshev <function>Imagick::morphology</function></title>
      <programlisting role="php">
      <![CDATA[
<?php
        $canvas = $this->getCharacterOutline();
        $kernel = \ImagickKernel::fromBuiltIn(\Imagick::KERNEL_CHEBYSHEV, "3");
        $canvas->morphology(\Imagick::MORPHOLOGY_DISTANCE, 3, $kernel);
        $canvas->autoLevelImage();
        header("Content-Type: image/png");
        echo $canvas->getImageBlob();
?>
]]>
      </programlisting>
    </example>

    <example>
      <title>Distancia con núcleo de Manhattan <function>Imagick::morphology</function></title>
      <programlisting role="php">
      <![CDATA[
<?php
        $canvas = $this->getCharacterOutline();
        $kernel = \ImagickKernel::fromBuiltIn(\Imagick::KERNEL_MANHATTAN, "5");
        $canvas->morphology(\Imagick::MORPHOLOGY_DISTANCE, 3, $kernel);
        $canvas->autoLevelImage();
        header("Content-Type: image/png");
        echo $canvas->getImageBlob();
?>
]]>
      </programlisting>
    </example>

    <example>
      <title>Distancia con núcleo octagonal <function>Imagick::morphology</function></title>
      <programlisting role="php">
      <![CDATA[
<?php
        $canvas = $this->getCharacterOutline();
        $kernel = \ImagickKernel::fromBuiltIn(\Imagick::KERNEL_OCTAGONAL, "5");
        $canvas->morphology(\Imagick::MORPHOLOGY_DISTANCE, 3, $kernel);
        $canvas->autoLevelImage();
        header("Content-Type: image/png");
        echo $canvas->getImageBlob();
?>
]]>
      </programlisting>
    </example>

    <example>
      <title>Distancia con núcleo euclidiano <function>Imagick::morphology</function></title>
      <programlisting role="php">
      <![CDATA[
<?php
        $canvas = $this->getCharacterOutline();
        $kernel = \ImagickKernel::fromBuiltIn(\Imagick::KERNEL_EUCLIDEAN, "4");
        $canvas->morphology(\Imagick::MORPHOLOGY_DISTANCE, 3, $kernel);
        $canvas->autoLevelImage();
        header("Content-Type: image/png");
        echo $canvas->getImageBlob();
?>
]]>
      </programlisting>
    </example>

    <example>
      <title>Borde <function>Imagick::morphology</function></title>
      <programlisting role="php">
      <![CDATA[
<?php
        $canvas = $this->getCharacterOutline();
        $kernel = \ImagickKernel::fromBuiltIn(\Imagick::KERNEL_OCTAGON, "3");
        $canvas->morphology(\Imagick::MORPHOLOGY_EDGE, 1, $kernel);
        header("Content-Type: image/png");
        echo $canvas->getImageBlob();
?>
]]>
      </programlisting>
    </example>

    <example>
      <title>Apertura <function>Imagick::morphology</function></title>
      <programlisting role="php">
      <![CDATA[
<?php
        // Como consecuencia, se verá que 'Apertura' ha suavizado el contorno, redondeando los puntos salientes y eliminando las partes más pequeñas que la forma utilizada. También desconectará o 'abrirá' los puentes delgados.
        $canvas = $this->getCharacterOutline();
        $kernel = \ImagickKernel::fromBuiltIn(\Imagick::KERNEL_DISK, "6");
        $canvas->morphology(\Imagick::MORPHOLOGY_OPEN, 1, $kernel);
        header("Content-Type: image/png");
        echo $canvas->getImageBlob();
?>
]]>
      </programlisting>
    </example>

    <example>
      <title>Apertura de intensidad <function>Imagick::morphology</function></title>
      <programlisting role="php">
      <![CDATA[
<?php
        // Como consecuencia, se verá que 'Apertura' ha suavizado el contorno, redondeando los puntos salientes y eliminando las partes más pequeñas que la forma utilizada. También desconectará o 'abrirá' los puentes delgados.
        $canvas = $this->getCharacter();
        $kernel = \ImagickKernel::fromBuiltIn(\Imagick::KERNEL_DISK, "6");
        $canvas->morphology(\Imagick::MORPHOLOGY_OPEN_INTENSITY, 1, $kernel);
        header("Content-Type: image/png");
        echo $canvas->getImageBlob();
?>
]]>
      </programlisting>
    </example>

    <example>
      <title>Cierre <function>Imagick::morphology</function></title>
      <programlisting role="php">
      <![CDATA[
<?php
        //El uso básico del método 'Cierre' es reducir o eliminar los 'huecos' o 'lagunas' aproximadamente del tamaño del elemento de estructura del núcleo. Es decir, 'cerrar' las partes del fondo que son aproximadamente de ese tamaño.
        $canvas = $this->getCharacterOutline();
        $kernel = \ImagickKernel::fromBuiltIn(\Imagick::KERNEL_DISK, "6");
        $canvas->morphology(\Imagick::MORPHOLOGY_CLOSE, 1, $kernel);
        header("Content-Type: image/png");
        echo $canvas->getImageBlob();
?>
]]>
      </programlisting>
    </example>

    <example>
      <title>Cierre de intensidad <function>Imagick::morphology</function></title>
      <programlisting role="php">
      <![CDATA[
<?php
        //El uso básico del método 'Cierre' es reducir o eliminar los 'huecos' o 'lagunas' aproximadamente del tamaño del elemento de estructura del núcleo. Es decir, 'cerrar' las partes del fondo que son aproximadamente de ese tamaño.
        $canvas = $this->getCharacter();
        $kernel = \ImagickKernel::fromBuiltIn(\Imagick::KERNEL_DISK, "6");
        $canvas->morphology(\Imagick::MORPHOLOGY_CLOSE_INTENSITY, 1, $kernel);
        header("Content-Type: image/png");
        echo $canvas->getImageBlob();
?>
]]>
      </programlisting>
    </example>

    <example>
      <title>Suavizado <function>Imagick::morphology</function></title>
      <programlisting role="php">
      <![CDATA[
<?php
        $canvas = $this->getCharacterOutline();
        $kernel = \ImagickKernel::fromBuiltIn(\Imagick::KERNEL_OCTAGON, "3");
        $canvas->morphology(\Imagick::MORPHOLOGY_SMOOTH, 1, $kernel);
        header("Content-Type: image/png");
        echo $canvas->getImageBlob();
?>
]]>
      </programlisting>
    </example>

    <example>
      <title>Borde interior <function>Imagick::morphology</function></title>
      <programlisting role="php">
      <![CDATA[
<?php
        $canvas = $this->getCharacterOutline();
        $kernel = \ImagickKernel::fromBuiltIn(\Imagick::KERNEL_OCTAGON, "3");
        $canvas->morphology(\Imagick::MORPHOLOGY_EDGE_IN, 1, $kernel);
        header("Content-Type: image/png");
        echo $canvas->getImageBlob();
?>
]]>
      </programlisting>
    </example>

    <example>
      <title>Borde exterior <function>Imagick::morphology</function></title>
      <programlisting role="php">
      <![CDATA[
<?php
        $canvas = $this->getCharacterOutline();
        $kernel = \ImagickKernel::fromBuiltIn(\Imagick::KERNEL_OCTAGON, "3");
        $canvas->morphology(\Imagick::MORPHOLOGY_EDGE_OUT, 1, $kernel);
        header("Content-Type: image/png");
        echo $canvas->getImageBlob();
?>
]]>
      </programlisting>
    </example>

    <example>
      <title>El método 'TopHat', o más específicamente 'White Top Hat', devuelve los píxeles que han sido eliminados por una Apertura de la forma, es decir, los píxeles que han sido eliminados para redondear los puntos y los puentes de conexión entre las formas. <function>Imagick::morphology</function></title>
      <programlisting role="php">
      <![CDATA[
<?php
        $canvas = $this->getCharacterOutline();
        $kernel = \ImagickKernel::fromBuiltIn(\Imagick::KERNEL_DISK, "5");
        $canvas->morphology(\Imagick::MORPHOLOGY_TOP_HAT, 1, $kernel);
        header("Content-Type: image/png");
        echo $canvas->getImageBlob();
?>
]]>
      </programlisting>
    </example>

    <example>
      <title>El método 'BottomHat', también conocido como 'Black TopHat', son los píxeles que un Cierre de la forma añade a la imagen. Es decir, los píxeles que han sido utilizados para rellenar los 'huecos', las 'lagunas' y los 'puentes'. <function>Imagick::morphology</function></title>
      <programlisting role="php">
      <![CDATA[
<?php
        $canvas = $this->getCharacterOutline();
        $kernel = \ImagickKernel::fromBuiltIn(\Imagick::KERNEL_DISK, "5");
        $canvas->morphology(\Imagick::MORPHOLOGY_BOTTOM_HAT, 1, $kernel);
        header("Content-Type: image/png");
        echo $canvas->getImageBlob();
?>
]]>
      </programlisting>
    </example>

    <example>
      <title>Golpe y fallo <function>Imagick::morphology</function></title>
      <programlisting role="php">
      <![CDATA[
<?php
        $canvas = $this->getCharacterOutline();
        //Esto encuentra todos los píxeles con 3 píxeles del borde derecho
        $matrix = [[1, false, false, 0]];
        $kernel = \ImagickKernel::fromMatrix(
            $matrix,
            [0, 0]
        );
        $canvas->morphology(\Imagick::MORPHOLOGY_HIT_AND_MISS, 1, $kernel);
        header("Content-Type: image/png");
        echo $canvas->getImageBlob();
?>
]]>
      </programlisting>
    </example>

    <example>
      <title>Afinamiento <function>Imagick::morphology</function></title>
      <programlisting role="php">
      <![CDATA[
<?php
        $canvas = $this->getCharacterOutline();
        $leftEdgeKernel = \ImagickKernel::fromMatrix([[0, 1]], [1, 0]);
        $rightEdgeKernel = \ImagickKernel::fromMatrix([[1, 0]], [0, 0]);
        $leftEdgeKernel->addKernel($rightEdgeKernel);

        $canvas->morphology(\Imagick::MORPHOLOGY_THINNING, 3, $leftEdgeKernel);
        header("Content-Type: image/png");
        echo $canvas->getImageBlob();
?>
]]>
      </programlisting>
    </example>

    <example>
      <title>Engrosamiento <function>Imagick::morphology</function></title>
      <programlisting role="php">
      <![CDATA[
<?php
        $canvas = $this->getCharacterOutline();
        $leftEdgeKernel = \ImagickKernel::fromMatrix([[0, 1]], [1, 0]);
        $rightEdgeKernel = \ImagickKernel::fromMatrix([[1, 0]], [0, 0]);
        $leftEdgeKernel->addKernel($rightEdgeKernel);

        $canvas->morphology(\Imagick::MORPHOLOGY_THICKEN, 3, $leftEdgeKernel);
        header("Content-Type: image/png");
        echo $canvas->getImageBlob();
?>
]]>
      </programlisting>
    </example>

    <example>
      <title>Afinamiento para generar una cáscara convexa <function>Imagick::morphology</function></title>
      <programlisting role="php">
      <![CDATA[
<?php
        $canvas = $this->getCharacterOutline();
        $diamondKernel = \ImagickKernel::fromBuiltIn(\Imagick::KERNEL_DIAMOND, "1");
        $convexKernel =  \ImagickKernel::fromBuiltIn(\Imagick::KERNEL_CONVEX_HULL, "");

        // La morfología de afinamiento no maneja los pequeños espacios. Los cerramos
        // con la morfología de cierre.
        $canvas->morphology(\Imagick::MORPHOLOGY_CLOSE, 1, $diamondKernel);
        $canvas->morphology(\Imagick::MORPHOLOGY_THICKEN, -1, $convexKernel);
        $canvas->morphology(\Imagick::MORPHOLOGY_CLOSE, 1, $diamondKernel);

        header("Content-Type: image/png");
        echo $canvas->getImageBlob();
?>
]]>
      </programlisting>
    </example>

    <example>
      <title>Morfología iterativa <function>Imagick::morphology</function></title>
      <programlisting role="php">
      <![CDATA[
<?php
        $canvas = $this->getCharacterOutline();
        $kernel = \ImagickKernel::fromBuiltIn(\Imagick::KERNEL_DISK, "2");
        $canvas->morphology(\Imagick::MORPHOLOGY_ITERATIVE, 3, $kernel);
        $canvas->autoLevelImage();
        header("Content-Type: image/png");
        echo $canvas->getImageBlob();
?>
]]>
      </programlisting>
    </example>

    <example>
      <title>Función de ayuda para obtener un contorno de imagen <function>Imagick::morphology</function></title>
      <programlisting role="php">
<![CDATA[
<?php
function getCharacterOutline() {
    $imagick = new \Imagick(realpath("./images/character.png"));
    $character = new \Imagick();
    $character->newPseudoImage(
        $imagick->getImageWidth(),
        $imagick->getImageHeight(),
        "canvas:white"
    );
    $canvas = new \Imagick();
    $canvas->newPseudoImage(
        $imagick->getImageWidth(),
        $imagick->getImageHeight(),
        "canvas:black"
    );

    $character->compositeimage(
        $imagick,
        \Imagick::COMPOSITE_COPYOPACITY,
        0, 0
    );
    $canvas->compositeimage(
        $character,
        \Imagick::COMPOSITE_ATOP,
        0, 0
    );
    $canvas->setFormat('png');

    return $canvas;
}
?>
]]>
      </programlisting>
    </example>
  </para>
 </refsect1>
</refentry>
