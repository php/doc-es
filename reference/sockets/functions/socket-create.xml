<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: a871ef72edf436c59422dedd538594db2541d5f1 Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: yes -->
<refentry xml:id="function.socket-create" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>socket_create</refname>
  <refpurpose>Crea un socket</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type class="union"><type>Socket</type><type>false</type></type><methodname>socket_create</methodname>
   <methodparam><type>int</type><parameter>domain</parameter></methodparam>
   <methodparam><type>int</type><parameter>type</parameter></methodparam>
   <methodparam><type>int</type><parameter>protocol</parameter></methodparam>
  </methodsynopsis>
  <para>
   <function>socket_create</function> crea un punto de comunicación
   (un socket) y devuelve una instancia de <classname>Socket</classname>
   Una conexión típica de red está compuesta por dos sockets:
   uno que actúa como cliente y otro como servidor.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>domain</parameter></term>
     <listitem>
      <para>
       El argumento <parameter>domain</parameter> especifica la familia
       de protocolos a utilizar por el socket.
      </para>
      <table>
       <title>Familia de direcciones / protocolos disponibles</title>
       <tgroup cols="2">
        <thead>
         <row>
          <entry>Dominio</entry>
          <entry>Descripción</entry>
         </row>
        </thead>
        <tbody>
         <row>
          <entry><constant>AF_INET</constant></entry>
          <entry>
           Protocolo basado en IPv4. TCP y UDP son los protocolos comunes
           de esta familia de protocolos.
          </entry>
         </row>
         <row>
          <entry><constant>AF_INET6</constant></entry>
          <entry>
           Protocolo basado en IPv6. TCP y UDP son los protocolos comunes
           de esta familia de protocolos.
           El soporte fue añadido en PHP 5.0.0.
          </entry>
         </row>
         <row>
          <entry><constant>AF_UNIX</constant></entry>
          <entry>
           Familia de protocolos de comunicación local. El alto rendimiento
           y los menores costos adicionales lo hacen una gran fuerza de IPC
           (<literal>Interprocess Communication</literal>).
          </entry>
         </row>
        </tbody>
       </tgroup>
      </table>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>type</parameter></term>
     <listitem>
      <para>
       El argumento <parameter>type</parameter> selecciona el tipo de
       comunicación a utilizar por el socket.
      </para>
      <table>
       <title>Tipos de sockets disponibles</title>
       <tgroup cols="2">
        <thead>
         <row>
          <entry>Tipo</entry>
          <entry>Descripción</entry>
         </row>
        </thead>
        <tbody>
         <row>
          <entry><constant>SOCK_STREAM</constant></entry>
          <entry>
           Proporciona flujos de bytes ordenados, fiables, full-duplex,
           conectados en base. Un mecanismo de transmisión de datos
           "<literal>out-of-band</literal>" puede ser soportado.
           El protocolo TCP se basa en este tipo de sockets.
          </entry>
         </row>
         <row>
          <entry><constant>SOCK_DGRAM</constant></entry>
          <entry>
           Soporte para datagramas (menos conexión, mensaje no garantizado
           de longitud máxima fija). El protocolo UDP se basa en este
           tipo de sockets.
          </entry>
         </row>
         <row>
          <entry><constant>SOCK_SEQPACKET</constant></entry>
          <entry>
           Proporciona un camino de transmisión de datos secuencial, fiable,
           conectado en base por dos caminos para los datagramas de
           longitud máxima fija; un consumidor es requerido para leer
           la totalidad de un paquete con cada llamada a la lectura.
          </entry>
         </row>
         <row>
          <entry><constant>SOCK_RAW</constant></entry>
          <entry>
           Proporciona acceso bruto de protocolo de red. Este tipo especial de
           socket puede ser utilizado para construir manualmente cualquier tipo
           de protocolo. Un uso común de este tipo de sockets es el procesamiento
           de las peticiones ICMP (como el ping).
          </entry>
         </row>
         <row>
          <entry><constant>SOCK_RDM</constant></entry>
          <entry>
           Proporciona una capa fiable de datagrama que no garantiza
           el orden de los datos. Este tipo de socket es el más probable
           de no estar implementado en su sistema operativo.
          </entry>
         </row>
        </tbody>
       </tgroup>
      </table>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>protocol</parameter></term>
     <listitem>
      <para>
       El argumento <parameter>protocol</parameter> define el protocolo
       específico para el dominio <parameter>domain</parameter> a utilizar
       durante las comunicaciones en un socket devuelto. El valor apropiado
       puede ser encontrado por su nombre utilizando la función
       <function>getprotobyname</function>. Si el protocolo deseado es TCP
       o UDP, las constantes correspondientes <constant>SOL_TCP</constant>
       y <constant>SOL_UDP</constant> pueden ser utilizadas.
      </para>
      <table>
       <title>Protocoles Comunes</title>
       <tgroup cols="2">
        <thead>
         <row>
          <entry>Nombre</entry>
          <entry>Descripción</entry>
         </row>
        </thead>
        <tbody>
         <row>
          <entry><literal>icmp</literal></entry>
          <entry>
           El protocolo ICMP (<literal>Internet Control Message
            Protocol</literal>) es utilizado primero por las
           pasarelas y los hosts para reportar errores en
           comunicaciones de datagrama. El comando
           "<literal>ping</literal>" (presente en los sistemas
           modernos) es un ejemplo de aplicación
           utilizando el protocolo ICMP.
          </entry>
         </row>
         <row>
          <entry><literal>udp</literal></entry>
          <entry>
           El protocolo UDP (<literal>User Datagramm Protocol</literal>)
           es un protocolo sin conexión, incierto con longitudes
           de registros fijas. Por lo tanto, <literal>UDP</literal>
           requiere una cantidad mínima de protocolo aéreo.
          </entry>
         </row>
         <row>
          <entry><literal>tcp</literal></entry>
          <entry>
           El protocolo TCP (<literal>Transmission Control Protocol</literal>)
           es un protocolo fiable, conectado en base, orientado a flujo y
           full-duplex. <literal>TCP</literal> garantiza que cada paquete es
           recibido en el orden en que fue enviado. Si algunos paquetes
           se pierden durante la comunicación, <literal>TCP</literal>
           retransmitirá estos paquetes hasta que el host destinatario
           los haya recibido completamente. Por razones de fiabilidad y
           rendimiento, la implementación <literal>TCP</literal>, ella misma,
           decide las fronteras apropiadas de bytes de la capa fundamental
           de comunicación del datagrama. Por lo tanto, las aplicaciones
           <literal>TCP</literal> deben permitir la posibilidad de
           transmisión parcial de registros.
          </entry>
         </row>
        </tbody>
       </tgroup>
      </table>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   <function>socket_create</function> devuelve una instancia de
   <classname>Socket</classname> en caso de éxito y &false; en caso contrario.
   El código de error generado puede ser obtenido llamando a la función
   <function>socket_last_error</function>. Este código de error
   puede ser pasado a la función <function>socket_strerror</function>
   para obtener un mensaje de error legible por humanos.
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   Si un valor inválido es especificado en el argumento <parameter>domain</parameter> o
   en el argumento <parameter>type</parameter>, la función <function>socket_create</function>
   tomará como argumentos por defecto respectivamente <constant>AF_INET</constant> y
   <constant>SOCK_STREAM</constant> y generará un mensaje de advertencia
   (<constant>E_WARNING</constant>).
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <informaltable>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>&Version;</entry>
      <entry>&Description;</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>8.0.0</entry>
      <entry>
       En caso de éxito, esta función devuelve ahora una instancia de
       <classname>Socket</classname>; anteriormente, se devolvía un <type>resource</type>.
      </entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>socket_accept</function></member>
    <member><function>socket_bind</function></member>
    <member><function>socket_connect</function></member>
    <member><function>socket_listen</function></member>
    <member><function>socket_last_error</function></member>
    <member><function>socket_strerror</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
