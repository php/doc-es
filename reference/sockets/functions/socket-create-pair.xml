<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 14dc7c47365f2b71f6c907a5ba5bccf42534d5a9 Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: yes -->
<refentry xml:id="function.socket-create-pair" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>socket_create_pair</refname>
  <refpurpose>Crea un par de sockets idénticos y los almacena en un array</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>bool</type><methodname>socket_create_pair</methodname>
   <methodparam><type>int</type><parameter>domain</parameter></methodparam>
   <methodparam><type>int</type><parameter>type</parameter></methodparam>
   <methodparam><type>int</type><parameter>protocol</parameter></methodparam>
   <methodparam><type>array</type><parameter role="reference">pair</parameter></methodparam>
  </methodsynopsis>
  <para>
   <function>socket_create_pair</function> crea un par de sockets idénticos y los almacena
   en <parameter>pair</parameter>. Esta función se utiliza comúnmente en
   IPC (<literal>InterProcess Communication</literal>).
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>domain</parameter></term>
     <listitem>
      <para>
       El argumento <parameter>domain</parameter> especifica la familia del protocolo a utilizar por
       el socket. Ver la documentación sobre la función <function>socket_create</function>
       para una lista completa.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>type</parameter></term>
     <listitem>
      <para>
       El argumento <parameter>type</parameter> especifica el tipo de
       comunicación a utilizar por el socket. Ver la documentación
       sobre la función <function>socket_create</function> para una lista
       completa.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>protocol</parameter></term>
     <listitem>
      <para>
       El argumento <parameter>protocol</parameter> define un protocolo
       específico en el dominio especificado <parameter>domain</parameter>
       para ser utilizado durante una comunicación en un socket devuelto.
       El valor apropiado puede ser encontrado por su nombre utilizando
       la función <function>getprotobyname</function>. Si el protocolo
       deseado es TCP o UDP, las constantes correspondientes
       <constant>SOL_TCP</constant> y <constant>SOL_UDP</constant> pueden
       ser utilizadas.
      </para>
      <para>
       Ver la documentación sobre la función <function>socket_create</function>
       para una lista completa de los protocolos soportados.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>pair</parameter></term>
     <listitem>
      <para>
       Una referencia a un array en el cual las dos instancias de
       <classname>Socket</classname> serán insertadas.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.success;
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <informaltable>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>&Version;</entry>
      <entry>&Description;</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>8.0.0</entry>
      <entry>
       <parameter>pair</parameter> es una referencia a un array de instancias de
       <classname>Socket</classname>; anteriormente, era una referencia a un
       array de <type>resource</type>s.
      </entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Ejemplo con <function>socket_create_pair</function></title>
    <programlisting role="php">
<![CDATA[
<?php
$sockets = array();

/* En Windows, debemos utilizar AF_INET */
$domain = (strtoupper(substr(PHP_OS, 0, 3)) == 'WIN' ? AF_INET : AF_UNIX);

/* Creación del par de sockets */
if (socket_create_pair($domain, SOCK_STREAM, 0, $sockets) === false) {
    echo "socket_create_pair ha fallado. Razón: ".socket_strerror(socket_last_error());
}
/* Envío y recepción de datos */
if (socket_write($sockets[0], "ABCdef123\n", strlen("ABCdef123\n")) === false) {
    echo "socket_write() ha fallado. Razón: ".socket_strerror(socket_last_error($sockets[0]));
}
if (($data = socket_read($sockets[1], strlen("ABCdef123\n"), PHP_BINARY_READ)) === false) {
    echo "socket_read() ha fallado. Razón: ".socket_strerror(socket_last_error($sockets[1]));
}
var_dump($data);

/* Cierre de los sockets */
socket_close($sockets[0]);
socket_close($sockets[1]);
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title>Ejemplo IPC con <function>socket_create_pair</function></title>
    <programlisting role="php">
<![CDATA[
<?php
$ary = array();
$strone = 'Mensaje desde el padre.';
$strtwo = 'Mensaje desde el hijo.';
if (socket_create_pair(AF_UNIX, SOCK_STREAM, 0, $ary) === false) {
    echo "socket_create_pair() ha fallado. Razón: ".socket_strerror(socket_last_error());
}
$pid = pcntl_fork();
if ($pid == -1) {
    echo 'No es posible duplicar el proceso.';
} elseif ($pid) {
    /* padre */
    socket_close($ary[0]);
    if (socket_write($ary[1], $strone, strlen($strone)) === false) {
        echo "socket_write() ha fallado. Razón: ".socket_strerror(socket_last_error($ary[1]));
    }
    if (socket_read($ary[1], strlen($strtwo), PHP_BINARY_READ) == $strtwo) {
        echo "Recepción de $strtwo\n";
    }
    socket_close($ary[1]);
} else {
    /* hijo */
    socket_close($ary[1]);
    if (socket_write($ary[0], $strtwo, strlen($strtwo)) === false) {
        echo "socket_write() ha fallado. Razón: ".socket_strerror(socket_last_error($ary[0]));
    }
    if (socket_read($ary[0], strlen($strone), PHP_BINARY_READ) == $strone) {
        echo "Recepción de $strone\n";
    }
    socket_close($ary[0]);
}
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>socket_create</function></member>
    <member><function>socket_create_listen</function></member>
    <member><function>socket_bind</function></member>
    <member><function>socket_listen</function></member>
    <member><function>socket_last_error</function></member>
    <member><function>socket_strerror</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
