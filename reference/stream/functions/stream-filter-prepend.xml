<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: e41806c30bf6975e452c0d4ce35ab0984c2fa68c Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: yes -->

<refentry xml:id="function.stream-filter-prepend" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>stream_filter_prepend</refname>
  <refpurpose>Adjunta un filtro a un flujo al inicio de la lista</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>resource</type><methodname>stream_filter_prepend</methodname>
   <methodparam><type>resource</type><parameter>stream</parameter></methodparam>
   <methodparam><type>string</type><parameter>filtername</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>read_write</parameter></methodparam>
   <methodparam choice="opt"><type>mixed</type><parameter>params</parameter></methodparam>
  </methodsynopsis>
  <para>
   <function>stream_filter_prepend</function> añade el filtro
   <parameter>filtername</parameter> a la lista de filtros adjuntos al
   flujo <parameter>stream</parameter>.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>stream</parameter></term>
     <listitem>
      <para>
       El flujo de destino.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>filtername</parameter></term>
     <listitem>
      <para>
       El nombre del filtro.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>read_write</parameter></term>
     <listitem>
      <para>
       Por omisión, <function>stream_filter_prepend</function>
       adjuntará el filtro a la <literal>cadena de filtros de lectura</literal>
       si el fichero ha sido abierto en modo lectura (es decir, modo
       <literal>r</literal>, y/o <literal>+</literal>). El filtro
       también será adjuntado a la <literal>cadena de filtros de escritura</literal>
       si el fichero ha sido abierto en modo escritura (es decir, modo
       <literal>w</literal>, <literal>a</literal>, y/o <literal>+</literal>).
       <constant>STREAM_FILTER_READ</constant>,
       <constant>STREAM_FILTER_WRITE</constant>, y/o
       <constant>STREAM_FILTER_ALL</constant> pueden también ser pasados en el
       parámetro <parameter>read_write</parameter> para imponer el comportamiento
       deseado. Véase <function>stream_filter_append</function> para un ejemplo
       de uso de este parámetro.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>params</parameter></term>
     <listitem>
      <para>
       El filtro será añadido con los parámetros especificados en <parameter>params</parameter>,
       al <emphasis>inicio</emphasis> de la lista, y será llamado en primer lugar
       en las operaciones del flujo. Para añadir un filtro al final de la lista,
       utilice <function>stream_filter_append</function>.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Devuelve un recurso en caso de éxito, o &false; en caso de error.
   El recurso puede ser utilizado para referirse a esta instancia de filtro
   durante una llamada a la función <function>stream_filter_remove</function>.
  </para>

  <para>
   &false; es devuelto si <parameter>stream</parameter> no es un recurso,
   o si <parameter>filtername</parameter> no puede ser alcanzado.
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <note>
   <title>Cuando se utilizan filtros personalizados</title>
   <simpara>
    <function>stream_register_filter</function> debe ser llamada antes
    que <function>stream_filter_prepend</function> para registrar el filtro
    bajo el nombre de <parameter>filtername</parameter>.
   </simpara>
  </note>
  <note>
   <simpara>
    Los datos del flujo (locales y remotos) son devueltos en fragmentos,
    los datos no encaminados son conservados en el búfer interno.
    Cuando un nuevo filtro es añadido al inicio del flujo, los datos en
    el búfer interno no son <emphasis>pasados</emphasis> al nuevo
    filtro en ese momento. Esto es diferente del comportamiento de
    <function>stream_filter_append</function>.
   </simpara>
  </note>
  <note>
   <simpara>
    Cuando un filtro es añadido para lectura y escritura, se crean dos instancias
    del filtro. <function>stream_filter_prepend</function> debe ser
    llamada dos veces con <constant>STREAM_FILTER_READ</constant> y
    <constant>STREAM_FILTER_WRITE</constant> para obtener los recursos de los filtros.
   </simpara>
  </note>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <simplelist>
   <member><function>stream_filter_register</function></member>
   <member><function>stream_filter_append</function></member>
  </simplelist>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
