<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: a1702b5d45ad950c5f7a077878378a37851a2df6 Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: yes -->
<refentry xml:id="function.stream-socket-server" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>stream_socket_server</refname>
  <refpurpose>Crea un socket de servidor Unix o Internet</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type class="union"><type>resource</type><type>false</type></type><methodname>stream_socket_server</methodname>
   <methodparam><type>string</type><parameter>address</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter role="reference">error_code</parameter><initializer>&null;</initializer></methodparam>
   <methodparam choice="opt"><type>string</type><parameter role="reference">error_message</parameter><initializer>&null;</initializer></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>flags</parameter><initializer>STREAM_SERVER_BIND | STREAM_SERVER_LISTEN</initializer></methodparam>
   <methodparam choice="opt"><type class="union"><type>resource</type><type>null</type></type><parameter>context</parameter><initializer>&null;</initializer></methodparam>
  </methodsynopsis>
  <para>
   <function>stream_socket_server</function> crea un flujo o un datagrama en el socket especificado <parameter>address</parameter>.
  </para>
  <para>
   <function>stream_socket_server</function> solo crea un socket y, para aceptar conexiones, se debe utilizar <function>stream_socket_accept</function>.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>address</parameter></term>
     <listitem>
      <para>
       El tipo de socket creado se determina por el transporte especificado con el formato URL siguiente: <literal>transport://target</literal>.
      </para>
      <para>
       Para un socket de Internet (<constant>AF_INET</constant>) como TCP y UDP, el <literal>target</literal> de <parameter>remote_socket</parameter> será una dirección IP o un nombre de host seguido de dos puntos y un número de puerto. Para un socket Unix, el <literal>target</literal> debe ser un fichero de socket del sistema.
      </para>
      <para>
       Según el entorno, los sockets de dominio Unix pueden no estar disponibles. Una lista de los transportes disponibles se puede obtener mediante <function>stream_get_transports</function>. Consulte <xref linkend="transports"/> para conocer la lista de transportes nativos.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>error_code</parameter></term>
     <listitem>
      <para>
       Si los argumentos opcionales <parameter>error_code</parameter> y <parameter>error_message</parameter> están presentes, se configurarán para indicar el nivel de error actual de las funciones del sistema <literal>socket()</literal>, <literal>bind()</literal> y <literal>listen()</literal>. Si el valor devuelto en <parameter>error_code</parameter> es <literal>0</literal> y la función devuelve &false;, esto indica que el error ocurrió antes de la llamada a <literal>bind()</literal>. Esto probablemente se deba a un problema de inicialización del socket. Tenga en cuenta que los argumentos <parameter>error_code</parameter> y <parameter>error_message</parameter> siempre se pasarán por referencia.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>error_message</parameter></term>
     <listitem>
      <para>
       Consulte la descripción de <parameter>error_code</parameter>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>flags</parameter></term>
     <listitem>
      <para>
       Un campo de bits, que puede ser la combinación de cualquier opción de creación de socket.
      </para>
      <note>
       <para>
        Para los sockets UDP, se debe utilizar la constante <constant>STREAM_SERVER_BIND</constant> como valor del parámetro <parameter>flags</parameter>.
       </para>
      </note>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>context</parameter></term>
     <listitem>
      <para>
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Devuelve el flujo creado, o bien &false; en caso de error.
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <informaltable>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>&Version;</entry>
      <entry>&Description;</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>8.0.0</entry>
      <entry>
       <parameter>context</parameter> ahora es nullable.
      </entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Ejemplo con <function>stream_socket_server</function></title>
    <programlisting role="php">
<![CDATA[
<?php
$socket = stream_socket_server("tcp://0.0.0.0:8000", $errno, $errstr);
if (!$socket) {
  echo "$errstr ($errno)<br />\n";
} else {
  while ($conn = stream_socket_accept($socket)) {
    fputs ($conn, 'La hora local es ' . date('n/j/Y g:i a') . "\n");
    fclose ($conn);
  }
  fclose($socket);
}
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   El ejemplo siguiente muestra cómo leer la fecha y la hora en un servicio UDP (puerto 13) en su propia máquina, tal como se presenta con la función <function>stream_socket_client</function>:
   <note>
    <simpara>
     La mayoría de los sistemas requieren acceso de administrador para abrir un socket en los puertos por debajo de 1024.
    </simpara>
   </note>
   <example>
    <title>Utilizar un servidor de socket UDP</title>
    <programlisting role="php">
<![CDATA[
<?php
$socket = stream_socket_server("udp://0.0.0.0:13", $errno, $errstr, STREAM_SERVER_BIND);
if (!$socket) {
  echo "ERROR: $errno - $errstr<br />\n";
} else {
  while ($conn = stream_socket_accept($socket)) {
    fwrite($conn, date("D M j H:i:s Y\r\n"));
    fclose($conn);
  }
  fclose($socket);
}
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  &ipv6.brackets;
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <simplelist>
   <member><function>stream_socket_client</function></member>
   <member><function>stream_set_blocking</function></member>
   <member><function>stream_set_timeout</function></member>
   <member><function>fgets</function></member>
   <member><function>fgetss</function></member>
   <member><function>fwrite</function></member>
   <member><function>fclose</function></member>
   <member><function>feof</function></member>
   <member><link linkend="ref.curl">Extensión Curl</link></member>
  </simplelist>
 </refsect1>
</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
