<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 0c9c2dd669fe9395eaa73d487fbd160f9057429a Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: yes -->
<refentry xml:id="function.stream-filter-register" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>stream_filter_register</refname>
  <refpurpose>Registra un filtro de flujo</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>bool</type><methodname>stream_filter_register</methodname>
   <methodparam><type>string</type><parameter>filter_name</parameter></methodparam>
   <methodparam><type>string</type><parameter>class</parameter></methodparam>
  </methodsynopsis>
  <para>
   <function>stream_filter_register</function> permite implementar
   un filtro de flujo personalizado, para ser utilizado con las funciones de acceso
   a datos externos (como <function>fopen</function>,
   <function>fread</function>, etc.).
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>filter_name</parameter></term>
     <listitem>
      <para>
       El nombre del filtro a registrar.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>class</parameter></term>
     <listitem>
      <para>
       Para crear una clase de filtro, se debe definir una clase que
       extienda la clase <classname>php_user_filter</classname>.
       Al realizar operaciones
       de lectura y escritura en el flujo al que esté adjunto el filtro,
       PHP pasará los datos a través del filtro (y de todos los otros
       filtros adjuntos), de manera que los datos sean modificados
       según lo deseado. Se deben implementar los métodos tal como
       se describe en <classname>php_user_filter</classname>, de lo contrario
       se producirán comportamientos indefinidos.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.success;
  </para>
  <para>
   <function>stream_filter_register</function> debe devolver siempre &false; si
   el parámetro <parameter>filter_name</parameter> ya está definido.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Filtro de letras mayúsculas en el flujo <filename>foo-bar.txt</filename></title>
    <para>
     El ejemplo siguiente implementa un filtro llamado
     <literal>strtoupper</literal>, en el flujo <filename>foo-bar.txt</filename>,
     que convierte a mayúsculas todas las letras escritas/leídas desde este flujo.
    </para>
    <programlisting role="php">
<![CDATA[
<?php

/* Definición de la clase */
class strtoupper_filter extends php_user_filter {
  function filter($in, $out, &$consumed, $closing)
  {
    while ($bucket = stream_bucket_make_writeable($in)) {
      $bucket->data = strtoupper($bucket->data);
      $consumed += $bucket->datalen;
      stream_bucket_append($out, $bucket);
    }
    return PSFS_PASS_ON;
  }
}

/* Registro de nuestro filtro con PHP */
stream_filter_register("strtoupper", "strtoupper_filter")
    or die("Error al registrar el filtro");

$fp = fopen("foo-bar.txt", "w");

/* Adjuntar el filtro registrado al flujo que acabamos de abrir */
stream_filter_append($fp, "strtoupper");

fwrite($fp, "Línea1\n");
fwrite($fp, "Palabra - 2\n");
fwrite($fp, "Fácil como 123\n");

fclose($fp);

/* Lectura del contenido */
readfile("foo-bar.txt");

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
LÍNEA1
PALABRA - 2
FÁCIL COMO 123
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title>Registro de una clase de filtro genérica para coincidir
     con múltiples nombres de filtros</title>
    <programlisting role="php">
<![CDATA[
<?php

/* Definición de la clase */
class string_filter extends php_user_filter {
  var $mode;

  function filter($in, $out, &$consumed, $closing)
  {
    while ($bucket = stream_bucket_make_writeable($in)) {
      if ($this->mode == 1) {
        $bucket->data = strtoupper($bucket->data);
      } elseif ($this->mode == 0) {
        $bucket->data = strtolower($bucket->data);
      }

      $consumed += $bucket->datalen;
      stream_bucket_append($out, $bucket);
    }
    return PSFS_PASS_ON;
  }

  function onCreate()
  {
    if ($this->filtername == 'str.toupper') {
      $this->mode = 1;
    } elseif ($this->filtername == 'str.tolower') {
      $this->mode = 0;
    } else {
      /* Se solicitan algunos otros filtros str.*, manejo del error con PHP */
      return false;
    }

    return true;
  }
}

/* Registro de nuestro filtro con PHP */
stream_filter_register("str.*", "string_filter")
    or die("Error al registrar el filtro");

$fp = fopen("foo-bar.txt", "w");

/* Adjuntar el filtro registrado al flujo que acabamos de abrir
    Podemos alternativamente pasar a str.tolower aquí */
stream_filter_append($fp, "str.toupper");

fwrite($fp, "Línea1\n");
fwrite($fp, "Palabra - 2\n");
fwrite($fp, "Fácil como 123\n");

fclose($fp);

/* Lectura del contenido */
readfile("foo-bar.txt");

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
LÍNEA1
PALABRA - 2
FÁCIL COMO 123
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>stream_wrapper_register</function></member>
    <member><function>stream_filter_append</function></member>
    <member><function>stream_filter_prepend</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
