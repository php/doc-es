<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 11a49566970d661597de32aa3ef434e80d96804e Maintainer: seros Status: ready -->
<!-- Reviewed: no -->
<reference xml:id="ref.pdo-cubrid" xmlns="http://docbook.org/ns/docbook"><?phpdoc extension-membership="pecl" ?>
 <title>Funciones de CUBRID (PDO_CUBRID)</title>
 <titleabbrev>CUBRID (PDO)</titleabbrev>
 <partintro>
  
  <section xml:id="pdo-cubrid.intro">
   &reftitle.intro;
   <para>
    PDO_CUBRID es un controlador que implementa la <link linkend="intro.pdo">interfaz de Objetos de Datos de PHP (PDO)</link> para
    habilitar el acceso desde PHP a bases de datos de CUBRID.
   </para>
   <note><para>
    Por ahora, la versión actual de PDO_CUBRID no admite conexiones persistentes.
   </para></note>
  </section>
  
  <!-- Information found in configure.xml -->
  &reference.pdo-cubrid.configure;
  
  <section xml:id="ref.pdo-cubrid.features">
   <title>Características de PDO_CUBRID</title>

   <section>
    <title>Cursores desplazables</title>
    <simpara>
     PDO_CUBRID admite cursores desplazables. El tipo de cursor predeterminado es
     de sólo avance, y se puede usar el parámetro driver_options de
     <methodname>PDO::prepare</methodname> para cambiar el tipo de cursor.
    </simpara>
   </section>

   <section>
    <title>Tiempo de espera</title>
    <simpara>
     PDO_CUBRID admite la configuracion del tiempo de espera de las ejecuciones de sentencias SQL;
     Se puede utilizar <methodname>PDO::setAttribute</methodname> para establecer el valor del tiempo de espera.
    </simpara>
   </section>

   <section>
    <title>Autocommit_mode y transacciones</title>

    <simpara>
     PDO_CUBRID admite autocommit_mode y transacciones, y
     autocommit_mode está habilitado por omisión. Se puede usar
     <methodname>PDO::setAttribute</methodname> para cambiar su estado.
    </simpara>

    <simpara>
     Si se usa <methodname>PDO::beginTransaction</methodname> para iniciar una
     transacción, se desactivará autocommit_mode automaticamente y
     <methodname>PDO::rollBack</methodname>. Obsérvese que antes de deshabilitar
     autocommit_mode, cualquier trabajo pendiente es consignado automáticamente.
    </simpara>

    <note>
     <simpara>
      Antes de desactivar autocommit_mode
      cualquier trabajo pendiente se consigna automáticamente.
     </simpara>
    </note>
   </section>

   <section>
    <title>Sentencias SQL múltiples</title>
    
    <simpara>
     PDO_CUBRID admite sentencias SQL múltiples. Las sentencias SQL
     múltiples están serparadas por puntos y comas (<literal>;</literal>).
    </simpara>
   </section>

   <section>
    <title>Información del esquema</title>

    <simpara>
     PDO_CUBRID implementa el método <methodname>PDO::cubrid_schema</methodname>
     para obtener la información del esquema.
    </simpara>
   </section>

   <section>
    <title>LOBs</title>

    <simpara>
     PDO_CUBRID admite los tipos de datos BLOB/CLOB. El tipo LOB en PDO es
     representado como un flujo (stream), por lo que pueden insertarse LOBs
     vinculando un flujo, y obtener LOBs leyendo de un flujo devuelto por CUBRID PDO.
     Por ejemplo:
    </simpara>

    <example>
     <title>Insertar LOBs en CUBRID PDO</title>
     <programlisting role="php">
<![CDATA[
<?php
$fp = fopen('lob_test.png', 'rb');

$sql_stmt = "INSERT INTO lob_test(name, content) VALUES('lob_test.png', ?)";

$stmt = $dbh->prepare($sql_stmt);
$ret = $stmt->bindParam(1, $fp, PDO::PARAM_LOB);
$ret = $stmt->execute();
?>
]]>
     </programlisting>
    </example>

    <example>
     <title>Obtener LOBs en CUBRID PDO</title>
     <programlisting role="php">
<![CDATA[
<?php
$sql_stmt = "SELECT content FROM lob_test WHERE name='lob_test.png'";

$stmt = $dbh->prepare($sql_stmt);
$stmt->execute();
$result = $stmt->fetch(PDO::FETCH_NUM);

header("Content-Type: image/png");
fpassthru($result[0]);
?>
]]>
     </programlisting>
    </example>
   </section>

   <section>
    <title>Metadatos de columna</title>

    <para>
     El método <methodname>PDOStatement::getColumnMeta</methodname> de CUBRID PDO
     devolverá un array asociativo que contiene los siguientes valores:
     <simplelist>
      <member>type</member>
      <member>name</member>
      <member>table</member>
      <member>def</member>
      <member>precision</member>
      <member>scale</member>
      <member>not_null</member>
      <member>auto_increment</member>
      <member>unique_key</member>
      <member>multiple_key</member>
      <member>primary_key</member>
      <member>foreign_key</member>
      <member>reverse_index</member>
      <member>reverse_unique</member>
     </simplelist>
    </para>
   </section>

   <section>
    <title>Tipos de datos de colecciones</title>

    <simpara>
     PDO_CUBRID admite los tipos de datos SET/MULTISET/SEQUENCE.
     Si no se especifica el tipo de datos, el predeterminado es char.
     Por ejemplo:
    </simpara>

    <example>
     <title>Insertar un conjunto en CUBRID PDO con el tipo de datos predeterminado.</title>
     <programlisting role="php">
<![CDATA[
<?php
$conn_str ="cubrid:dbname=demodb;host=localhost;port=33000";
$cubrid_pdo = new PDO($conn_str, 'dba', '');

$cubrid_pdo->exec("DROP TABLE if exists test_tbl"); 
$cubrid_pdo->exec("CREATE TABLE test_tbl (col_1 SET(VARCHAR))");
 
$sql_stmt_insert = "INSERT INTO test_tbl VALUES (?);";
$stmt = $cubrid_pdo->prepare($sql_stmt_insert);
$data = array("abc","def","ghi");
$ret = $stmt->bindParam(1, $data, PDO::PARAM_NULL);
$ret = $stmt->execute();
var_Dump($ret);
?>
]]>
     </programlisting>
    </example>

    <example>
     <title>Especificar un tipo de datos al insertar un conjunto en CUBRID PDO</title>
     <programlisting role="php">
<![CDATA[
<?php
$conn_str ="cubrid:dbname=demodb;host=localhost;port=33000";
$cubrid_pdo = new PDO($conn_str, 'dba', '');

$cubrid_pdo->exec("DROP TABLE if exists test_tbl"); 
$cubrid_pdo->exec("CREATE TABLE test_tbl (col_1 SET(int))");
 
$sql_stmt_insert = "INSERT INTO test_tbl VALUES (?);";
$stmt = $cubrid_pdo->prepare($sql_stmt_insert);
$data = array(1,2,3,4);
$ret = $stmt->bindParam(1, $data, 0,0,"int");
$ret = $stmt->execute();
var_Dump($ret);
?>
]]>
     </programlisting>
    </example>

    <para>
     Tipos de datos de vinculación de CUBRID para el quinto parámetro de
     <methodname>PDOStatement::bindParam</methodname>:
     <simplelist>
      <member>CHAR</member>
      <member>STRING</member>
      <member>NCHAR</member>
      <member>VARNCHAR</member>
      <member>BIT</member>
      <member>VARBIT</member>
      <member>NUMERIC</member>
      <member>NUMBER</member>
      <member>INT</member>
      <member>SHORT</member>
      <member>BIGINT</member>
      <member>MONETARY</member>
      <member>FLOAT</member>
      <member>DOUBLE</member>
      <member>DATE</member>
      <member>TIME</member>
      <member>DATETIME</member>
      <member>TIMESTAMP</member>
     </simplelist>
    </para>
   </section>
  </section>

   <!-- Information found in constants.xml -->
   &reference.pdo-cubrid.constants;

  </partintro>

  <refentry xml:id="ref.pdo-cubrid.connection">
   <refnamediv>
    <refname>DSN de PDO_CUBRID</refname>
    <refpurpose>Conectar con bases de datos de CUBRID</refpurpose>
   </refnamediv>

   <refsect1 role="description">
    &reftitle.description;
    <para>
     El Nombre del Origen de Datos (DSN) de PDO_CUBRID está compuesto por los siguientes elementos, delimitados por punto y coma:
     <variablelist>
      <varlistentry>
       <term>Prefijo DSN</term>
       <listitem>
        <para>
        El prefijo DSN es <userinput>cubrid:</userinput>.
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term><literal>host</literal></term>
       <listitem>
        <para>
         El nombre del host en el que reside el servidor de bases dedatos.
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term><literal>port</literal></term>
       <listitem>
        <para>
         El puerto en el que se está ejecutando el servidor de bases de datos.
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term><literal>dbname</literal></term>
       <listitem>
        <para>
         El nombre de la base de datos.
        </para>
       </listitem>
      </varlistentry>
     </variablelist>
    </para>
   </refsect1>

   <refsect1 role="notes">
    &reftitle.notes;
    <note>
     <para>
      Cuando se establezca la conexión a CUBRID, se debería proporcionar el nombre de usario y
      la contraseña excepto el DSN.
     </para>
    </note>
   </refsect1>

   <refsect1 role="examples">
    &reftitle.examples;
    <para>
     <example>
      <title>Ejemplos de DSN de PDO_CUBRID</title>
      <para>
       El siguiente ejemplo muestra un DSN de PDO_CUBRID para conectarse a una base de datos de CUBRID:
       <programlisting><![CDATA[
cubrid:host=localhost;port=33000;dbname=demodb
]]>
       </programlisting>
      </para>
     </example>
    </para>
   </refsect1>
  </refentry>

  &reference.pdo-cubrid.entities.PDO;

 </reference>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
