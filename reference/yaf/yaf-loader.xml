<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: ecaa2146429a7f88de40dfce14718afc896b74c5 Maintainer: seros Status: ready -->
<!-- Reviewed: no Maintainer: andresdzphp -->

<phpdoc:classref xml:id="class.yaf-loader" xmlns:phpdoc="http://php.net/ns/phpdoc" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude">

 <title>La clase Yaf_Loader</title>
 <titleabbrev>Yaf_Loader</titleabbrev>

 <partintro>

  <!-- {{{ Yaf_Loader intro -->
  <section xml:id="yaf-loader.intro">
   &reftitle.intro;
   <para>
    <classname>Yaf_Loader</classname> introduce una solución completa de
    autocarga para Yaf.
   </para>
   <para>
    La primera vez que se recupera una instancia de la clase <classname>Yaf_Application</classname>,
    <classname>Yaf_Loader</classname> instanciará un singleton, y se registrará a sí mismo con
    spl_autoload. Se recupera una instancia usando el método <methodname>Yaf_Loader::getInstance</methodname>
   </para>
   <para>
    <classname>Yaf_Loader</classname> intenta cargar una clase sólo una vez, y si
    falla, dependiendo de <link
    linkend="ini.yaf.use-spl-autoload">yaf.use_spl_auload</link>, si esta configuración
    es "On" <methodname>Yaf_Loader::autoload</methodname> devolverá
    &false;, y así dará otra oportunidad a otra función de autocarga; si es "Off"
    (por omisión), <methodname>Yaf_Loader::autoload</methodname> devolverá
    &true;, y lo que es más importante: emitirá una advertencia muy útil
    (muy útil para averiguar por qué no se cargó una clase).
    <note>
     <para>
      Por favor, mantenga yaf.use_spl_autoload en "Off" a menos que exista una biblioteca que
      tenga su propio mecanismo de autocarga y sea imposible reescribirlo.
     </para>
    </note>
   </para>
   <para>
    Por defecto, <classname>Yaf_Loader</classname> asume que todas las bibliotecas (las clases
    definidas en el script) se almacenan en el <link linkend="ini.yaf.library">directorio de clases
    global</link>, el cual está definido en php.ini (yaf.library).
   </para>

   <para>
    Si quiere que <classname>Yaf_Loader</classname> busque algunas
    clases (bibliotecas) en el <link linkend="yaf-loader.props.library">directorio de
    clases local</link> (el cual está definido en application.ini, y por omisión
    es <link
    linkend="configuration.yaf.directory">application.directory</link> . "/libraray"),
    debería registrar el prefijo de clases usando el método
    <methodname>Yaf_Loader::registerLocalNameSpace</methodname>
   </para>

   <para>
    Veamos algunos ejemplos (asumiendo que APPLICATION_PATH es <link
    linkend="configuration.yaf.directory">application.directory</link>):
    <example>
     <title>Ejemplo de configuración</title>
     <programlisting role="shell">
<![CDATA[
// Se asume la siguiente configuración en php.ini:
yaf.library = "/global_dir"

// Se asume la siguiente configuración en application.ini
application.library = APPLICATION_PATH "/library"
]]>
     </programlisting>
    </example>

    Se asume que el siguiente espacio de nombres local está registrado:
    <example>
     <title>Registrar el espacio de nombres local</title>
     <programlisting role="php">
<![CDATA[
<?php
class Bootstrap extends Yaf_Bootstrap_Abstract{
     public function _initLoader($dispatcher) {
          Yaf_Loader::getInstance()->registerLocalNameSpace(array("Foo", "Bar"));
     }
?>
]]>
     </programlisting>
    </example>

    Ahora los ejemplos de autocarga:
    <example>
     <title>Load class example</title>
     <programlisting role="shell">
<![CDATA[
class Foo_Bar_Test =>
  // APPLICATION_PATH/library/Foo/Bar/Test.php

class GLO_Name  =>
  // /global_dir/Glo/Name.php

class BarNon_Test
  // /global_dir/Barnon/Test.php
]]>
     </programlisting>
    </example>

    <example>
     <title>Ejemplo de carga de una clase en el espacio de nombres</title>
     <programlisting role="shell">
<![CDATA[
class \Foo\Bar\Dummy =>
   // APPLICATION_PATH/library/Foo/Bar/Dummy.php

class \FooBar\Bar\Dummy =>
   // /global_dir/FooBar/Bar/Dummy.php
]]>
     </programlisting>
    </example>
   </para>

   <para>
    Se puede observar que todas las carpetas tienen la primera letra en mayúsculas, se pueden ponerlas
    en minúsculas estableciendo <link linkend="ini.yaf.lowcase-path">yaf.lowcase_path</link> = On en php.ini
   </para>

   <para>
    <classname>Yaf_Loader</classname> también está diseñada para cargar las clases MVC,
    y la regla es:
    <example>
     <title>Ejemplo de carga de clase MVC</title>
     <programlisting role="shell">
<![CDATA[
Controller Classes =>
// APPLICATION_PATH/controllers/

Model Classes =>
// APPLICATION_PATH/models/

Plugin Classes =>
// APPLICATION_PATH/plugins/
]]>
     </programlisting>
    </example>

    Yaf identifica un sufijo de clases (por omisión, se puede cambiar
    el sufijo cambiando la opción de configuración <link
    linkend="ini.yaf.name-suffix">yaf.name_suffix</link>) para decidir si
    es una clase MVC:
    <example>
     <title>Distinciones de clases MVC</title>
     <programlisting role="shell">
<![CDATA[
Controller Classes =>
    // ***Controller

Model Classes =>
    // ***Model

Plugin Classes =>
    // ***Plugin
]]>
     </programlisting>
    </example>

    algunos ejemplos:
    <example>
     <title>Ejemplo de carga MVC</title>
     <programlisting role="shell">
<![CDATA[
class IndexController
    // APPLICATION_PATH/controllers/Index.php

class DataModel =>
   // APPLICATION_PATH/models/Data.php

class DummyPlugin =>
  // APPLICATION_PATH/plugins/Dummy.php

class A_B_TestModel =>
  // APPLICATION_PATH/models/A/B/Test.php
]]>
     </programlisting>
    </example>

    <note>
     <para>
      A partir de 2.1.18, Yaf admite que los Controllers se autocarguen para el lado del scrpt cliente,
      (lo que significa que la autocarga se desencadena por el script del usuario de php, p.ej., acceder a una
      propiedad de un Controller estático en Bootstrap o Plugins),
      aunque el autocargador solamente intenta localizar el controlador bajo la carpeta del
      módulo predeterminado, que es "APPLICATION_PATH/controllers/".
     </para>
    </note>

    también, el directorio será afectado por <link linkend="ini.yaf.lowcase-path">yaf.lowcase_path</link>.
   </para>
  </section>
  <!-- }}} -->

  <section xml:id="yaf-loader.synopsis">
   &reftitle.classsynopsis;

   <!-- {{{ Synopsis -->
   <classsynopsis>
    <ooclass><classname>Yaf_Loader</classname></ooclass>

    <!-- {{{ Class synopsis -->
    <classsynopsisinfo>
     <ooclass>
      <classname>Yaf_Loader</classname>
     </ooclass>
    </classsynopsisinfo>
    <!-- }}} -->
    <classsynopsisinfo role="comment">&Properties;</classsynopsisinfo>
    <fieldsynopsis>
     <modifier>protected</modifier>
     <varname linkend="yaf-loader.props.local-ns">_local_ns</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>protected</modifier>
     <varname linkend="yaf-loader.props.library">_library</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>protected</modifier>
     <varname linkend="yaf-loader.props.global-library">_global_library</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>static</modifier>
     <varname linkend="yaf-loader.props.instance">_instance</varname>
    </fieldsynopsis>


    <classsynopsisinfo role="comment">&Methods;</classsynopsisinfo>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.yaf-loader')/db:refentry/db:refsect1[@role='description']/descendant::db:constructorsynopsis[not(@role='procedural')])" />
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.yaf-loader')/db:refentry/db:refsect1[@role='description']/descendant::db:methodsynopsis[1])" />
   </classsynopsis>
   <!-- }}} -->

  </section>


  <!-- {{{ Yaf_Loader properties -->
  <section xml:id="yaf-loader.props">
   &reftitle.properties;
   <variablelist>
    <varlistentry xml:id="yaf-loader.props.local-ns">
     <term><varname>_local_ns</varname></term>
     <listitem>
      <para></para>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="yaf-loader.props.library">
     <term><varname>_library</varname></term>
     <listitem>
      <para>
       Por omisión, este valor es <link
       linkend="configuration.yaf.directory">application.directory</link> . "/library",
       se puede cambiar en application.ini (application.library) o llamando al método
       <methodname>Yaf_Loader::setLibraryPath</methodname>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="yaf-loader.props.global-library">
     <term><varname>_global_library</varname></term>
     <listitem>
      <para></para>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="yaf-loader.props.instance">
     <term><varname>_instance</varname></term>
     <listitem>
      <para></para>
     </listitem>
    </varlistentry>
   </variablelist>
  </section>
  <!-- }}} -->


 </partintro>


 &reference.yaf.entities.yaf-loader;

</phpdoc:classref>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
