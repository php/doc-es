<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: ecaa2146429a7f88de40dfce14718afc896b74c5 Maintainer: argosback Status: ready -->
<!-- Reviewed: no Maintainer: andresdzphp -->

<refentry xml:id="yaf-route-regex.construct" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>Yaf_Route_Regex::__construct</refname>
  <refpurpose>Constructor de Yaf_Route_Regex</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <constructorsynopsis>
   <modifier>public</modifier> <methodname>Yaf_Route_Regex::__construct</methodname>
   <methodparam><type>string</type><parameter>match</parameter></methodparam>
   <methodparam><type>array</type><parameter>route</parameter></methodparam>
   <methodparam choice="opt"><type>array</type><parameter>map</parameter></methodparam>
   <methodparam choice="opt"><type>array</type><parameter>verify</parameter></methodparam>
   <methodparam choice="opt"><type>string</type><parameter>reverse</parameter></methodparam>
  </constructorsynopsis>
  <para>
  </para>

 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <variablelist>
   <varlistentry>
    <term><parameter>match</parameter></term>
    <listitem>
     <para>
      Un patrón de expresión regular completo, se usará para comparar un URI solicitado, si
      no coincide, <classname>Yaf_Route_Regex</classname> devolverá
      &false;.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>route</parameter></term>
    <listitem>
     <para>
      Cuando el patrón de comparación coincida con el URI solicitado,
      <classname>Yaf_Route_Regex</classname> lo usará para decidir qué
      m/c/a enrutar.
     </para>
     <para>
      m/c/a en este array son opcionales, si no se asigna un
      valor específico, será enrutada al valor predeterminado.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>map</parameter></term>
    <listitem>
     <para>
      Un array para asignar nombres a las capturas del resultado de comparación.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>reverse</parameter></term>
    <listitem>
     <para>
      una cadena, usado para ensamblar url, ver
      <methodname>Yaf_Route_Regex::assemble</methodname>.
      <note>
       <para>
       este parametro se introdujo en 2.3.0
       </para>
      </note>
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>verify</parameter></term>
    <listitem>
     <para>

     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>

  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title>Ejemplo de <function>Yaf_Route_Regex</function></title>
   <programlisting role="php">
<![CDATA[
<?php
   /**
    * Añade una ruta de expresión regular a la pila de enrutamiento de Yaf_Router
    */
    Yaf_Dispatcher::getInstance()->getRouter()->addRoute("name",
        new Yaf_Route_Regex(
           "#^/product/([^/]+)/([^/])+#", //comparar los URI solicitados que empiecen por "/product"
           array(
               'controller' => "product",  //ruta al controlador product,
           ),
           array(
              1 => "name",   // ahora se puede llamar a $request->getParam("name")
              2 => "id",     // para obtener la primera captura del patrón de comparación.
           )
        )
    );
?>
]]>
   </programlisting>
  </example>
  <example>
   <title>Ejemplo de <function>Yaf_Route_Regex(como en 2.3.0)</function></title>
   <programlisting role="php">
<![CDATA[
<?php
   /**
    * Usar el resultado de la busqueda como nombre MVC
    */
    Yaf_Dispatcher::getInstance()->getRouter()->addRoute("name",
        new Yaf_Route_Regex(
           "#^/product/([^/]+)/([^/])+#i", //buscar primera peticion uri "/product"
           array(
              'controller' => ":name", // ruta a :name, el cual es $1 en el resultado de busqueda como nombre de controllador
           ),
           array(
              1 => "name",   // ahora puede llamar a $request->getParam("name")
              2 => "id",     // para obtener la primera coincidencia en el patron de busqueda.
           )
        )
    );
?>
]]>
   </programlisting>
  </example>
    <example>
   <title>Ejemplo de <function>Yaf_Route_Regex y el nombre de la zona de captura (a partir de 2.3.0)</function></title>
   <programlisting role="php">
<![CDATA[
<?php
   /**
    * Usar el resultado de la coincidencia como nombre del MVC
    */
    Yaf_Dispatcher::getInstance()->getRouter()->addRoute("name",
        new Yaf_Route_Regex(
           "#^/product/(?<name>[^/]+)/([^/])+#i", //solicitud de coincidencia uri leading "/product"
           array(
           'controller' => ":name", // ruta a :name,
                                    // que se denomina "nombre" del grupo de captura en el resultado de la coincidencia como nombre del controlador
           ),
           array(
              2 => "id",     // para obtener la primera captura en el patrón de coincidencia.
           )
        )
    );
?>
]]>
   </programlisting>
  </example>
  <example>
   <title>Ejemplo de <function>Yaf_Route_Regex</function></title>
   <programlisting role="php">
<![CDATA[
<?php
   /**
    * Add a regex route to Yaf_Router route stack by calling addconfig
    */
    $config = array(
        "name" => array(
           "type"  => "regex",          //ruta Yaf_Route_Regex
           "match" => "#(.*)#",         //comparar URIs solicitados arbitrarios
           "route" => array(
               'controller' => "product",  //ruta al controlador product,
               'action'     => "dummy",    //ruta a una acción sin sentido
           ),
           "map" => array(
              1 => "uri",   // ahora se puede llamar a $request->getParam("uri")
           ),
        ),
    );
    Yaf_Dispatcher::getInstance()->getRouter()->addConfig(
        new Yaf_Config_Simple($config));
?>
]]>
   </programlisting>
  </example>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <simplelist>
   <member><methodname>Yaf_Router::addRoute</methodname></member>
   <member><methodname>Yaf_Router::addConfig</methodname></member>
   <member><classname>Yaf_Route_Static</classname></member>
   <member><classname>Yaf_Route_Supervar</classname></member>
   <member><classname>Yaf_Route_Simple</classname></member>
   <member><classname>Yaf_Route_Rewrite</classname></member>
   <member><classname>Yaf_Route_Map</classname></member>
  </simplelist>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
