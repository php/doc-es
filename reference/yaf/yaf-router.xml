<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: ecaa2146429a7f88de40dfce14718afc896b74c5 Maintainer: seros Status: ready -->
<!-- Reviewed: no Maintainer: andresdzphp -->

<phpdoc:classref xml:id="class.yaf-router" xmlns:phpdoc="http://php.net/ns/phpdoc" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude">

 <title>La clase Yaf_Router</title>
 <titleabbrev>Yaf_Router</titleabbrev>

 <partintro>

  <!-- {{{ Yaf_Router intro -->
  <section xml:id="yaf-router.intro">
   &reftitle.intro;
   <para>
    <classname>Yaf_Router</classname> es el enrutador estándar del framework. Enrutar es
    el proceso de tomar un extremo de un URI (la parte del URI que va
    antes del URL base: véase <methodname>Yaf_Request_Abstract::setBaseUri</methodname>)
    y descomponerlo en parámetros para determinar qué módulo, controlador, y
    acción de ese controlador deberían recibir la petición. Estos valores de módulo,
    controlador, acción y demás parámetros, son empaquetados en un
    objeto <classname>Yaf_Request_Abstract</classname> que es procesado por
    <classname>Yaf_Dispatcher</classname>. El enrutamiento sucede sólo una vez: cuando la petición
    es recibida inicialmente y antes de que el primer controlador sea despachado.

    La clase <classname>Yaf_Router</classname> está diseñada para tener en cuenta una funcionalidad parecida a la directiva
    mod_rewrite usando simples estructuras de PHP. Está basada indirectamente en el enrutamiento de
    Ruby on Rails y no requiere ningún conocimiento previo de la reescritura de URL del
    servidor web. Está diseñada para funcionar con una simple regla de la directiva mod_rewrite de Apache
    (una de):
    <example>
     <title>Regla de reescritura para Apache</title>
     <programlisting role="conf">
<![CDATA[
RewriteEngine on
RewriteRule !\.(js|ico|gif|jpg|png|css|html)$ index.php
]]>
     </programlisting>
    </example>
    o (preferible):
    <example>
     <title>Regla de reescritura para Apache</title>
     <programlisting role="conf">
<![CDATA[
RewriteEngine On
RewriteCond %{REQUEST_FILENAME} -s [OR]
RewriteCond %{REQUEST_FILENAME} -l [OR]
RewriteCond %{REQUEST_FILENAME} -d
RewriteRule ^.*$ - [NC,L]
RewriteRule ^.*$ index.php [NC,L]
]]>
     </programlisting>
    </example>
    Si se usa Lighttpd, la siguiente regla de reescritura es válida:
    <example>
     <title>Regla de reescritura para Lighttpd</title>
     <programlisting role="conf">
<![CDATA[
url.rewrite-once = (
  ".*\?(.*)$" => "/index.php?$1",
  ".*\.(js|ico|gif|jpg|png|css|html)$" => "$0",
  "" => "/index.php"
)
]]>
     </programlisting>
    </example>
    Si se usa Nginx, utilice la siguiente regla de reescritura:
    <example>
     <title>Regla de reescritura para Nginx</title>
     <programlisting role="conf">
<![CDATA[
server {
  listen ****;
  server_name  yourdomain.com;
  root   document_root;
  index  index.php index.html;

  if (!-e $request_filename) {
    rewrite ^/(.*)  /index.php/$1 last;
  }
}
]]>
     </programlisting>
    </example>
   </para>
  </section>
  <!-- }}} -->

  <section xml:id="yaf-router.default">
   <title>Enrutamiento predeterminado</title>
   <para>
    <classname>Yaf_Router</classname> comes viene preconfigurada con un enrutamiento
    <classname>Yaf_Route_Static</classname> predeterminado, el cual comparará URIs en la
    forma de controlador/acción. Además, se puede especificar un nombre de módulo como el
    primer elemento de la ruta, permitiendo URIs de la forma módulo/controlador/acción.
    Finalmente, también comparará cualquier parámetro adicional añadido al URI por omisión
    - controlador/acción/variable1/valor1/variable2/valor2.
    <note>
     <para>
      El nombre del módulo debe estar definido en la configuración, considerando application.module="Index,Foo,Bar",
      en este caso, solamente index, foo y bar pueden ser considerados como un nombre de módulo;
      si no está configurado, sólo existe un nombre de módulo llamado "Index".
     </para>
    </note>
   </para>

   <para>
    Algunos ejemplos de cómo tales enrutamientos son comparados:
    <example>
     <title>Ejemplo de <classname>Yaf_Route_Static</classname> (ruta predeterminada)</title>
     <programlisting role="conf">
<![CDATA[
// Se asume la siguiente configuración:
$conf = array(
   "application" => array(
      "modules" => "Index,Blog",
   ),
);

Solamente el controlador:
http://example/news
    controller == news
Solamente la acción (al definir yaf.action_prefer=1 en php.ini)
    action  == news

Un módulo inválido mapea el nombre del controlador:
http://example/foo
    controller == foo

Módulo + controlador:
http://example/blog/archive
    module     == blog
    controller == archive

Módulo + controlador + acción:
http://example/blog/archive/list
    module     == blog
    controller == archive
    action     == list

Módulo + controlador + acción + parámetros:
http://example/blog/archive/list/sort/alpha/date/desc
    module     == blog
    controller == archive
    action     == list
    sort       == alpha
    date       == desc
]]>
     </programlisting>
    </example>

   </para>
  </section>

  <section xml:id="yaf-router.synopsis">
   &reftitle.classsynopsis;

   <!-- {{{ Synopsis -->
   <classsynopsis>
    <ooclass><classname>Yaf_Router</classname></ooclass>

    <!-- {{{ Class synopsis -->
    <classsynopsisinfo>
     <ooclass>
      <classname>Yaf_Router</classname>
     </ooclass>
    </classsynopsisinfo>
    <!-- }}} -->
    <classsynopsisinfo role="comment">&Properties;</classsynopsisinfo>
    <fieldsynopsis>
     <modifier>protected</modifier>
     <varname linkend="yaf-router.props.routes">_routes</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>protected</modifier>
     <varname linkend="yaf-router.props.current">_current</varname>
    </fieldsynopsis>


    <classsynopsisinfo role="comment">&Methods;</classsynopsisinfo>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.yaf-router')/db:refentry/db:refsect1[@role='description']/descendant::db:constructorsynopsis[not(@role='procedural')])" />
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.yaf-router')/db:refentry/db:refsect1[@role='description']/descendant::db:methodsynopsis[1])" />
   </classsynopsis>
   <!-- }}} -->

  </section>


  <!-- {{{ Yaf_Router properties -->
  <section xml:id="yaf-router.props">
   &reftitle.properties;
   <variablelist>
    <varlistentry xml:id="yaf-router.props.routes">
     <term><varname>_routes</varname></term>
     <listitem>
      <para>
       Pila de rutas registradas
      </para>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="yaf-router.props.current">
     <term><varname>_current</varname></term>
     <listitem>
      <para>
       Después de la fase de enrutamiento, esto indica el nombre de la ruta
       a usar para enrutar la petición actual.

       Se puede obtener este nombre mediante
       <methodname>Yaf_Router::getCurrentRoute</methodname>.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </section>
  <!-- }}} -->


 </partintro>

 &reference.yaf.entities.yaf-router;

</phpdoc:classref>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
