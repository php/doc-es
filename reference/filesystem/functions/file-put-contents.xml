<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: ea62fb83196997032641b50fe44420305466195e Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: yes -->
<refentry xmlns="http://docbook.org/ns/docbook" xml:id="function.file-put-contents">
 <refnamediv>
  <refname>file_put_contents</refname>
  <refpurpose>Escribe datos en un fichero</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type class="union"><type>int</type><type>false</type></type><methodname>file_put_contents</methodname>
   <methodparam><type>string</type><parameter>filename</parameter></methodparam>
   <methodparam><type>mixed</type><parameter>data</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>flags</parameter><initializer>0</initializer></methodparam>
   <methodparam choice="opt"><type class="union"><type>resource</type><type>null</type></type><parameter>context</parameter><initializer>&null;</initializer></methodparam>
  </methodsynopsis>
  <para>
   Equivale a llamar a las funciones <function>fopen</function>,
   <function>fwrite</function> y <function>fclose</function>
   sucesivamente.
  </para>
  <para>
   Si el fichero <parameter>filename</parameter> no existe, será creado.
   De lo contrario, el fichero existente será sobrescrito, a menos que
   la opción <constant>FILE_APPEND</constant> esté definida.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>filename</parameter></term>
     <listitem>
      <para>
       Ruta de acceso al fichero en el que se deben escribir los datos.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>data</parameter></term>
     <listitem>
      <para>
       Los datos a escribir. Puede ser un string, un array o un recurso de flujo (explicación más abajo).
      </para>
      <para>
       Si <parameter>data</parameter> es un recurso de tipo <type>stream</type>,
       el buffer restante de este flujo será copiado al fichero especificado.
       Esto equivale a utilizar la función <function>stream_copy_to_stream</function>.
      </para>
      <para>
       Asimismo, puede especificarse el argumento <parameter>data</parameter>
       como un array de una sola dimensión. Esto equivale a
       <literal>file_put_contents($filename, implode('', $array))</literal>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>flags</parameter></term>
     <listitem>
      <para>
       El valor del argumento <parameter>flags</parameter> puede ser cualquier
       combinación de los siguientes flags, unidos por el operador OR binario
       (<literal>|</literal>).
      </para>
      <para>
       <table>
        <title>Flags disponibles</title>
        <tgroup cols="2">
         <thead>
          <row>
           <entry>Flag</entry>
           <entry>Descripción</entry>
          </row>
         </thead>
         <tbody>
          <row>
           <entry>
            <constant>FILE_USE_INCLUDE_PATH</constant>
           </entry>
           <entry>
            Busca el fichero <parameter>filename</parameter> en el directorio de inclusión.
            Ver <link linkend="ini.include-path">include_path</link>
            para más información.
           </entry>
          </row>
          <row>
           <entry>
            <constant>FILE_APPEND</constant>
           </entry>
           <entry>
            Si el fichero <parameter>filename</parameter> ya existe,
            esta opción permite añadir los datos al fichero en lugar de sobrescribirlo.
           </entry>
          </row>
          <row>
           <entry>
            <constant>LOCK_EX</constant>
           </entry>
           <entry>
            Adquiere un bloqueo exclusivo sobre el fichero durante la operación
            de escritura. En otras palabras, se realiza una llamada a la función
            <function>flock</function> entre la llamada a la función
            <function>fopen</function> y la llamada a la función
            <function>fwrite</function>. Este comportamiento no es idéntico a
            una llamada a la función <function>fopen</function> con el modo "x".
           </entry>
          </row>
         </tbody>
        </tgroup>
       </table>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>context</parameter></term>
     <listitem>
      <para>
       Un recurso de contexto válido creado con la función
       <function>stream_context_create</function>.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Devuelve el número de bytes que han sido escritos al fichero, o &false;
   si ocurre un error.
  </para>
  &return.falseproblem;
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Uso simple de file_put_contents</title>
    <programlisting role="php">
<![CDATA[
<?php
$file = 'people.txt';
// Abre un fichero para leer un contenido existente
$current = file_get_contents($file);
// Añade una persona
$current .= "Jean Dupond\n";
// Escribe el resultado en el fichero
file_put_contents($file, $current);
?>
]]>
    </programlisting>
   </example>
   <example>
    <title>Uso de opciones para file_put_contents</title>
    <programlisting role="php">
<![CDATA[
<?php
$file = 'people.txt';
// Una nueva persona a añadir
$person = "Jean Dupond\n";
// Escribe el contenido en el fichero, utilizando el flag
// FILE_APPEND para añadir al final del fichero y
// LOCK_EX para evitar que otros escriban en el fichero
// al mismo tiempo
file_put_contents($file, $person, FILE_APPEND | LOCK_EX);
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  &note.bin-safe;
  &tip.fopen-wrapper;
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>fopen</function></member>
    <member><function>fwrite</function></member>
    <member><function>file_get_contents</function></member>
    <member><function>stream_context_create</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
