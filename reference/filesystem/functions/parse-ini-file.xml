<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: a5346daf2bb2fab250fa03f0f6639a408d0b2240 Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: no -->
<refentry xml:id="function.parse-ini-file" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>parse_ini_file</refname>
  <refpurpose>Analiza un archivo de configuración</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type class="union"><type>array</type><type>false</type></type><methodname>parse_ini_file</methodname>
   <methodparam><type>string</type><parameter>filename</parameter></methodparam>
   <methodparam choice="opt"><type>bool</type><parameter>process_sections</parameter><initializer>&false;</initializer></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>scanner_mode</parameter><initializer><constant>INI_SCANNER_NORMAL</constant></initializer></methodparam>
  </methodsynopsis>
  <para>
   <function>parse_ini_file</function> carga el archivo
   <parameter>filename</parameter> y devuelve las
   configuraciones que contiene en forma de un array
   asociativo.
  </para>
  <para>
   La estructura de los archivos de configuración leídos es similar
   a la de &php.ini;.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>filename</parameter></term>
     <listitem>
      <para>
       El nombre del archivo de configuración a analizar. Si se utiliza una ruta relativa,
       se evalúa relativa a la carpeta actual, luego según el <link linkend="ini.include-path">include_path</link>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>process_sections</parameter></term>
     <listitem>
      <para>
       Al pasar el argumento <parameter>process_sections</parameter>
       a &true;, se obtendrá
       un array multidimensional con los nombres de las secciones.
       El valor por omisión de este argumento es &false;
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>scanner_mode</parameter></term>
     <listitem>
      <para>
       Puede ser <constant>INI_SCANNER_NORMAL</constant> (por omisión) o
       <constant>INI_SCANNER_RAW</constant>. Si se proporciona <constant>INI_SCANNER_RAW</constant>,
       entonces los valores en opción no serán analizados.
      </para>
      &ini.scanner.typed;
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   La configuración se devuelve en forma de un array asociativo
   en caso de éxito, y &false; si ocurre un error.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Contenido del archivo <filename>sample.ini</filename></title>
    <programlisting>
<![CDATA[
; Este es un archivo de configuración
; Los comentarios comienzan con ';', como en php.ini

[first_section]
one = 1
five = 5
animal = BIRD

[second_section]
path = "/usr/local/bin"
URL = "http://www.example.com/~username"

[third_section]
phpversion[] = "5.0"
phpversion[] = "5.1"
phpversion[] = "5.2"
phpversion[] = "5.3"

urls[svn] = "http://svn.php.net"
urls[git] = "http://git.php.net"
]]>
    </programlisting>
   </example>
   <example>
    <title>Ejemplo con <function>parse_ini_file</function></title>
    <para>
     Las <link linkend="language.constants">constantes</link> (pero no las
     "constantes mágicas" como <constant>__FILE__</constant>) también
     pueden ser utilizadas en el archivo .ini, por lo que si se define
     una constante antes de ejecutar <function>parse_ini_file</function>, será
     integrada en los resultados. Solo se evalúan los valores de configuración,
     y el valor debe ser simplemente la constante. Por ejemplo:
    </para>
    <programlisting role="php">
<![CDATA[
<?php

define('BIRD', 'Dodo bird');

// Análisis sin secciones
$ini_array = parse_ini_file("sample.ini");
print_r($ini_array);

// Análisis con secciones
$ini_array = parse_ini_file("sample.ini", true);
print_r($ini_array);

?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
Array
(
    [one] => 1
    [five] => 5
    [animal] => Dodo bird
    [path] => /usr/local/bin
    [URL] => http://www.example.com/~username
    [phpversion] => Array
        (
            [0] => 5.0
            [1] => 5.1
            [2] => 5.2
            [3] => 5.3
        )

    [urls] => Array
        (
            [svn] => http://svn.php.net
            [git] => http://git.php.net
        )

)
Array
(
    [first_section] => Array
        (
            [one] => 1
            [five] => 5
            [animal] => Dodo bird
        )

    [second_section] => Array
        (
            [path] => /usr/local/bin
            [URL] => http://www.example.com/~username
        )

    [third_section] => Array
        (
            [phpversion] => Array
                (
                    [0] => 5.0
                    [1] => 5.1
                    [2] => 5.2
                    [3] => 5.3
                )
            [urls] => Array
                (
                    [svn] => http://svn.php.net
                    [git] => http://git.php.net
                )

)
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title><function>parse_ini_file</function> para analizar un archivo php.ini</title>
    <programlisting role="php">
<![CDATA[
<?php
// Una función simple para comparar los resultados a continuación
function yesno($expression)
{
    return($expression ? 'Yes' : 'No');
}

// Lee la ruta del php.ini utilizando php_ini_loaded_file()
$ini_path = php_ini_loaded_file();

// Análisis de php.ini
$ini = parse_ini_file($ini_path);

// Visualización y comparativo de los valores. Observe que get_cfg_var()
// dará los mismos resultados entre los resultados analizados y cargados
echo '(analizado) magic_quotes_gpc = ' . yesno($ini['magic_quotes_gpc']) . PHP_EOL;
echo '(cargado ) magic_quotes_gpc = ' . yesno(get_cfg_var('magic_quotes_gpc')) . PHP_EOL;
?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
(analizado) magic_quotes_gpc = Yes
(cargado ) magic_quotes_gpc = Yes
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title>Interpolación de Valor</title>
    <para>
     Además de evaluar las constantes, ciertos caracteres tienen un significado
     particular en un valor ini.
     Adicionalmente, las variables de entorno y opciones de configuración
     definidas previamente (ver <function>get_cfg_var</function>) pueden ser
     leídas utilizando la sintaxis <code>${}</code>.
    </para>
    <programlisting>
<![CDATA[
; | se utiliza para OR a nivel de bits
three = 2|3

; & se utiliza para AND a nivel de bits
four = 6&5

; ^ se utiliza para XOR a nivel de bits
five = 3^6

; ~ se utiliza para negación a nivel de bits
negative_two = ~1

; () se utiliza para agrupación
seven = (8|7)&(6|5)

; Interpolar la variable de entorno PATH
path = ${PATH}

; Interpolar la opción de configuración 'memory_limit'
configured_memory_limit = ${memory_limit}
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title>Escapar Caracteres</title>
    <para>
     Ciertos caracteres tienen un significado particular en las cadenas entre comillas dobles y deben
     ser escapados prefijándolos con un antislash.
     Primero, son las comillas dobles <code>"</code> como marcador de frontera,
     y el antislash <code>\</code> mismo (si está seguido de uno de los caracteres especiales):
    </para>
    <programlisting>
<![CDATA[
quoted = "She said \"Exactly my point\"." ; Resultados en una cadena con marcas de comillas en ella.
hint = "Use \\\" to escape double quote" ; Resultados en: Use \" to escape double quote
]]>
    </programlisting>
    <para>
     Hay una excepción para las rutas estilo Windows: es posible no escapar
     el antislash final si la cadena citada es seguida directamente por un retorno de línea:
    </para>
    <programlisting>
<![CDATA[
save_path = "C:\Temp\"
]]>
    </programlisting>
    <para>
     Si se debe escapar una comilla doble seguida de un retorno de línea en un
     valor multilínea, es posible utilizar la concatenación de valor de la siguiente manera
     (hay una cadena de comillas dobles seguida directamente de otra):
    </para>
    <programlisting>
<![CDATA[
long_text = "Lorem \"ipsum\"""
 dolor" ; Resultados en: Lorem "ipsum"\n dolor
]]>
    </programlisting>
    <para>
     Otro carácter con un significado particular es <code>$</code> (el signo de dólar).
     Debe ser escapado si está seguido de una llave abierta:
    </para>
    <programlisting>
<![CDATA[
code = "\${test}"
]]>
    </programlisting>
    <para>
     El escape de caracteres no es soportado en el modo <constant>INI_SCANNER_RAW</constant>
     (en este modo todos los caracteres son tratados "tal cual").
    </para>
    <para>
     Es de notar que el analizador INI no soporta las secuencias de escape estándar
     (<code>\n</code>, <code>\t</code>, etc.).
     Si es necesario, el resultado de <function>parse_ini_file</function> debe
     ser post-procesado con la función <function>stripcslashes</function>.
    </para>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <note>
   <para>
    Esta función no tiene nada que ver con el archivo
    &php.ini;. Este último ya ha sido procesado cuando
    se comienza a ejecutar el script. Esta función
    puede permitir leer sus propios archivos de configuración.
   </para>
  </note>
  <note>
   <para>
    Si un valor del archivo ini contiene
    datos no-alfanuméricos, debe ser protegido colocándolo
    entre comillas dobles (").
   </para>
  </note>
  <note>
   <simpara>
    Existen palabras reservadas que no deben ser utilizadas como claves
    en los archivos ini. Esto incluye: <literal>null</literal>,
    <literal>yes</literal>, <literal>no</literal>, <literal>true</literal>,
    <literal>false</literal>, <literal>on</literal> y <literal>off</literal>.
    Los valores <literal>null</literal>, <literal>off</literal>, <literal>no</literal>
    y <literal>false</literal> dan "" (cadena vacía). Los valores
    <literal>on</literal>, <literal>yes</literal> y
    <literal>true</literal> dan "1", a menos que se utilice el modo
    <constant>INI_SCANNER_TYPED</constant>.
    Los caracteres <literal>?{}|&amp;~!()^"</literal> no deben ser utilizados
    en ninguna parte de la clave y tienen un significado especial en el valor.
   </simpara>
  </note>
  <note>
   <para>
    Las entradas sin un signo igual serán ignoradas. Por ejemplo, "foo"
    será ignorado mientras que "bar =" será analizado y añadido con un valor vacío.
    Por ejemplo, MySQL tiene una opción de configuración "no-auto-rehash" en
    el archivo <filename>my.cnf</filename> que no toma valor, por lo tanto,
    será ignorada.
   </para>
  </note>
  <note>
   <para>
    Los archivos ini son generalmente tratados como archivos de texto sin formato
    por los servidores web, y por lo tanto enviados al navegador si se solicita. Esto significa
    que para la seguridad, los archivos ini deben ser almacenados fuera
    de la raíz docroot, o reconfigurar el servidor web para no servirlos.
    El fracaso de realizar una de estas medidas puede introducir un riesgo de seguridad.
   </para>
  </note>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>parse_ini_string</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
