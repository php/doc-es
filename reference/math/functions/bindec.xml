<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 86e6094e86b84a51d00ab217ac50ce8dde33d82a Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: no -->

<refentry xml:id="function.bindec" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>bindec</refname>
  <refpurpose>Convierte de binario a decimal</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
   <methodsynopsis>
    <type class="union"><type>int</type><type>float</type></type><methodname>bindec</methodname>
    <methodparam><type>string</type><parameter>binary_string</parameter></methodparam>
   </methodsynopsis>
  <para>
   Devuelve la conversión de un número binario representado por la cadena
   <parameter>binary_string</parameter> a decimal.
  </para>
  <para>
   <function>bindec</function> convierte un número binario en un &integer;,
   o, si es necesario por razones de tamaño, en un &float;.
  </para>
  <para>
   <function>bindec</function> interpreta todos los valores
   <parameter>binary_string</parameter> como enteros no firmados.
   Esto se debe a que la función <function>bindec</function> ve
   el primer bit como otro orden de magnitud en lugar de como el
   bit de signo.
  </para>
 </refsect1>
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>binary_string</parameter></term>
     <listitem>
      <para>
       La cadena binaria a convertir.
       Cualquier carácter inválido en <parameter>binary_string</parameter>
       es ignorado silenciosamente.
       A partir de PHP 7.4.0, proporcionar caracteres inválidos está deprecado.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
  <warning>
   <para>
    Este parámetro debe ser un &string;.
    El uso de otro tipo de datos produce resultados inesperados.
   </para>
  </warning>
 </refsect1>
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   El valor decimal de <parameter>binary_string</parameter>
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <informaltable>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>&Version;</entry>
      <entry>&Description;</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>7.4.0</entry>
      <entry>
       Proporcionar caracteres inválidos generará ahora una advertencia deprecada.
       El resultado se calculará siempre como si los caracteres inválidos
       no existieran.
      </entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Ejemplo con <function>bindec</function></title>
    <programlisting role="php">
<![CDATA[
<?php
echo bindec('110011') . "\n";
echo bindec('000110011') . "\n";

echo bindec('111');
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
51
51
7
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title><function>bindec</function> interpreta la entrada
     como un entero no firmado</title>
    <programlisting role="php">
<![CDATA[
<?php
/*
 * Lo más importante en este ejemplo está en la salida
 * más que en el código PHP en sí.
 */

$magnitude_lower = pow(2, (PHP_INT_SIZE * 8) - 2);
p($magnitude_lower - 1);
p($magnitude_lower, '¿Ha visto el cambio? Esté atento la próxima vez...');

p(PHP_INT_MAX, 'PHP_INT_MAX');
p(~PHP_INT_MAX, 'interpretado como superior a PHP_INT_MAX');

if (PHP_INT_SIZE == 4) {
    $note = 'interpretado como el mayor entero no firmado';
} else {
    $note = 'interpretado como el mayor entero no firmado
              (18446744073709551615) pero distorsionado por la precisión de los flotantes';
}
p(-1, $note);

function p($input, $note = '') {
    echo "entrada :        $input\n";

    $format = '%0' . (PHP_INT_SIZE * 8) . 'b';
    $bin = sprintf($format, $input);
    echo "binario :       $bin\n";

    ini_set('precision', 20);  // Para mayor legibilidad en PC de 64 bits.
    $dec = bindec($bin);
    echo 'bindec() :     ' . $dec . "\n";

    if ($note) {
        echo "Nota :         $note\n";
    }

    echo "\n";
}
?>
]]>
    </programlisting>
    &example.outputs.32bit;
    <screen>
<![CDATA[
entrada :        1073741823
binario :       00111111111111111111111111111111
bindec() :     1073741823

entrada :        1073741824
binario :       01000000000000000000000000000000
bindec():     1073741824
Nota :         ¿Ha visto el cambio? Esté atento la próxima vez...

entrada :        2147483647
binario :       01111111111111111111111111111111
bindec():     2147483647
Nota :         PHP_INT_MAX

entrada :        -2147483648
binario :       10000000000000000000000000000000
bindec():     2147483648
Nota :         interpretado como superior a PHP_INT_MAX

entrada :        -1
binario :       11111111111111111111111111111111
bindec():     4294967295
Nota :         interpretado como el mayor entero no firmado
]]>
    </screen>
    &example.outputs.64bit;
    <screen>
<![CDATA[
entrada :        4611686018427387903
binario :       0011111111111111111111111111111111111111111111111111111111111111
bindec() :     4611686018427387903

entrada :        4611686018427387904
binario :       0100000000000000000000000000000000000000000000000000000000000000
bindec() :     4611686018427387904
Nota :         ¿Ha visto el cambio? Esté atento la próxima vez...

entrada :        9223372036854775807
binario :       0111111111111111111111111111111111111111111111111111111111111111
bindec() :     9223372036854775807
Nota :         PHP_INT_MAX

entrada :        -9223372036854775808
binario :       1000000000000000000000000000000000000000000000000000000000000000
bindec() :     9223372036854775808
Nota :         interpretado como superior a PHP_INT_MAX

entrada :        -1
binario :       1111111111111111111111111111111111111111111111111111111111111111
bindec() :     18446744073709551616
Nota :         interpretado como el mayor entero no firmado
              (18446744073709551615) pero distorsionado por la precisión de los flotantes
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <note>
   <para>
    La función puede convertir números que son demasiado grandes para
    caber en un tipo &integer;, en cuyo caso estos valores se devuelven
    como &float;.
   </para>
  </note>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>decbin</function></member>
    <member><function>octdec</function></member>
    <member><function>hexdec</function></member>
    <member><function>base_convert</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
