<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 1976eae0d815797af97a1e16c5cd90ffc2868395 Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: no -->
<refentry xml:id="collator.asort" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>Collator::asort</refname>
  <refname>collator_asort</refname>
  <refpurpose>Ordena un array manteniendo las claves, con una collation</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <para>
   &style.oop;
  </para>
  <methodsynopsis role="Collator">
   <modifier>public</modifier> <type>bool</type><methodname>Collator::asort</methodname>
   <methodparam><type>array</type><parameter role="reference">array</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>flags</parameter><initializer>Collator::SORT_REGULAR</initializer></methodparam>
  </methodsynopsis>
  <para>
   &style.procedural;
  </para>
  <methodsynopsis>
   <type>bool</type><methodname>collator_asort</methodname>
   <methodparam><type>Collator</type><parameter>object</parameter></methodparam>
   <methodparam><type>array</type><parameter role="reference">array</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>flags</parameter><initializer>Collator::SORT_REGULAR</initializer></methodparam>
  </methodsynopsis>
  <para>
   Esta función ordena un array manteniendo la asociación entre las
   claves y los valores. Se utiliza principalmente para ordenar arrays asociativos,
   donde el orden de los elementos es importante. Los elementos serán ordenados según
   las convenciones locales.
  </para>
  <para>
   Equivalente a la función estándar de PHP <function>asort</function>.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>object</parameter></term>
     <listitem>
      <para>
       Objeto <classname>Collator</classname>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>array</parameter></term>
     <listitem>
      <para>Array de strings a ordenar.</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>flags</parameter></term>
     <listitem>
      <para>
       Tipo de ordenación, opcional, seleccionado entre las siguientes constantes:
      </para>
      <para>
       <itemizedlist>
        <listitem>
         <para>
          <constant>Collator::SORT_REGULAR</constant>
          : compara los elementos normalmente (sin cambio de tipo).
         </para>
        </listitem>
        <listitem>
         <para>
          <constant>Collator::SORT_NUMERIC</constant>
          : compara los elementos numéricamente.
         </para>
        </listitem>
        <listitem>
         <para>
          <constant>Collator::SORT_STRING</constant>
          : compara los elementos literalmente.
         </para>
        </listitem>
       </itemizedlist>
       El valor por omisión de <parameter>flags</parameter> es <constant>Collator::SORT_REGULAR</constant>.
       Este valor también se utiliza si se ha proporcionado un valor inválido de
       <parameter>flags</parameter>.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.success;
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Ejemplo con <function>collator_asort</function></title>
    <programlisting role="php">
<![CDATA[
<?php
$coll = collator_create( 'en_US' );
$arr = array(
     'a' => '100',
     'b' => '50',
     'c' => '7'
);
collator_asort( $coll, $arr, Collator::SORT_NUMERIC );
var_export( $arr );

collator_asort( $coll, $arr, Collator::SORT_STRING );
var_export( $arr );
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
array (
  'c' => '7',
  'b' => '50',
  'a' => '100',
)array (
  'a' => '100',
  'b' => '50',
  'c' => '7',
)
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member>Constantes <link linkend="intl.collator-constants"><classname>Collator</classname></link></member>
    <member><function>collator_sort</function></member>
    <member><function>collator_sort_with_sort_keys</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>
<!-- Keep this comment at the end of the file
 Local variables:
 mode: sgml
 sgml-omittag:t
 sgml-shorttag:t
 sgml-minimize-attributes:nil
 sgml-always-quote-attributes:t
 sgml-indent-step:1
 sgml-indent-data:t
 indent-tabs-mode:nil
 sgml-parent-document:nil
 sgml-default-dtd-file:"~/.phpdoc/manual.ced"
 sgml-exposed-tags:nil
 sgml-local-catalogs:nil
 sgml-local-ecat-files:nil
 End:
 vim600: syn=xml fen fdm=syntax fdl=2 si
 vim: et tw=78 syn=sgml
 vi: ts=1 sw=1
-->
