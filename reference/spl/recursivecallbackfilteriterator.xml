<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 14767af0f05dffa6fdb9b49e1a1f4e9ca7022a60 Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: no -->
<reference xml:id="class.recursivecallbackfilteriterator" role="class" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude">

 <title>La clase RecursiveCallbackFilterIterator</title>
 <titleabbrev>RecursiveCallbackFilterIterator</titleabbrev>

 <partintro>

<!-- {{{ RecursiveCallbackFilterIterator intro -->
  <section xml:id="recursivecallbackfilteriterator.intro">
   &reftitle.intro;
   <para>

   </para>
  </section>
<!-- }}} -->

  <section xml:id="recursivecallbackfilteriterator.synopsis">
   &reftitle.classsynopsis;

<!-- {{{ Synopsis -->
   <classsynopsis class="class">
    <ooclass>
     <classname>RecursiveCallbackFilterIterator</classname>
    </ooclass>

    <ooclass>
     <modifier>extends</modifier>
     <classname>CallbackFilterIterator</classname>
    </ooclass>

    <oointerface>
     <modifier>implements</modifier>
     <interfacename>RecursiveIterator</interfacename>
    </oointerface>

    <classsynopsisinfo role="comment">&Methods;</classsynopsisinfo>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.recursivecallbackfilteriterator')/db:refentry/db:refsect1[@role='description']/descendant::db:constructorsynopsis[@role='RecursiveCallbackFilterIterator'])">
     <xi:fallback/>
    </xi:include>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.recursivecallbackfilteriterator')/db:refentry/db:refsect1[@role='description']/descendant::db:methodsynopsis[@role='RecursiveCallbackFilterIterator'])">
     <xi:fallback/>
    </xi:include>

    <classsynopsisinfo role="comment">&InheritedMethods;</classsynopsisinfo>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.callbackfilteriterator')/db:refentry/db:refsect1[@role='description']/descendant::db:methodsynopsis[@role='CallbackFilterIterator'])">
     <xi:fallback/>
    </xi:include>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.filteriterator')/db:refentry/db:refsect1[@role='description']/descendant::db:methodsynopsis[@role='FilterIterator'])">
     <xi:fallback/>
    </xi:include>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.iteratoriterator')/db:refentry/db:refsect1[@role='description']/descendant::db:methodsynopsis[@role='IteratorIterator'])">
     <xi:fallback/>
    </xi:include>
   </classsynopsis>
<!-- }}} -->

  </section>

  <!-- {{{ examples -->
  <section xml:id="recursivecallbackfilteriterator.examples">
   &reftitle.examples;
   <para>
    La función de devolución de llamada debe aceptar hasta 3 argumentos:
    el elemento actual, la clave actual, y el iterador actual,
    respectivamente.
   </para>
   <example xml:id="recursivecallbackfilteriterator.examples.args">
    <title>Argumentos disponibles para la función de devolución de llamada</title>
    <programlisting role="php">
<![CDATA[
<?php

/**
 * Función de devolución de llamada para RecursiveCallbackFilterIterator
 *
 * @param $current   El valor del elemento actual
 * @param $key       La clave del elemento actual
 * @param $iterator  Iterador a filtrar
 * @return boolean   TRUE para aceptar el elemento actual, FALSE en caso contrario
 */
function my_callback($current, $key, $iterator) {
    // Su filtro aquí
}

?>
]]>
    </programlisting>
   </example>
   <para>
    El filtrado de un iterador recursivo implica generalmente 2 condiciones.
    La primera es que, para permitir la recursión, la función
    de devolución de llamada debe devolver &true; si el elemento del iterador actual
    tiene un hijo. La segunda es una condición de filtrado normal, como
    la verificación del tamaño de fichero o la verificación de la extensión
    como en el ejemplo siguiente.
   </para>
   <example xml:id="recursivecallbackfilteriterator.examples.basic">
    <title>Ejemplo simple de una función de devolución de llamada recursiva</title>
<programlisting role="php">
<![CDATA[
<?php

$dir = new RecursiveDirectoryIterator(__DIR__);

// Filtro de ficheros grandes ( > 100MB)
$files = new RecursiveCallbackFilterIterator($dir, function ($current, $key, $iterator) {
    // Permite la recursión
    if ($iterator->hasChildren()) {
        return TRUE;
    }
    // Verifica ficheros grandes
    if ($current->isFile() && $current->getSize() > 104857600) {
        return TRUE;
    }
    return FALSE;
});

foreach (new RecursiveIteratorIterator($files) as $file) {
    echo $file->getPathname() . PHP_EOL;
}

?>
]]>
    </programlisting>
   </example>
  </section>
  <!-- }}} -->

 </partintro>

 &reference.spl.entities.recursivecallbackfilteriterator;

</reference>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
