<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: d6f54016d62904cfd8200604aadd5e3f0d9bad97 Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: no -->
<refentry xml:id="function.preg-replace" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>preg_replace</refname>
  <refpurpose>Buscar y reemplazar mediante expresión regular estándar</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type class="union"><type>string</type><type>array</type><type>null</type></type><methodname>preg_replace</methodname>
   <methodparam><type class="union"><type>string</type><type>array</type></type><parameter>pattern</parameter></methodparam>
   <methodparam><type class="union"><type>string</type><type>array</type></type><parameter>replacement</parameter></methodparam>
   <methodparam><type class="union"><type>string</type><type>array</type></type><parameter>subject</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>limit</parameter><initializer>-1</initializer></methodparam>
   <methodparam choice="opt"><type>int</type><parameter role="reference">count</parameter><initializer>&null;</initializer></methodparam>
  </methodsynopsis>
  <para>
   Analiza <parameter>subject</parameter> para encontrar la expresión
   regular <parameter>pattern</parameter> y reemplaza los
   resultados por <parameter>replacement</parameter>.
  </para>
  <para>
   Para hacer coincidir una cadena exacta, en lugar de una expresión regular,
   se recomienda el uso de <function>str_replace</function> o <function>str_ireplace</function>
   en lugar de esta función.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>pattern</parameter></term>
     <listitem>
      <para>
       El patrón a buscar. Puede ser una cadena o un array de cadenas.
      </para>
      <para>
       También están disponibles varios <link linkend="reference.pcre.pattern.modifiers">modificadores PCRE</link>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>replacement</parameter></term>
     <listitem>
      <para>
       La cadena o un array de cadenas para el reemplazo.
       Si este parámetro es una cadena y el parámetro <parameter>pattern</parameter>
       es un array, todos los patrones serán reemplazados por esta cadena.
       Si los parámetros <parameter>pattern</parameter> y
       <parameter>replacement</parameter> son arrays, cada
       <parameter>pattern</parameter> será reemplazado por su
       <parameter>replacement</parameter> asociado.
       Si <parameter>replacement</parameter> tiene menos elementos
       que <parameter>pattern</parameter>, entonces una cadena vacía es
       utilizada para el resto de los valores.
      </para>
      <para>
       <parameter>replacement</parameter> puede contener referencias
       de la forma <literal>\<replaceable>n</replaceable></literal> o
       <literal>$<replaceable>n</replaceable></literal>.
       Esta última forma es recomendada. Estas referencias serán reemplazadas
       por el texto capturado por la <replaceable>n</replaceable>-ésima parentesis
       capturante del patrón. <replaceable>n</replaceable> puede tomar valores de
       0 a 99, y <literal>\0</literal> o <literal>$0</literal>, corresponden al texto que
       satisface el patrón completo. Los paréntesis abiertos son contados de izquierda a derecha (empezando por 1) para
       determinar el número de paréntesis capturante.
       Es de notar que en los &string; literales los antislashs deben
       ser escapados.
      </para>
      <para>
       Cuando se trabaja con un patrón de reemplazo donde una referencia hacia atrás
       es seguida directamente por un número (i.e.: colocar un número literal inmediatamente
       después de una referencia hacia atrás), no se puede usar la sintaxis clásica
       <literal>\1</literal> para la referencia hacia atrás. <literal>\11</literal>, por ejemplo,
       será confuso para la función <function>preg_replace</function> en el sentido de que
       no sabrá si se desea la referencia hacia atrás <literal>\1</literal> seguida del número
       &one; o si se desea la referencia hacia atrás <literal>\11</literal>
       seguida de "nada". En este caso, la solución es usar la sintaxis <literal>${1}1</literal>.
       Esto creará una referencia hacia atrás aislada <literal>$1</literal>, seguida del número
       literal &one;.
      </para>
      <para>
       Cuando se usa la opción obsoleta <literal>e</literal>, esta función
       escapa algunos caracteres (<literal>'</literal>, <literal>"</literal>,
       <literal>\</literal> y NULL) en la cadena que reemplaza las referencias hacia atrás.
       Este comportamiento se justifica para asegurar que no ocurra ningún error de sintaxis
       al usar las referencias hacia atrás con comillas simples y dobles (e.g. <literal>'strlen(\'$1\')+strlen("$2")'</literal>).
       Asegúrese de estar familiarizado con la <link linkend="language.types.string">sintaxis
       de las cadenas</link> para saber exactamente a qué debe parecerse la cadena interpretada.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>subject</parameter></term>
     <listitem>
      <para>
       La cadena o el array que contiene las cadenas a buscar y reemplazar.
      </para>
      <para>
       Si <parameter>subject</parameter> es un array, entonces la operación
       será aplicada a cada uno de los elementos del array, y el array será devuelto.
      </para>
      <para>
       Si el array <parameter>subject</parameter> es asociativo, entonces las claves
       serán preservadas en el valor devuelto.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>limit</parameter></term>
     <listitem>
      <para>
       El número máximo de reemplazos para cada patrón en
       cada cadena <parameter>subject</parameter>. Por omisión, vale
       <literal>-1</literal> (sin límite).
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>count</parameter></term>
     <listitem>
      <para>
       Si se proporciona, esta variable contendrá el número de reemplazos realizados.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   <function>preg_replace</function> devuelve un array si el parámetro
   <parameter>subject</parameter> es un array, o una cadena en caso contrario.
  </para>
  <para>
   Si se encuentran coincidencias, el nuevo
   <parameter>subject</parameter> será devuelto, de lo contrario
   <parameter>subject</parameter> será devuelto sin cambios, o &null;
   si ocurre un error.
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   Utilizar la opción "\e" es un error; se emite una <constant>E_WARNING</constant>
   en este caso.
  </para>
  &pcre.pattern.warning;
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Uso de referencias hacia atrás con literales numéricos</title>
    <programlisting role="php">
<![CDATA[
<?php
$string = 'April 15, 2003';
$pattern = '/(\w+) (\d+), (\d+)/i';
$replacement = '${1}1,$3';
echo preg_replace($pattern, $replacement, $string);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
April1,2003
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title>Uso de arrays indexados con <function>preg_replace</function></title>
    <programlisting role="php">
<![CDATA[
<?php
$string = 'Le renard marron agile saute par dessus le chien paresseux.';
$patterns = array();
$patterns[0] = '/agile/';
$patterns[1] = '/marron/';
$patterns[2] = '/renard/';
$replacements = array();
$replacements[2] = 'grizzly';
$replacements[1] = 'brun';
$replacements[0] = 'lent';
echo preg_replace($patterns, $replacements, $string);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Le lent brun grizzly saute par dessus le chien paresseux.
]]>
    </screen>
    <para>
     Ordenando los patrones y los reemplazos, se debería obtener el resultado esperado.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
$string = 'Le renard marron agile saute par dessus le chien paresseux.';
$patterns = array();
$patterns[0] = '/agile/';
$patterns[1] = '/marron/';
$patterns[2] = '/renard/';
$replacements = array();
$replacements[2] = 'grizzly';
$replacements[1] = 'brun';
$replacements[0] = 'lent';
ksort($patterns);
ksort($replacements);
echo preg_replace($patterns, $replacements, $string);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Le grizzly brun lent saute par dessus le chien paresseux.
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title>Reemplazo de múltiples valores simultáneamente</title>
    <programlisting role="php">
<![CDATA[
<?php
$patterns = array ('/(19|20)(\d{2})-(\d{1,2})-(\d{1,2})/',
                   '/^\s*{(\w+)}\s*=/');
$replace = array ('\3/\4/\1\2', '$\1 =');
echo preg_replace($patterns, $replace, '{startDate} = 1999-5-27');
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
$startDate = 5/27/1999
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title>Eliminación de espacios</title>
    <para>
     Este ejemplo elimina los espacios en exceso en una cadena.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
$str = 'foo   o';
$str = preg_replace('/\s\s+/', ' ', $str);
// Mostrará 'foo o'
echo $str;
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title>Uso del parámetro <parameter>count</parameter></title>
    <programlisting role="php">
<![CDATA[
<?php
$count = 0;

echo preg_replace(array('/\d/', '/\s/'), '*', 'xp 4 to', -1 , $count);
echo $count; //3
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
xp***to
3
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <note>
   <para>
    Cuando se usan arrays con los parámetros
    <parameter>pattern</parameter> y
    <parameter>replacement</parameter>, las claves son tratadas
    en el orden en que aparecen en el array.
    Esto <emphasis>no es necesariamente</emphasis> lo mismo que
    el orden de los índices numéricos. Si se usan índices para
    identificar qué <parameter>pattern</parameter> debe ser
    reemplazado por qué <parameter>replacement</parameter>, se
    recomienda hacer un ordenamiento <function>ksort</function> en cada
    array antes de llamar a <function>preg_replace</function>.
   </para>
  </note>
  <note>
   <para>
    Cuando <parameter>pattern</parameter> y <parameter>replacement</parameter>
    son arrays, las reglas de coincidencia funcionarán de
    manera secuencial. Es decir, la segunda pareja
    <parameter>pattern</parameter>/<parameter>replacement</parameter>
    operará sobre la cadena de caracteres que resulta de la primera pareja
    <parameter>pattern</parameter>/<parameter>replacement</parameter>,
    y no sobre la cadena original. Si se desea simular reemplazos
    funcionando en paralelo, como el intercambio de dos valores, reemplace un
    patrón por un sustituto intermedio, luego en una pareja posterior,
    reemplace este marcador intermedio por el reemplazo deseado.
   </para>
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
$p = array('/a/', '/b/', '/c/');
$r = array('b', 'c', 'd');
print_r(preg_replace($p, $r, 'a'));
// imprime d
?>
]]>
    </programlisting>
   </informalexample>
  </note>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><link linkend="pcre.pattern">Patrones PCRE</link></member>
    <member><function>preg_quote</function></member>
    <member><function>preg_filter</function></member>
    <member><function>preg_match</function></member>
    <member><function>preg_replace_callback</function></member>
    <member><function>preg_split</function></member>
    <member><function>preg_last_error</function></member>
    <member><function>str_replace</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
