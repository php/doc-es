<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: d6f54016d62904cfd8200604aadd5e3f0d9bad97 Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: no -->
<refentry xml:id="function.preg-match" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>preg_match</refname>
  <refpurpose>Realiza una búsqueda de coincidencia con una expresión regular estándar</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type class="union"><type>int</type><type>false</type></type><methodname>preg_match</methodname>
   <methodparam><type>string</type><parameter>pattern</parameter></methodparam>
   <methodparam><type>string</type><parameter>subject</parameter></methodparam>
   <methodparam choice="opt"><type>array</type><parameter role="reference">matches</parameter><initializer>&null;</initializer></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>flags</parameter><initializer>0</initializer></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>offset</parameter><initializer>0</initializer></methodparam>
  </methodsynopsis>
  <para>
   Analiza <parameter>subject</parameter> para encontrar la expresión que
   coincide con <parameter>pattern</parameter>.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>pattern</parameter></term>
     <listitem>
      <para>
       El patrón a buscar, en forma de &string;.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>subject</parameter></term>
     <listitem>
      <para>
       La cadena de entrada.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>matches</parameter></term>
     <listitem>
      <para>
       Si <parameter>matches</parameter> es proporcionado, será llenado con
       los resultados de la búsqueda. <varname>$matches[0]</varname> contendrá el
       texto que satisface el patrón completo, <varname>$matches[1]</varname> contendrá
       el texto que satisface la primera subexpresión capturante,
       etc.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>flags</parameter></term>
     <listitem>
      <para>
       El parámetro <parameter>flags</parameter> puede ser una combinación de los siguientes flags:
       <variablelist>
        <varlistentry>
         <term><constant>PREG_OFFSET_CAPTURE</constant></term>
         <listitem>
          <para>
           Si esta opción está activada, todas las subcadenas que satisfacen
           el patrón también serán identificadas por su offset (en bytes). Tenga en cuenta que esto
           modifica el valor de <parameter>matches</parameter> que se convierte en
           un array donde cada elemento es un array que contiene la cadena
           que coincide con el patrón en el offset <literal>0</literal> así
           como el offset de la cadena en <parameter>subject</parameter>
           en el offset <literal>1</literal>.
           <informalexample>
            <programlisting role="php">
<![CDATA[
<?php
preg_match('/(foo)(bar)(baz)/', 'foobarbaz', $matches, PREG_OFFSET_CAPTURE);
print_r($matches);
?>
]]>
            </programlisting>
            &example.outputs;
            <screen>
<![CDATA[
Array
(
    [0] => Array
        (
            [0] => foobarbaz
            [1] => 0
        )

    [1] => Array
        (
            [0] => foo
            [1] => 0
        )

    [2] => Array
        (
            [0] => bar
            [1] => 3
        )

    [3] => Array
        (
            [0] => baz
            [1] => 6
        )

)
]]>
            </screen>
           </informalexample>
          </para>
         </listitem>
        </varlistentry>
        <varlistentry>
         <term><constant>PREG_UNMATCHED_AS_NULL</constant></term>
         <listitem>
          <para>
           Si este flag es pasado, los subpatrones no coincidentes son reportados como &null;;
           de lo contrario son reportados como &string; vacío.
           <informalexample>
            <programlisting role="php">
<![CDATA[
<?php
preg_match('/(a)(b)*(c)/', 'ac', $matches);
var_dump($matches);
preg_match('/(a)(b)*(c)/', 'ac', $matches, PREG_UNMATCHED_AS_NULL);
var_dump($matches);
?>
]]>
            </programlisting>
            &example.outputs;
            <screen>
<![CDATA[
array(4) {
  [0]=>
  string(2) "ac"
  [1]=>
  string(1) "a"
  [2]=>
  string(0) ""
  [3]=>
  string(1) "c"
}
array(4) {
  [0]=>
  string(2) "ac"
  [1]=>
  string(1) "a"
  [2]=>
  NULL
  [3]=>
  string(1) "c"
}
]]>
            </screen>
           </informalexample>
          </para>
         </listitem>
        </varlistentry>
       </variablelist>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>offset</parameter></term>
     <listitem>
      <para>
       Normalmente, la búsqueda comienza al inicio de la cadena
       <parameter>subject</parameter>. El parámetro opcional
       <parameter>offset</parameter> puede ser utilizado para especificar
       una posición para el inicio de la búsqueda (en bytes).
      </para>
      <note>
       <para>
        Utilizar el parámetro <parameter>offset</parameter> no es equivalente
        a pasar <code>substr($subject, $offset)</code> a
        <function>preg_match_all</function> en lugar de la cadena
        <parameter>subject</parameter>, ya que
        <parameter>pattern</parameter> puede contener aserciones como
        <emphasis>^</emphasis>, <emphasis>$</emphasis> o
        <emphasis>(?&lt;=x)</emphasis>.
        Compare:
        <informalexample>
         <programlisting role="php">
<![CDATA[
<?php
$subject = "abcdef";
$pattern = '/^def/';
preg_match($pattern, $subject, $matches, PREG_OFFSET_CAPTURE, 3);
print_r($matches);
?>
]]>
         </programlisting>
         &example.outputs;
         <screen>
<![CDATA[
Array
(
)
]]>
         </screen>
         <para>
          con este ejemplo:
         </para>
         <programlisting role="php">
<![CDATA[
<?php
$subject = "abcdef";
$pattern = '/^def/';
preg_match($pattern, substr($subject,3), $matches, PREG_OFFSET_CAPTURE);
print_r($matches);
?>
]]>
         </programlisting>
         <para>
          producirá:
         </para>
         <screen>
<![CDATA[
Array
(
    [0] => Array
        (
            [0] => def
            [1] => 0
        )

)
]]>
         </screen>
         <para>
          Por lo tanto, para evitar el uso de <function>substr</function>, utilizar
          la aserción <literal>\G</literal> en lugar del ancla <literal>^</literal>, o
          el modificador <literal>A</literal>, ambos funcionan con el parámetro <parameter>offset</parameter>.
         </para>
        </informalexample>
       </para>
      </note>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   <function>preg_match</function> devuelve 1 si el <parameter>pattern</parameter>
   proporcionado coincide, 0 si no coincide,&return.falseforfailure;.
  </para>
  &return.falseproblem;
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  &pcre.pattern.warning;
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>7.2.0</entry>
       <entry>
        <constant>PREG_UNMATCHED_AS_NULL</constant> ahora es soportado para el
        parámetro <parameter>$flags</parameter>.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Encontrar la cadena "php"</title>
    <programlisting role="php">
<![CDATA[
<?php
// El "i" después del delimitador del patrón indica que la búsqueda no será sensible a mayúsculas/minúsculas
if (preg_match("/php/i", "PHP es el mejor lenguaje de script del web.")) {
    echo "Se encontró un resultado.";
} else {
    echo "No se encontró ningún resultado.";
}
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title>Encontrar la palabra "web"</title>
    <programlisting role="php">
<![CDATA[
<?php
/* \b, en el patrón, indica un límite de palabra, de forma que la palabra
 "web" sea detectada, y no solo partes de palabras como
 en "webbing" o "cobweb" */
if (preg_match("/\bweb\b/i", "PHP es el mejor lenguaje de script del web.")) {
    echo "La palabra fue encontrada.";
} else {
    echo "La palabra no fue encontrada.";
}

echo "\n";

if (preg_match("/\bweb\b/i", "PHP es el mejor lenguaje de script del web.")) {
    echo "La palabra fue encontrada.";
} else {
    echo "La palabra no fue encontrada.";
}
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title>Leer un nombre de dominio en una URL</title>
    <programlisting role="php">
<![CDATA[
<?php
// detectar el nombre del host en la URL
preg_match('@^(?:http://)?([^/]+)@i',
    "http://www.php.net/index.html", $matches);
$host = $matches[1];

// detectar los dos últimos segmentos del nombre del host
preg_match('/[^.]+\.[^.]+$/', $host, $matches);
echo "El nombre de dominio es: {$matches[0]}\n";
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
El nombre de dominio es: php.net
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title>Uso de subpatrones nombrados</title>
    <programlisting role="php">
<![CDATA[
<?php

$str = 'foobar: 2008';

preg_match('/(?P<name>\w+): (?P<digit>\d+)/', $str, $matches);

/* Alternativa */
// preg_match('/(?<name>\w+): (?<digit>\d+)/', $str, $matches);

print_r($matches);

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Array
(
    [0] => foobar: 2008
    [name] => foobar
    [1] => foobar
    [digit] => 2008
    [2] => 2008
)
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <tip>
   <para>
    No utilice <function>preg_match</function> si solo desea
    saber si una cadena está contenida en otra.
    Utilice <function>strpos</function> en su lugar, ya que será más rápido.
   </para>
  </tip>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><link linkend="pcre.pattern">Patrones PCRE</link></member>
    <member><function>preg_quote</function></member>
    <member><function>preg_match_all</function></member>
    <member><function>preg_replace</function></member>
    <member><function>preg_split</function></member>
    <member><function>preg_last_error</function></member>
    <member><function>preg_last_error_msg</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
