<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 6712ff65342f3c87d03f90fa420782d37b9be58c Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: no -->
<refentry xml:id="function.preg-match-all" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>preg_match_all</refname>
  <refpurpose>Expresión regular global</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type class="union"><type>int</type><type>false</type></type><methodname>preg_match_all</methodname>
   <methodparam><type>string</type><parameter>pattern</parameter></methodparam>
   <methodparam><type>string</type><parameter>subject</parameter></methodparam>
   <methodparam choice="opt"><type>array</type><parameter role="reference">matches</parameter><initializer>&null;</initializer></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>flags</parameter><initializer>0</initializer></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>offset</parameter><initializer>0</initializer></methodparam>
  </methodsynopsis>
  <para>
   Analiza <parameter>subject</parameter> para encontrar la expresión
   <parameter>pattern</parameter> y almacena los resultados en
   <parameter>matches</parameter>, en el orden especificado por
   <parameter>flags</parameter>.
  </para>
  <para>
   Tras encontrar un primer resultado, la búsqueda continúa hasta
   el final de la cadena.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>pattern</parameter></term>
     <listitem>
      <para>
       La máscara a buscar, en forma de &string;.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>subject</parameter></term>
     <listitem>
      <para>
       La cadena de entrada.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>matches</parameter></term>
     <listitem>
      <para>
       Array que contiene todos los resultados, en un array multidimensional ordenado
       según el parámetro <parameter>flags</parameter>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>flags</parameter></term>
     <listitem>
      <para>
       Puede ser una combinación de los siguientes valores
       (señalando que es incoherente usar
       <constant>PREG_PATTERN_ORDER</constant> con
       <constant>PREG_SET_ORDER</constant> ) :
       <variablelist>
        <varlistentry>
         <term><constant>PREG_PATTERN_ORDER</constant></term>
         <listitem>
          <para>
           El orden es tal que <varname>$matches[0]</varname> es un array que
           contiene los resultados que satisfacen la máscara
           completa, <varname>$matches[1]</varname> es un array que contiene los
           resultados que satisfacen la primera
           subexpresión capturante, etc.
          </para>
          <para>
           <informalexample>
            <programlisting role="php">
<![CDATA[
<?php
preg_match_all("|<[^>]+>(.*)</[^>]+>|U",
    "<b>ejemplo : </b><div align=left>esto es una prueba</div>",
    $out, PREG_PATTERN_ORDER);
echo $out[0][0] . ", " . $out[0][1] . "\n";
echo $out[1][0] . ", " . $out[1][1] . "\n";
?>
]]>
            </programlisting>
            &example.outputs;
            <screen role="html">
<![CDATA[
<b>ejemplo : </b>, <div align=left>esto es una prueba</div>
ejemplo : , esto es una prueba
]]>
            </screen>
            <para>
             Así, <varname>$out[0]</varname> es un array que contiene los resultados que
             satisfacen la máscara completa, y <varname>$out[1]</varname> es un array que contiene
             las etiquetas entre &gt; y &lt;.
            </para>
           </informalexample>
          </para>
          <para>
           Si la máscara contiene submáscaras nombradas, <varname>$matches</varname>
           contendrá además entradas que tendrán como claves los nombres de las submáscaras.
          </para>
          <para>
           Si la máscara contiene submáscaras nombradas duplicadas, solo la submáscara
           más a la derecha será registrada en <varname>$matches[NAME]</varname>.
           <informalexample>
            <programlisting role="php">
<![CDATA[
<?php
preg_match_all(
    '/(?J)(?<match>foo)|(?<match>bar)/',
    'foo bar',
    $matches,
    PREG_PATTERN_ORDER
);
print_r($matches['match']);
?>
]]>
            </programlisting>
            &example.outputs;
            <screen>
<![CDATA[
Array
(
    [0] =>
    [1] => bar
)
]]>
            </screen>
           </informalexample>
          </para>
         </listitem>
        </varlistentry>
        <varlistentry>
         <term><constant>PREG_SET_ORDER</constant></term>
         <listitem>
          <para>
           Los resultados se ordenan de tal forma que <varname>$matches[0]</varname>
           contiene la primera serie de resultados, <varname>$matches[1]</varname> contiene
           la segunda, etc.
           <informalexample>
            <programlisting role="php">
<![CDATA[
<?php
preg_match_all("|<[^>]+>(.*)</[^>]+>|U",
    "<b>ejemplo : </b><div align=\"left\">esto es una prueba</div>",
    $out, PREG_SET_ORDER);
echo $out[0][0] . ", " . $out[0][1] . "\n";
echo $out[1][0] . ", " . $out[1][1] . "\n";
?>
]]>
            </programlisting>
            &example.outputs;
            <screen role="html">
<![CDATA[
<b>ejemplo : </b>, ejemplo :
<div align="left">esto es una prueba</div>, esto es una prueba
]]>
            </screen>
           </informalexample>
          </para>
         </listitem>
        </varlistentry>
        <varlistentry>
         <term><constant>PREG_OFFSET_CAPTURE</constant></term>
         <listitem>
          <para>
           Si este flag es pasado, todas las subcadenas que satisfacen
           la máscara también serán identificadas por su offset (en bytes).
           Tenga en cuenta que esto modifica el valor de <parameter>matches</parameter> en
           un array de arrays donde cada elemento es un array que contiene
           la subcadena satisfecha en el índice <literal>0</literal> y el índice de
           esta en la cadena <parameter>subject</parameter> en el índice <literal>1</literal>.
           <informalexample>
            <programlisting role="php">
<![CDATA[
<?php
preg_match_all('/(foo)(bar)(baz)/', 'foobarbaz', $matches, PREG_OFFSET_CAPTURE);
print_r($matches);
?>
]]>
            </programlisting>
            &example.outputs;
            <screen>
<![CDATA[
Array
(
    [0] => Array
        (
            [0] => Array
                (
                    [0] => foobarbaz
                    [1] => 0
                )

        )

    [1] => Array
        (
            [0] => Array
                (
                    [0] => foo
                    [1] => 0
                )

        )

    [2] => Array
        (
            [0] => Array
                (
                    [0] => bar
                    [1] => 3
                )

        )

    [3] => Array
        (
            [0] => Array
                (
                    [0] => baz
                    [1] => 6
                )

        )

)
]]>
            </screen>
           </informalexample>
          </para>
         </listitem>
        </varlistentry>
        <varlistentry>
         <term><constant>PREG_UNMATCHED_AS_NULL</constant></term>
         <listitem>
          <para>
           Si este flag es pasado, las subexpresiones no satisfechas son reportadas como &null; ;
           de lo contrario, son reportadas como &string; vacía.
          </para>
         </listitem>
        </varlistentry>
       </variablelist>
      </para>
      <para>
       Si <parameter>order</parameter> es omitido,
       <constant>PREG_PATTERN_ORDER</constant> es usado por defecto.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>offset</parameter></term>
     <listitem>
      <para>
       Normalmente, la búsqueda comienza al inicio de la cadena
       <parameter>subject</parameter>. El parámetro opcional
       <parameter>offset</parameter> puede ser usado para especificar
       una posición para el inicio de la búsqueda (en bytes).
      </para>
      <note>
       <para>
        Usar el parámetro <parameter>offset</parameter> no equivale
        a pasar <code>substr($subject, $offset)</code> a
        <function>preg_match_all</function> en lugar de la cadena
        <parameter>subject</parameter>, ya que
        <parameter>pattern</parameter> puede contener aserciones como
        <emphasis>^</emphasis>, <emphasis>$</emphasis> o
        <emphasis>(?&lt;=x)</emphasis>. Consulte la documentación
        sobre la función <function>preg_match</function> para ejemplos.
       </para>
      </note>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Devuelve el número de resultados que satisfacen la máscara
   completa,&return.falseforfailure;.
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  &pcre.pattern.warning;
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>7.2.0</entry>
       <entry>
        <constant>PREG_UNMATCHED_AS_NULL</constant> es ahora soportado para el
        parámetro <parameter>$flags</parameter>.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Extracción de todos los números de teléfono de un texto</title>
    <programlisting role="php">
<![CDATA[
<?php
preg_match_all("/\(?  (\d{3})?  \)?  (?(1)  [\-\s] ) \d{3}-\d{4}/x",
                "Llamar al 555-1212 o 1-800-555-1212", $phones);
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title>Buscar pares de etiquetas HTML (voraz)</title>
    <programlisting role="php">
<![CDATA[
<?php
// Este ejemplo utiliza referencias hacia atrás (\\2).
// Indican al analizador que debe encontrar algo que ya ha identificado antes
// el número 2 indica que es el segundo juego de paréntesis
// capturante que debe ser usado (en este caso, ([\w]+)).
// La barra invertida es necesaria aquí, ya que la cadena está entre comillas dobles

$html = "<b>texto en negrita</b><a href=howdy.html>haz clic aquí</a>";

preg_match_all("/(<([\w]+)[^>]*>)(.*?)(<\/\\2>)/", $html, $matches, PREG_SET_ORDER);

foreach ($matches as $val) {
    echo "coincidencia: " . $val[0] . "\n";
    echo "parte 1: " . $val[1] . "\n";
    echo "parte 2: " . $val[2] . "\n";
    echo "parte 3: " . $val[3] . "\n";
    echo "parte 4: " . $val[4] . "\n\n";
}
?>
]]>
    </programlisting>
    &example.outputs;
    <screen role="html">
<![CDATA[
coincidencia: <b>texto en negrita</b>
parte 2: b
parte 3: texto en negrita
parte 4: </b>

coincidencia: <a href=howdy.html>haz clic aquí</a>
parte 1: <a href=howdy.html>
parte 2: a
parte 3: haz clic aquí
parte 4: </a>
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title>Uso de una subexpresión nombrada</title>
    <programlisting role="php">
<![CDATA[
<?php

$str = <<<FOO
a: 1
b: 2
c: 3
FOO;

preg_match_all('/(?P<name>\w+): (?P<digit>\d+)/', $str, $matches);

/* Alternativa */
// preg_match_all('/(?<name>\w+): (?<digit>\d+)/', $str, $matches);

print_r($matches);

?>
]]>
    </programlisting>
    &example.outputs;
    <screen role="html">
<![CDATA[
Array
(
    [0] => Array
        (
            [0] => a: 1
            [1] => b: 2
            [2] => c: 3
        )

    [name] => Array
        (
            [0] => a
            [1] => b
            [2] => c
        )

    [1] => Array
        (
            [0] => a
            [1] => b
            [2] => c
        )

    [digit] => Array
        (
            [0] => 1
            [1] => 2
            [2] => 3
        )

    [2] => Array
        (
            [0] => 1
            [1] => 2
            [2] => 3
        )

)
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><link linkend="pcre.pattern">Máscaras PCRE</link></member>
    <member><function>preg_quote</function></member>
    <member><function>preg_match</function></member>
    <member><function>preg_replace</function></member>
    <member><function>preg_split</function></member>
    <member><function>preg_last_error</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
