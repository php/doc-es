<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: c1f37a6c270aadbbb3da56a3973ffd62197adf2b Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: yes -->
<refentry xml:id="function.preg-replace-callback" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>preg_replace_callback</refname>
  <refpurpose>Buscar y reemplazar mediante expresión regular estándar utilizando una función de retrollamada</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type class="union"><type>string</type><type>array</type><type>null</type></type><methodname>preg_replace_callback</methodname>
   <methodparam><type class="union"><type>string</type><type>array</type></type><parameter>pattern</parameter></methodparam>
   <methodparam><type>callable</type><parameter>callback</parameter></methodparam>
   <methodparam><type class="union"><type>string</type><type>array</type></type><parameter>subject</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>limit</parameter><initializer>-1</initializer></methodparam>
   <methodparam choice="opt"><type>int</type><parameter role="reference">count</parameter><initializer>&null;</initializer></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>flags</parameter><initializer>0</initializer></methodparam>
  </methodsynopsis>
  <para>
   El comportamiento de <function>preg_replace_callback</function> es casi
   idéntico al de <function>preg_replace</function>, con la excepción de que
   en lugar del argumento <parameter>replacement</parameter>, se debe
   especificar una función de retrollamada <parameter>callback</parameter>
   que será llamada con los elementos encontrados como argumentos.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>pattern</parameter></term>
     <listitem>
      <para>
       El patrón a buscar. Puede ser un &string; o un array que contenga
       cadenas.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>callback</parameter></term>
     <listitem>
      <para>
       La función de retrollamada que recibirá el array de elementos
       encontrados en la cadena <parameter>subject</parameter>.
       La función de retrollamada debe devolver la cadena de
       reemplazo. Esta es la firma de la función de retrollamada:
      </para>
      <para>
       <methodsynopsis>
        <type>string</type><methodname><replaceable>handler</replaceable></methodname>
        <methodparam><type>array</type><parameter>matches</parameter></methodparam>
       </methodsynopsis>
      </para>
      <para>
       Con frecuencia, la función <parameter>callback</parameter> se utiliza
       con <function>preg_replace_callback</function> en un solo lugar.
       En este caso, puede simplemente utilizar una
       <link linkend="functions.anonymous">función anónima</link>
       para declarar una función de retrollamada para
       <function>preg_replace_callback</function>.
       Al hacer esto, se concentran todas las rutinas relacionadas con
       el reemplazo en un solo lugar, y no se contamina el espacio de nombres de funciones con funciones de un solo uso.
      </para>
      <para>
       <example>
        <title><function>preg_replace_callback</function> y
        función anónima</title>
        <programlisting role="php" annotations="non-interactive">
<![CDATA[
<?php
// Un filtro de línea de comandos Unix para convertir la primera letra
// de los párrafos (que comienzan con "<p>") a minúscula

$fp = fopen("php://stdin", "r") or die("No se puede leer la línea de comandos");
while (!feof($fp)) {
    $line = fgets($fp);
    $line = preg_replace_callback(
        '|<p>\s*\w|',
        function ($matches) {
            return strtolower($matches[0]);
        },
        $line
    );
    echo $line;
}
fclose($fp);
?>
]]>
        </programlisting>
       </example>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>subject</parameter></term>
     <listitem>
      <para>
       La cadena o el array de cadenas a buscar y reemplazar.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>limit</parameter></term>
     <listitem>
      <para>
       El número máximo de reemplazos para cada patrón
       en cada cadena <parameter>subject</parameter>.
       Por omisión, vale <literal>-1</literal> (sin límite).
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>count</parameter></term>
     <listitem>
      <para>
       Si se proporciona, esta variable será rellenada con el número de reemplazos realizados.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>flags</parameter></term>
     <listitem>
      <para>
       <parameter>flags</parameter> puede ser una combinación de los indicadores
       <constant>PREG_OFFSET_CAPTURE</constant> y
       <constant>PREG_UNMATCHED_AS_NULL</constant>, que influyen en el formato
       del array de coincidencias.
       Consulte la descripción de <function>preg_match</function> para más detalles.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   <function>preg_replace_callback</function> devuelve un array si el argumento
   <parameter>subject</parameter> es un &array;, o, de lo contrario, un &string;.
   Si ocurre un error, el valor devuelto será &null;.
  </para>
  <para>
   Si se encuentran coincidencias, se devuelve el nuevo sujeto, de lo contrario
   <parameter>subject</parameter> se devuelve sin cambios.
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  &pcre.pattern.warning;
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>7.4.0</entry>
       <entry>
        Se añadió el argumento <parameter>flags</parameter>.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Ejemplo con <function>preg_replace_callback</function></title>
    <programlisting role="php">
<![CDATA[
<?php
// Este texto era cierto en 2002
// queremos actualizarlo para 2003
$text = "El primer abril es el 04/01/2002\n";
$text.= "La última navidad fue el 12/24/2001\n";

// Función de retrollamada
function next_year($matches)
{
  // como de costumbre: $matches[0] representa el valor total
  // $matches[1] representa el primer paréntesis capturante
  return $matches[1].($matches[2]+1);
}
echo preg_replace_callback(
            "|(\d{2}/\d{2}/)(\d{4})|",
            "next_year",
            $text);

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
El primer abril es el 04/01/2003
La última navidad fue el 12/24/2002
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title>Ejemplo con <function>preg_replace_callback</function> utilizando una estructura recursiva
     para manejar BB code</title>
    <programlisting role="php">
<![CDATA[
<?php
$input = "plain [indent] deep [indent] deeper [/indent] deep [/indent] plain";

function parseTagsRecursive($input)
{

    $regex = '#\[indent]((?:[^[]|\[(?!/?indent])|(?R))+)\[/indent]#';

    if (is_array($input)) {
        $input = '<div style="margin-left: 10px">'.$input[1].'</div>';
    }

    return preg_replace_callback($regex, 'parseTagsRecursive', $input);
}

$output = parseTagsRecursive($input);

echo $output;
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><link linkend="pcre.pattern">Patrones PCRE</link></member>
    <member><function>preg_replace_callback_array</function></member>
    <member><function>preg_quote</function></member>
    <member><function>preg_replace</function></member>
    <member><function>preg_last_error</function></member>
    <member><link linkend="functions.anonymous">Las funciones anónimas</link></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
