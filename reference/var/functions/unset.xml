<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: d816a0fad6c458d9515f697cc89e26ca9d8069f5 Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: yes -->

<refentry xml:id="function.unset" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>unset</refname>
  <refpurpose><function>unset</function> destruye una variable</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>void</type><methodname>unset</methodname>
   <methodparam><type>mixed</type><parameter>var</parameter></methodparam>
   <methodparam rep="repeat"><type>mixed</type><parameter>vars</parameter></methodparam>
  </methodsynopsis>
  <para>
   <function>unset</function> destruye la o las variables cuyo
   nombre ha sido pasado como argumento <parameter>var</parameter>.
  </para>
  <para>
   El comportamiento de <function>unset</function> dentro de una
   función puede variar según el tipo de variable que se desee
   destruir.
  </para>
  <para>
   Si una variable global es destruida con <function>unset</function>
   desde una función, solo la variable local será destruida. La
   variable global mantendrá el valor adquirido antes de la llamada a
   <function>unset</function>.
   <example>
    <title>Utilización de <function>unset</function></title>
    <programlisting role="php">
<![CDATA[
<?php
function destroy_foo()
{
    global $foo;
    unset($foo);
}

$foo = 'bar';
destroy_foo();
echo $foo;
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   Para destruir una variable global dentro de una
   función, se puede utilizar el array
   <varname>$GLOBALS</varname>:
   <example>
    <title><function>unset</function> una variable global</title>
    <programlisting role="php">
<![CDATA[
<?php
function foo()
{
    unset($GLOBALS['bar']);
}

$bar = "truc";
foo();
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   Si una variable que es pasada por referencia es destruida dentro
   de una función, solo la variable local será
   destruida. La variable global conservará el mismo valor
   que tenía antes de la llamada a <function>unset</function>.
   <example>
    <title><function>unset</function> con referencia</title>
    <programlisting role="php">
<![CDATA[
<?php
function foo(&$bar)
{
    unset($bar);
    $bar = "blah";
}

$bar = 'truc';
echo "$bar\n";

foo($bar);
echo "$bar\n";
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   Si una variable estática es destruida dentro de una función,
   <function>unset</function> destruirá la variable solo en el
   contexto del resto de la función. Las llamadas siguientes restaurarán
   el valor anterior de la variable.
   <example>
    <title><function>unset</function> con variable estática</title>
    <programlisting role="php">
<![CDATA[
<?php
function foo()
{
    static $bar;
    $bar++;
    echo "Antes de unset: $bar, ";
    unset($bar);
    $bar = 23;
    echo "después de unset: $bar\n";
}

foo();
foo();
foo();
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>var</parameter></term>
     <listitem>
      <para>
       La variable a destruir.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>vars</parameter></term>
     <listitem>
      <para>
       Variables adicionales.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.void;
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Ejemplo con <function>unset</function></title>
    <programlisting role="php" annotations="non-interactive">
<![CDATA[
<?php
// Destrucción de una sola variable
unset($foo);

// Destrucción de un elemento de array
unset($bar['quux']);

// Destrucción de múltiples variables
unset($foo1, $foo2, $foo3);
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  &note.language-construct;
  <note>
   <para>
    Es posible destruir cualquier propiedad
    visible en el contexto actual.
   </para>
   <para>
     Si está declarado,
     <link linkend="object.get">__get()</link>
     es llamado al acceder a una propiedad no definida, y
     <link linkend="object.set">__set()</link>
     es llamado al definir una propiedad no definida.
   </para>
  </note>
  <note>
   <para>
    No es posible destruir la variable especial
    <literal>$this</literal> dentro de un método de un
    objeto.
   </para>
  </note>
  <note>
   <para>
    Al utilizar esta función en propiedades de objeto
    inaccesibles, el método mágico
    <link linkend="object.unset">__unset</link>
    será llamado, si existe.
   </para>
  </note>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>isset</function></member>
    <member><link linkend="object.unset">__unset()</link></member>
    <member><function>empty</function></member>
    <member><function>array_splice</function></member>
    <member><link linkend="language.types.null.casting">(unset) casting</link></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
