<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 32c55286c8739fd20de9c8624473b2f3268de68e Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: yes -->
<refentry xml:id="function.is-callable" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>is_callable</refname>
  <refpurpose>
   Determina si un valor puede ser llamado como una función
   en el ámbito actual
  </refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>bool</type><methodname>is_callable</methodname>
   <methodparam><type>mixed</type><parameter>value</parameter></methodparam>
   <methodparam choice="opt"><type>bool</type><parameter>syntax_only</parameter><initializer>&false;</initializer></methodparam>
   <methodparam choice="opt"><type>string</type><parameter role="reference">callable_name</parameter><initializer>&null;</initializer></methodparam>
  </methodsynopsis>
  <para>
   Verifica que <parameter>value</parameter> es un <type>callable</type>,
   o que puede ser llamado utilizando la función
   <function>call_user_func</function>.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>value</parameter></term>
     <listitem>
      <para>
       El valor a verificar.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>syntax_only</parameter></term>
     <listitem>
      <para>
       Si el argumento <parameter>syntax_only</parameter> vale &true;, la
       función solo verificará si <parameter>value</parameter> puede ser
       una función o un método. Rechazará todos los valores
       que no sean objetos <link linkend="object.invoke">invocables</link>,
       <classname>Closure</classname>, &string;s, o &array;s que no tengan
       una estructura válida para ser utilizados como un callback. Un array invocable válido
       contiene 2 entradas: la primera debe ser un objeto
       o un string, y la segunda un string.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>callable_name</parameter></term>
     <listitem>
      <para>
       Recibe el "nombre de la función invocable", por ejemplo
       <literal>"SomeClass::someMethod"</literal>. Tenga en cuenta, sin embargo, que,
       a pesar de la implicación de que <literal>SomeClass::someMethod()</literal>
       es un método estático invocable, no es el caso.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Retorna &true; si <parameter>value</parameter> puede ser llamado como
   una función, &false; en caso contrario.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Verificación si un string puede ser llamado como una función</title>
    <programlisting role="php">
<![CDATA[
<?php

function someFunction() {}

$functionVariable = 'someFunction';

var_dump(is_callable($functionVariable, false, $callable_name));

var_dump($callable_name);

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
bool(true)
string(12) "someFunction"
]]>
    </screen>
   </example>
   <example>
    <title>Verificación si un array puede ser llamado como una función</title>
    <programlisting role="php">
<![CDATA[
<?php

class someClass
{
    public function someMethod() {}
}

$anObject = new SomeClass();

$methodVariable = [$anObject, 'someMethod'];

var_dump(is_callable($methodVariable, true, $callable_name));

var_dump($callable_name);

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
bool(true)
string(21) "SomeClass::someMethod"
]]>
    </screen>
   </example>
   <example>
    <title><function>is_callable</function> y los constructores</title>
    <simpara>
     A pesar de que los constructores son los métodos que se llaman cuando un objeto es creado,
     no son métodos estáticos y
     <function>is_callable</function> retornará &false; para ellos. No es
     posible utilizar <function>is_callable</function> para verificar si una clase puede
     ser instanciada desde el ámbito actual.
    </simpara>
    <programlisting role="php">
<![CDATA[
<?php

class Foo
{
    public function __construct() {}

    public function foo() {}
}

var_dump(
    is_callable(['Foo', '__construct']),
    is_callable(['Foo', 'foo'])
);

$foo = new Foo();
var_dump(is_callable([$foo, '__construct']));

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
bool(false)
bool(false)
bool(true)
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <simplelist>
   <member>
    Un objeto es siempre invocable si implementa
    <link linkend="object.invoke">__invoke()</link>, y que el método es visible
    en el ámbito actual.
   </member>
   <member>Un nombre de clase es invocable si implementa
    <link linkend="object.callstatic">__callStatic()</link>
   </member>
   <member>
    Si un objeto implementa <link linkend="object.call">__call()</link>, entonces esta función
    retornará &true; para cualquier método en ese objeto, incluso si
    el método no está definido.
   </member>
   <member>
    Esta función puede desencadenar el autoload si es llamada con el nombre
    de una clase.
   </member>
  </simplelist>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>call_user_func</function></member>
    <member><function>function_exists</function></member>
    <member><function>method_exists</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
