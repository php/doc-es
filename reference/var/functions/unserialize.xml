<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: d816a0fad6c458d9515f697cc89e26ca9d8069f5 Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: no -->
<refentry xml:id="function.unserialize" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>unserialize</refname>
  <refpurpose>Crea una variable PHP a partir de un valor serializado</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>mixed</type><methodname>unserialize</methodname>
   <methodparam><type>string</type><parameter>data</parameter></methodparam>
   <methodparam choice="opt"><type>array</type><parameter>options</parameter><initializer>[]</initializer></methodparam>
  </methodsynopsis>
  <simpara>
   <function>unserialize</function> toma una variable serializada
   (ver <function>serialize</function>) y la convierte en una variable PHP.
  </simpara>
  <warning>
   <para>
    No se debe pasar una entrada de usuario no confiable a la función
    <function>unserialize</function> independientemente del valor de
    <literal>allowed_classes</literal> en <parameter>options</parameter>.
    La deserialización puede resultar
    en la ejecución de código cargado y ejecutado durante la instanciación
    y la autocarga de objetos, y así, un usuario malintencionado
    podría ser capaz de explotar este comportamiento. Utilice un estándar de intercambio
    seguro, como JSON (a través de las funciones <function>json_decode</function>
    y <function>json_encode</function>) si necesita pasar datos serializados
    al usuario.
   </para>
   <para>
    Si necesita deserializar datos serializados almacenados externamente,
    considere el uso de <function>hash_hmac</function> para validar los
    datos. Asegúrese de que los datos no hayan sido modificados por nadie más
    que usted.
   </para>
  </warning>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>data</parameter></term>
     <listitem>
      <para>
       La cadena serializada.
      </para>
      <para>
       Si la variable deserializada es un objeto, después de reconstruirlo con éxito, PHP intentará automáticamente llamar a los métodos
       <link linkend="object.unserialize">__unserialize()</link> o
       <link linkend="object.wakeup">__wakeup</link> (si alguno de ellos existe).
      </para>
      <para>
       <note>
        <title>Directiva <link linkend="ini.unserialize-callback-func">unserialize_callback_func</link></title>
        <para>
         La retrollamada especificada en la directiva
         <link linkend="ini.unserialize-callback-func">unserialize_callback_func</link>
         es llamada cuando una clase no definida es deserializada.
         Si no se especifica ninguna retrollamada, el objeto será instanciado como
         <classname>__PHP_Incomplete_Class</classname>.
        </para>
       </note>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>options</parameter></term>
     <listitem>
      <para>
       Cualquier opción a proporcionar a <function>unserialize</function>, en forma de un
       array asociativo.
      </para>
      <table>
       <title>Opciones válidas</title>
       <tgroup cols="3">
        <thead>
         <row>
          <entry>Nombre</entry>
          <entry>Tipo</entry>
          <entry>Descripción</entry>
         </row>
        </thead>
        <tbody>
         <row>
          <entry><literal>allowed_classes</literal></entry>
          <entry><type class="union"><type>array</type><type>bool</type></type></entry>
          <entry>
           <simpara>
            Puede ser un array de nombres de clases que deben ser aceptados, &false;
            para no aceptar ninguna clase, o &true; para aceptar todas las
            clases. Si esta opción está definida, y
            <function>unserialize</function> encuentra un objeto de una clase
            que no está aceptada, entonces el objeto será instanciado como
            <classname>__PHP_Incomplete_Class</classname>.
           </simpara>
           <simpara>
            Omitir esta opción equivale a definirla como &true;:
            PHP intentará instanciar objetos de cualquier clase.
           </simpara>
          </entry>
         </row>
         <row>
          <entry><literal>max_depth</literal></entry>
          <entry><type>int</type></entry>
          <entry>
           <simpara>
            La profundidad máxima permitida de las estructuras durante la deserialización,
            que está destinada a prevenir desbordamientos de pila. El límite de profundidad
            por defecto es de <literal>4096</literal> y puede ser desactivado definiendo
            <literal>max_depth</literal> a <literal>0</literal>.
           </simpara>
          </entry>
         </row>
        </tbody>
       </tgroup>
      </table>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   El valor convertido es retornado por la función, y puede ser de
   tipo &boolean;, &integer;, &float;, &string;, &array; o &object;.
  </para>
  <para>
   Si la cadena pasada no puede ser deserializada, esta función retorna
   &false; y se emite un error <constant>E_WARNING</constant>.
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  <simpara>
   Los objetos pueden lanzar <classname>Throwable</classname>s en su gestor
   de deserialización.
  </simpara>
  <simpara>
   A partir de PHP 8.4.0, si el elemento <literal>allowed_classes</literal> de
   <parameter>options</parameter> no es un <type>array</type> de nombres de clases,
   <function>unserialize</function> lanza <exceptionname>TypeError</exceptionname>
   y <exceptionname>ValueError</exceptionname>.
  </simpara>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>8.4.0</entry>
       <entry>
        Ahora lanza <exceptionname>TypeError</exceptionname> y
        <exceptionname>ValueError</exceptionname> si el elemento <literal>allowed_classes</literal>
        de <parameter>options</parameter> no es un <type>array</type> de nombres de clases.
       </entry>
      </row>
      <row>
       <entry>8.3.0</entry>
       <entry>
        Ahora emite un <constant>E_WARNING</constant> cuando la cadena de entrada contiene datos no consumidos.
       </entry>
      </row>
      <row>
       <entry>8.3.0</entry>
       <entry>
        Ahora emite un <constant>E_WARNING</constant> cuando la cadena proporcionada no es deserializable;
        previamente, se emitía un <constant>E_NOTICE</constant>.
       </entry>
      </row>
      <row>
       <entry>7.4.0</entry>
       <entry>
        Se agregó el elemento <literal>max_depth</literal> a
        <parameter>options</parameter> para definir la profundidad
        máxima permitida de las estructuras durante la deserialización.
       </entry>
      </row>
      <row>
       <entry>7.1.0</entry>
       <entry>
        El elemento <literal>allowed_classes</literal> de
        <parameter>options</parameter> ahora está estrictamente tipado, es decir, si
        se proporciona algo que no sea un array <type>array</type> o un <type>bool</type>
        <function>unserialize</function> retorna &false; y emite una
        <constant>E_WARNING</constant>.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Ejemplo con <function>unserialize</function></title>
    <programlisting role="php" annotations="non-interactive">
<![CDATA[
<?php
// Aquí, se utiliza <function>unserialize</function> para cargar los datos de sesión
// desde la base de datos, en $session_data. Este ejemplo complementa
// el proporcionado con <function>serialize</function>.

$conn = odbc_connect("webdb", "php", "chicken");
$stmt = odbc_prepare($conn, "SELECT data FROM sessions WHERE id = ?");
$sqldata = array($_SERVER['PHP_AUTH_USER']);
if (!odbc_execute($stmt, $sqldata) || !odbc_fetch_into($stmt, $tmp)) {
    // si la preparación o la lectura fallan, se crea un array vacío
    $session_data = array();
} else {
    // los datos guardados están en $tmp[0].
    $session_data = unserialize($tmp[0]);
    if (!is_array($session_data)) {
        // Error... inicialización de un array vacío
        $session_data = array();
    }
}
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title>Ejemplo con la directiva <option>unserialize_callback_func</option></title>
    <programlisting role="php">
<![CDATA[
<?php
$serialized_object='O:1:"a":1:{s:5:"value";s:3:"100";}';

ini_set('unserialize_callback_func', 'mycallback');

function mycallback($classname)
{
    // Simplemente incluya un archivo que contenga su definición de clase
    // sabrá qué clase gracias a $classname
    var_dump($classname);
}

unserialize($serialized_object);
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <warning>
   <para>
    &false; es retornado en los casos donde ocurre un error y si se
    intenta deserializar un valor serializado igual a &false;. Es
    posible interceptar este caso especial comparando
    <parameter>data</parameter> con <literal>serialize(false)</literal>
    o atrapando el error <constant>E_NOTICE</constant> emitido.
   </para>
  </warning>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>json_encode</function></member>
    <member><function>json_decode</function></member>
    <member><function>hash_hmac</function></member>
    <member><function>serialize</function></member>
    <member><link linkend="language.oop5.autoload">Autoloading Classes</link></member>
    <member><link linkend="ini.unserialize-callback-func">unserialize_callback_func</link></member>
    <member><link linkend="ini.unserialize-max-depth">unserialize_max_depth</link></member>
    <member><link linkend="object.wakeup">__wakeup()</link></member>
    <member><link linkend="object.serialize">__serialize()</link></member>
    <member><link linkend="object.unserialize">__unserialize()</link></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
