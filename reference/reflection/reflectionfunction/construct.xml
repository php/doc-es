<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: ec2fe9a592f794978114ef5021db9f1d00c2e05d Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: yes -->
<refentry xml:id="reflectionfunction.construct" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>ReflectionFunction::__construct</refname>
  <refpurpose>Construye un nuevo objeto ReflectionFunction</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <constructorsynopsis role="ReflectionFunction">
   <modifier>public</modifier> <methodname>ReflectionFunction::__construct</methodname>
   <methodparam><type class="union"><type>Closure</type><type>string</type></type><parameter>function</parameter></methodparam>
  </constructorsynopsis>
  <para>
   Construye un nuevo objeto <classname>ReflectionFunction</classname>.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>function</parameter></term>
     <listitem>
      <para>
       El nombre de la función a reflejar o una
       <link linkend="functions.anonymous">fermeture</link>.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   Se lanza una excepción <classname>ReflectionException</classname> si el argumento <parameter>function</parameter>
   contiene una función inválida.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Ejemplo con <methodname>ReflectionFunction::__construct</methodname></title>
    <programlisting role="php">
<![CDATA[
<?php
/**
 * Un simple contador
 *
 * @return    int
 */
function counter1()
{
    static $c = 0;
    return ++$c;
}

/**
 * Otro simple contador
 *
 * @return    int
 */
$counter2 = function()
{
    static $d = 0;
    return ++$d;

};

function dumpReflectionFunction($func)
{
    // Muestra información básica
    printf(
        "\n\n===> La función '%s' '%s'\n".
        "     declarada en %s\n".
        "     líneas %d a %d\n",
        $func->isInternal() ? 'interna' : 'definida por el usuario',
        $func->getName(),
        $func->getFileName(),
        $func->getStartLine(),
        $func->getEndline()
    );

    // Muestra los comentarios de documentación
    printf("---> Documentación:\n %s\n", var_export($func->getDocComment(), 1));

    // Muestra las variables estáticas existentes
    if ($statics = $func->getStaticVariables())
    {
        printf("---> Variables estáticas: %s\n", var_export($statics, 1));
    }
}

// Crear una instancia de la clase ReflectionFunction
dumpReflectionFunction(new ReflectionFunction('counter1'));
dumpReflectionFunction(new ReflectionFunction($counter2));
?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
===> La función definida por el usuario 'counter1'
     declarada en Z:\reflectcounter.php
     líneas 7 a 11
---> Documentación:
 '/**
 * A simple counter
 *
 * @return    int
 */'
---> Variables estáticas: array (
  'c' => 0,
)


===> La función definida por el usuario '{closure}'
     declarada en Z:\reflectcounter.php
     líneas 18 a 23
---> Documentación:
 '/**
 * Another simple counter
 *
 * @return    int
 */'
---> Variables estáticas: array (
  'd' => 0,
)
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><methodname>ReflectionMethod::__construct</methodname></member>
    <member><link linkend="language.oop5.decon.constructor">Los constructores</link></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
