<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 6d29533483657c036e49edb5ea88c7103d126681 Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: no -->
<refentry xml:id="reflectionnamedtype.isbuiltin" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>ReflectionNamedType::isBuiltin</refname>
  <refpurpose>Verifica si es un tipo integrado</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis role="ReflectionNamedType">
   <modifier>public</modifier> <type>bool</type><methodname>ReflectionNamedType::isBuiltin</methodname>
   <void/>
  </methodsynopsis>
  <para>
   Verifica si el tipo es un tipo integrado en PHP. Un tipo integrado es todo
   tipo que no es una clase, interfaz o trait.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  &no.function.parameters;
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &true; si es un tipo integrado en PHP, de lo contrario &false;
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Ejemplo con <methodname>ReflectionNamedType::isBuiltin</methodname></title>
    <programlisting role="php">
<![CDATA[
<?php
class SomeClass {}

function someFunction(string $param, SomeClass $param2, stdClass $param3) {}

$reflectionFunc = new ReflectionFunction('someFunction');
$reflectionParams = $reflectionFunc->getParameters();

var_dump($reflectionParams[0]->getType()->isBuiltin());
var_dump($reflectionParams[1]->getType()->isBuiltin());
var_dump($reflectionParams[2]->getType()->isBuiltin());
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
bool(true)
bool(false)
bool(false)
]]>
    </screen>
   </example>
  </para>
  <para>
   Se observa que el método <methodname>ReflectionNamedType::isBuiltin</methodname>
   no distingue entre clases internas y de usuario. Para realizar
   esta distinción, debe utilizarse el método <methodname>ReflectionClass::isInternal</methodname>
   sobre el nombre de clase devuelto.
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><methodname>ReflectionType::allowsNull</methodname></member>
    <member><methodname>ReflectionType::__toString</methodname></member>
    <member><methodname>ReflectionClass::isInternal</methodname></member>
    <member><methodname>ReflectionParameter::getType</methodname></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
