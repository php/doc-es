<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 2d8559c6c0c10f677080b636bd67e54efdc2cf0a Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: yes -->
<refentry xml:id="reflectionclass.newlazyghost" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>ReflectionClass::newLazyGhost</refname>
  <refpurpose>Crear una nueva instancia fantasma perezosa</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis role="ReflectionClass">
   <modifier>public</modifier> <type>object</type> <methodname>ReflectionClass::newLazyGhost</methodname>
   <methodparam><type>callable</type><parameter>initializer</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>options</parameter><initializer>0</initializer></methodparam>
  </methodsynopsis>
  <simpara>
   Crear una nueva instancia fantasma perezosa de la clase, adjuntando
   el <parameter>initializer</parameter> a esta. El constructor no es
   llamado, y las propiedades no son definidas a su valor por defecto.
   Sin embargo, el objeto será automáticamente inicializado invocando
   el <parameter>initializer</parameter> la primera vez que su estado es observado
   o modificado. Ver
   <link linkend="language.oop5.lazy-objects.initialization-triggers">disparadores
   de inicialización</link> y <link linkend="language.oop5.lazy-objects.initialization-sequence">
   secuencia de inicialización</link>.
  </simpara>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <variablelist>
   <varlistentry>
    <term><parameter>initializer</parameter></term>
    <listitem>
     <simpara>
      El inicializador es una función de retrollamada con la siguiente firma:
     </simpara>
     <para>
      <methodsynopsis>
       <type>void</type><methodname><replaceable>initializer</replaceable></methodname>
       <methodparam><type>object</type><parameter>object</parameter></methodparam>
      </methodsynopsis>
      <variablelist>
       <varlistentry>
        <term><parameter>object</parameter></term>
        <listitem>
         <simpara>
          El <parameter>object</parameter> en curso de inicialización. En este punto,
          el objeto ya no está marcado como perezoso, y acceder a él no desencadena
          la inicialización.
         </simpara>
        </listitem>
       </varlistentry>
      </variablelist>
     </para>
     <simpara>
      La función <parameter>initializer</parameter> debe devolver &null; o no devolver nada.
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="reflectionclass.newlazyghost.parameters.options">
    <term><parameter>options</parameter></term>
    <listitem>
     <para>
      <parameter>options</parameter> puede ser una combinación de los siguientes flags:
      <variablelist>
       <varlistentry>
        <term>
         <constant>ReflectionClass::SKIP_INITIALIZATION_ON_SERIALIZE</constant>
        </term>
        <listitem>
         <simpara>
          Por omisión, la serialización de un objeto perezoso desencadena su
          inicialización. Definir este flag evita la inicialización, permitiendo
          que los objetos perezosos sean serializados sin ser inicializados.
         </simpara>
        </listitem>
       </varlistentry>
      </variablelist>
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <simpara>
   Devolver una instancia fantasma perezosa. Si el objeto no tiene propiedades,
   o si todas sus propiedades son estáticas o virtuales, se devuelve una instancia normal
   (no perezosa). Ver también
   <link linkend="language.oop5.lazy-objects.lifecycle">Ciclo de vida de los objetos
   perezosos</link>.
  </simpara>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  <simpara>
   Una <classname>ReflectionException</classname> si la clase es interna o
   extiende una clase interna, excepto <classname>stdClass</classname>.
  </simpara>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title>Uso básico</title>
   <programlisting role="php">
<![CDATA[
<?php

class Example {
    public function __construct(public int $prop) {
        echo __METHOD__, "\n";
    }
}

$reflector = new ReflectionClass(Example::class);
$object = $reflector->newLazyGhost(function (Example $object) {
     $object->__construct(1);
});

var_dump($object);
var_dump($object instanceof Example);

// Desencadena la inicialización, y obtiene la propiedad después de esto
var_dump($object->prop);

?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
lazy ghost object(Example)#3 (0) {
  ["prop"]=>
  uninitialized(int)
}
bool(true)
Example::__construct
int(1)
]]>
   </screen>
  </example>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <simplelist>
   <member><link linkend="language.oop5.lazy-objects">Objetos perezosos</link></member>
   <member><methodname>ReflectionClass::newLazyProxy</methodname></member>
   <member><methodname>ReflectionClass::newInstanceWithoutConstructor</methodname></member>
   <member><methodname>ReflectionClass::resetAsLazyGhost</methodname></member>
   <member><methodname>ReflectionClass::markLazyObjectAsInitialized</methodname></member>
   <member><methodname>ReflectionClass::initializeLazyObject</methodname></member>
   <member><methodname>ReflectionClass::isUninitializedLazyObject</methodname></member>
   <member><methodname>ReflectionProperty::setRawValueWithoutLazyInitialization</methodname></member>
   <member><methodname>ReflectionProperty::skipLazyInitialization</methodname></member>
   <member><methodname>ReflectionProperty::isLazy</methodname></member>
  </simplelist>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
