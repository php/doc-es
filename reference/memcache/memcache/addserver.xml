<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 1c3a0a021e0d97acce54fda55f6e941557056afe Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: no -->

<refentry xml:id="memcache.addserver" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>Memcache::addServer</refname>
  <refname>memcache_add_server</refname>
  <refpurpose>Añade un servidor memcache a la lista de conexión</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>bool</type><methodname>Memcache::addServer</methodname>
   <methodparam><type>string</type><parameter>host</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>port</parameter><initializer>11211</initializer></methodparam>
   <methodparam choice="opt"><type>bool</type><parameter>persistent</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>weight</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>timeout</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>retry_interval</parameter></methodparam>
   <methodparam choice="opt"><type>bool</type><parameter>status</parameter></methodparam>
   <methodparam choice="opt"><type>callable</type><parameter>failure_callback</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>timeoutms</parameter></methodparam>
  </methodsynopsis>
  <methodsynopsis>
   <type>bool</type><methodname>memcache_add_server</methodname>
   <methodparam><type>Memcache</type><parameter>memcache</parameter></methodparam>
   <methodparam><type>string</type><parameter>host</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>port</parameter><initializer>11211</initializer></methodparam>
   <methodparam choice="opt"><type>bool</type><parameter>persistent</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>weight</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>timeout</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>retry_interval</parameter></methodparam>
   <methodparam choice="opt"><type>bool</type><parameter>status</parameter></methodparam>
   <methodparam choice="opt"><type>callable</type><parameter>failure_callback</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>timeoutms</parameter></methodparam>
  </methodsynopsis>

  <para>
   <function>Memcache::addServer</function> añade un servidor a la lista de
   conexión.
  </para>

  <para>
   Al utilizar este método (a diferencia de los métodos
   <function>Memcache::connect</function> y <function>Memcache::pconnect</function>),
   la conexión a la red no se establece hasta que sea necesaria. Además,
   no hay inconveniente en añadir muchos servidores a la lista, incluso si no
   todos serán utilizados.
  </para>

  <para>
   El fallo puede producirse en cualquier momento con cualquier
   método siempre que otros servidores estén disponibles, la petición
   no emitirá error. Cualquier interfaz de conexión o nivel de errores de servidor Memcache (a excepción de la falta de memoria) puede
   lanzar el fallo. Errores normales de cliente como añadir una
   clave existente no lanzará un fallo.
  </para>

  <note>
   <para>
    Esta función fue añadida en la versión 2.0.0 de Memcache.
   </para>
  </note>

 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>host</parameter></term>
     <listitem>
      <para>
       Apunta al host donde memcache escucha para conexiones. Este parámetro puede especificar también otros transportes como <literal>unix:///path/to/memcached.sock</literal>
       para usar sockets Unix, y en este caso, <parameter>port</parameter> debe definirse también a <literal>0</literal>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>port</parameter></term>
     <listitem>
      <para>
       Apunta al puerto donde memcache escucha para conexiones.
       Defínase este parámetro a <literal>0</literal> al usar sockets Unix.
      </para>
      <para>
       Nota: Por omisión, el parámetro <parameter>port</parameter>
       toma el valor de la opción de configuración
       <link linkend="ini.memcache.default-port">memcache.default_port</link>
       cuando no se especifica. Por esta razón, es recomendable
       especificar explícitamente el puerto al llamar a este método.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>persistent</parameter></term>
     <listitem>
      <para>
       Controla el uso de una conexión persistente. El valor por
       omisión es &true;.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>weight</parameter></term>
     <listitem>
      <para>
       Número de entradas a crear para este servidor que a su vez controla su
       probabilidad de ser elegido. La probabilidad es relativa al peso total
       de todos los servidores.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>timeout</parameter></term>
     <listitem>
      <para>
       Valor en segundos que será utilizado para conectarse al demonio.
       Piénsese dos veces antes de cambiar el valor por omisión de un segundo
       - podría perderse todos los beneficios de usar la caché si la conexión es demasiado lenta.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>retry_interval</parameter></term>
     <listitem>
      <para>
       Controla cuántas veces se intentará un servidor que falla, el valor
       por omisión es de 15 segundos. Si este parámetro vale -1, no se realizará
       ningún nuevo intento. Ni este parámetro, ni el parámetro
       <parameter>persistent</parameter> tienen efecto cuando esta extensión
       se carga dinámicamente mediante la función <function>dl</function>.
      </para>
      <para>
       Cada estructura de conexión fallida tiene su propio tiempo límite
       y antes de que este expire, será saltada durante la selección del
       proceso para servir una petición. Una vez expirado, la conexión será
       correctamente reconectada o marcada como fallida por otro
       intervalo de <parameter>retry_interval</parameter> segundos. El efecto
       típico es que cada hijo de servidor web intentará la conexión
       cada <parameter>retry_interval</parameter> segundos al servir una página.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>status</parameter></term>
     <listitem>
      <para>
       Controla si el servidor debe ser indicado como en línea.
       Cuando este parámetro vale &false; y el parámetro <parameter>retry_interval</parameter>
       vale -1, permite mantener un servidor fallido en la lista
       y no afectará al algoritmo de distribución de claves. Las peticiones
       para este servidor fallarán inmediatamente según la configuración del
       parámetro <parameter>memcache.allow_failover</parameter>.
       Por omisión, este parámetro vale &true;, significando que el servidor debe ser
       considerado como en línea.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>failure_callback</parameter></term>
     <listitem>
      <para>
       Permite al usuario especificar una función de retorno para manejar un error. La función de retorno se ejecuta antes de alcanzar el límite de intentos. La función toma dos parámetros; el nombre del host y el puerto
       del servidor que falló.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>timeoutms</parameter></term>
     <listitem>
      <para>

      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.success;
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Ejemplo con <function>Memcache::addServer</function></title>
    <programlisting role="php">
<![CDATA[
<?php

/* API orientada a objetos */

$memcache = new Memcache;
$memcache->addServer('memcache_host', 11211);
$memcache->addServer('memcache_host2', 11211);

/* API procedimental */

$memcache_obj = memcache_connect('memcache_host', 11211);
memcache_add_server($memcache_obj, 'memcache_host2', 11211);

?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <warning>
   <para>
    Cuando el parámetro <parameter>port</parameter> no se especifica, este método
    tomará el valor de la directiva de configuración INI
    <link linkend="ini.memcache.default-port">memcache.default_port</link>.
    Si este valor ha sido modificado en otro lugar de su aplicación,
    esto puede llevar a resultados inesperados: por esta razón, es recomendable
    siempre especificar el puerto explícitamente al llamar al método.
   </para>
  </warning>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>Memcache::connect</function></member>
    <member><function>Memcache::pconnect</function></member>
    <member><function>Memcache::close</function></member>
    <member><function>Memcache::setServerParams</function></member>
    <member><function>Memcache::getServerStatus</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
