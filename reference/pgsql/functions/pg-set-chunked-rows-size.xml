<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 3c6c95fcfd7d9eaa603df40327693ea8dff89d53 Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: yes -->
<refentry xml:id="function.pg-set-chunked-rows-size" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>pg_set_chunked_rows_size</refname>
  <refpurpose>Establece los resultados de la consulta a recuperar en modo chunk</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>bool</type><methodname>pg_set_chunked_rows_size</methodname>
   <methodparam><type>PgSql\Connection</type><parameter>connection</parameter></methodparam>
   <methodparam><type>int</type><parameter>size</parameter></methodparam>
  </methodsynopsis>
  <simpara>
   Establece los resultados de la consulta a recuperar en modo chunk.
   La consulta devuelta posteriormente se dividirá en varios fragmentos,
   cada uno conteniendo hasta <parameter>size</parameter> filas.
   Esta función debe ser llamada antes de recuperar los resultados con <function>pg_get_result</function>.
   Esta función solo está disponible cuando libpq está en versión 17 o superior.
  </simpara>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <variablelist>
    <varlistentry>
     <term><parameter>connection</parameter></term>
     <listitem>
      &pgsql.parameter.connection;
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>size</parameter></term>
     <listitem>
      <simpara>
       El número de filas a recuperar en cada fragmento.
      </simpara>
     </listitem>
    </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <simpara>
   &return.success;
  </simpara>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  <simpara>
   Si <parameter>size</parameter> es inferior a <literal>1</literal>,
   se lanzará un <classname>ValueError</classname>.
  </simpara>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title>Ejemplo de <function>pg_result_memory_size</function></title>
   <programlisting role="php">
<![CDATA[
<?php

$conn = pg_connect($conn_str);

for ($i = 0; $i < 10; $i ++) {
  pg_query($conn, "INSERT INTO users DEFAULT VALUES");
}

pg_send_query($conn, "SELECT * FROM users");
pg_set_chunked_rows_size($conn, 1);

$result = pg_get_result($conn);
var_dump(pg_num_rows($result));

:: Sin efecto después de que el resultado sea recuperado
var_dump(pg_set_chunked_rows_size($conn, 10));
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
int(1)
bool(false)
]]>
   </screen>
  </example>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <simplelist>
   <member><function>pg_get_result</function></member>
   <member><function>pg_result_status</function></member>
  </simplelist>
 </refsect1>
</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
