<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 187032b3ea20fa28f1c9f29ba38d06820428f849 Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: yes -->

<reference xml:id="class.mongodb-driver-bulkwritecommand" role="class" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude">

 <title>La clase MongoDB\Driver\BulkWriteCommand</title>
 <titleabbrev>MongoDB\Driver\BulkWriteCommand</titleabbrev>

 <partintro>

<!-- {{{ MongoDB\Driver\BulkWriteCommand intro -->
  <section xml:id="mongodb-driver-bulkwritecommand.intro">
   &reftitle.intro;
   <para>
    <classname>MongoDB\Driver\BulkWriteCommand</classname> recupera una o varias
    operaciones de escritura que deben ser enviadas al servidor mediante el comando
    <link xlink:href="&url.mongodb.docs.command;bulkWrite">bulkWrite</link>
    introducido en MongoDB 8.0. Tras añadir cualquier número de operaciones de escritura,
    operaciones de modificación y operaciones de eliminación, el comando puede ser ejecutado a través de
    <methodname>MongoDB\Driver\Manager::executeBulkWriteCommand</methodname>.
   </para>
   <para>
    A diferencia de <classname>MongoDB\Driver\BulkWrite</classname>, donde todas las operaciones
    de escritura deben apuntar a la misma colección, cada operación de escritura en
    <classname>MongoDB\Driver\BulkWriteCommand</classname> debe apuntar a una
    colección diferente.
   </para>
   <para>
    Las operaciones de escritura pueden ser ordenadas (por defecto) o no ordenadas. Las operaciones
    ordenadas son enviadas al servidor, en el orden proporcionado, para una ejecución
    serial. Si una escritura falla, todas las operaciones restantes serán canceladas.
    Las operaciones no ordenadas son enviadas al servidor en un orden arbitrario
    donde pueden ser ejecutadas en paralelo. Todos los errores que ocurran
    son reportados después de que todas las operaciones hayan sido intentadas.
   </para>
  </section>
<!-- }}} -->

  <section xml:id="mongodb-driver-bulkwritecommand.synopsis">
   &reftitle.classsynopsis;

<!-- {{{ Synopsis -->
   <classsynopsis>
    <ooclass><classname>MongoDB\Driver\BulkWriteCommand</classname></ooclass>

<!-- {{{ Class synopsis -->
    <classsynopsisinfo>
     <modifier>final</modifier>
     <ooclass>
      <classname>MongoDB\Driver\BulkWriteCommand</classname>
     </ooclass>

     <oointerface>
      <interfacename>Countable</interfacename>
     </oointerface>
    </classsynopsisinfo>
<!-- }}} -->

    <classsynopsisinfo role="comment">&Methods;</classsynopsisinfo>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.mongodb-driver-bulkwritecommand')/db:refentry/db:refsect1[@role='description']/descendant::db:methodsynopsis[not(@role='procedural')])" />
   </classsynopsis>
<!-- }}} -->

  </section>

  <section xml:id="mongodb-driver-bulkwritecommand.examples">
   &reftitle.examples;

   <example>
    <title>Operaciones de escritura mixtas</title>
    <para>
     Las operaciones de escritura mixtas (por ejemplo, inserciones, actualizaciones y eliminaciones) serán enviadas
     al servidor mediante una sola
     comando
     <link xlink:href="&url.mongodb.docs.command;bulkWrite">bulkWrite</link>.
    </para>
    <programlisting role="php">
<![CDATA[
<?php

$manager = new MongoDB\Driver\Manager;

$bulk = new MongoDB\Driver\BulkWriteCommand;

// Eliminar documentos de ambas colecciones
$bulk->deleteMany('db.coll_one', []);
$bulk->deleteMany('db.coll_two', []);

// Insertar documentos en dos colecciones
$bulk->insertOne('db.coll_one', ['_id' => 1]);
$bulk->insertOne('db.coll_two', ['_id' => 2]);
$bulk->insertOne('db.coll_two', ['_id' => 3]);

// Actualizar un documento en "coll_one"
$bulk->updateOne('db.coll_one', ['_id' => 1], ['$set' => ['x' => 1]]);

$result = $manager->executeBulkWriteCommand($bulk);

printf("%d documento(s) han sido insertado(s)\n", $result->getInsertedCount());
printf("%d documento(s) han sido actualizado(s)\n", $result->getModifiedCount());

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
3 documento(s) han sido insertado(s)
1 documento(s) han sido actualizado(s)
]]>
    </screen>
   </example>
   <example>
    <title>Operaciones de escritura ordenadas que causan un error</title>
    <programlisting role="php">
<![CDATA[
<?php

$manager = new MongoDB\Driver\Manager;

$bulk = new MongoDB\Driver\BulkWriteCommand;

$bulk->deleteMany('db.coll', []);
$bulk->insertOne('db.coll', ['_id' => 1]);
$bulk->insertOne('db.coll', ['_id' => 2]);
$bulk->insertOne('db.coll', ['_id' => 1]);
$bulk->insertOne('db.coll', ['_id' => 3]);

try {
    $result = $manager->executeBulkWriteCommand($bulk);
} catch (MongoDB\Driver\Exception\BulkWriteCommandException $e) {
    $result = $e->getPartialResult();

    var_dump($e->getWriteErrors());
}

printf("%d documento(s) han sido insertado(s)\n", $result->getInsertedCount());

?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
array(1) {
  [3]=>
  object(MongoDB\Driver\WriteError)#5 (4) {
    ["message"]=>
    string(78) "E11000 duplicate key error collection: db.coll index: _id_ dup key: { _id: 1 }"
    ["code"]=>
    int(11000)
    ["index"]=>
    int(3)
    ["info"]=>
    object(stdClass)#6 (0) {
    }
  }
}
2 documento(s) han sido insertado(s)
]]>
    </screen>
   </example>
  </section>

  <section xml:id="mongodb-driver-bulkwritecommand.seealso">
   &reftitle.seealso;
   <simplelist>
    <member><methodname>MongoDB\Driver\Manager::executeBulkWriteCommand</methodname></member>
    <member><classname>MongoDB\Driver\BulkWriteCommandResult</classname></member>
    <member><classname>MongoDB\Driver\Exception\BulkWriteCommandException</classname></member>
    <member><classname>MongoDB\Driver\WriteConcern</classname></member>
    <member><classname>MongoDB\Driver\WriteConcernError</classname></member>
    <member><classname>MongoDB\Driver\WriteError</classname></member>
   </simplelist>
  </section>

 </partintro>

 &reference.mongodb.mongodb.driver.entities.bulkwritecommand;

</reference>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
