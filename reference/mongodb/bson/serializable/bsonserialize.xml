<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: e3c3525f7f288bc3a455a9619215fa759c2a9f5f Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: no -->

<refentry xml:id="mongodb-bson-serializable.bsonserialize" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>MongoDB\BSON\Serializable::bsonSerialize</refname>
  <refpurpose>Proporciona un array o un documento a serializar como BSON</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>abstract</modifier> <modifier>public</modifier> <type class="union"><type>array</type><type>stdClass</type><type>MongoDB\BSON\Document</type><type>MongoDB\BSON\PackedArray</type></type><methodname>MongoDB\BSON\Serializable::bsonSerialize</methodname>
   <void />
  </methodsynopsis>
  <para>
   Invocado durante la serialización del objeto a BSON. El método debe devolver
   un &array;, <classname>stdClass</classname>,
   <classname>MongoDB\BSON\Document</classname> o
   <classname>MongoDB\BSON\PackedArray</classname>.
  </para>
  <para>
   Los documentos raíz (por ejemplo, un
   <interfacename>MongoDB\BSON\Serializable</interfacename> pasado a
   <methodname>MongoDB\BSON\Document::fromPHP</methodname>) siempre serán serializados
   como documento BSON. Para los valores de campo, los arrays asociativos y las
   instancias <classname>stdClass</classname> serán serializados como
   documento BSON y los arrays secuenciales (es decir, índices numéricos secuenciales
   comenzando en <literal>0</literal>) serán serializados como array BSON.
  </para>
  <para>
   Se recomienda incluir una propiedad <property>_id</property>
   (por ejemplo un <classname>MongoDB\BSON\ObjectId</classname> inicializado en el constructor)
   al devolver datos para un documento raíz BSON. En ausencia de una
   propiedad <property>_id</property>, la extensión o el servidor generará un
   <classname>MongoDB\BSON\ObjectId</classname> para las operaciones de inserción o
   actualización, respectivamente.
  </para>

 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  &no.function.parameters;
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &array;, <classname>stdClass</classname>, <classname>MongoDB\BSON\Document</classname>,
   o <classname>MongoDB\BSON\PackedArray</classname> a serializar como array o documento BSON.
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      &mongodb.changelog.tentative-return-types-enforced;
      <row>
       <entry>PECL mongodb 1.17.0</entry>
       <entry>
        <para>
         El tipo de retorno ya no es <type class="union"><type>array</type><type>object</type></type>.
         En lugar de un <type>object</type>, el tipo de retorno especifica ahora
         <classname>stdClass</classname>. Las clases que implementan esta interfaz deben
         ser modificadas para no utilizar el tipo de retorno <type>object</type>.
         Al ser el tipo de retorno provisional, se emite una advertencia de deprecación en PHP 8.1
         o superior si las implementaciones no utilizan el tipo de retorno correcto.
        </para>
        <para>
         Además de los cambios anteriores, la extensión ahora soporta devolver instancias de
         <classname>MongoDB\BSON\Document</classname>
         y <classname>MongoDB\BSON\PackedArray</classname>. Cabe señalar que
         cualquier instancia de <classname>MongoDB\BSON\PackedArray</classname>
         será convertida silenciosamente en objeto cuando se almacene como documento raíz.
         Estas instancias se almacenan como arrays cuando se utilizan como valor de campo integrado.
        </para>
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title><function>MongoDB\BSON\Serializable::bsonSerialize</function> devolviendo un array asociativo para el documento raíz</title>
   <programlisting role="php">
<![CDATA[
<?php

class MyDocument implements MongoDB\BSON\Serializable
{
    private $id;

    function __construct()
    {
        $this->id = new MongoDB\BSON\ObjectId;
    }

    function bsonSerialize(): array
    {
        return ['_id' => $this->id, 'foo' => 'bar'];
    }
}

echo MongoDB\BSON\Document::fromPHP(new MyDocument)->toRelaxedExtendedJSON(), "\n";

?>
]]>
   </programlisting>
   &example.outputs.similar;
   <screen>
<![CDATA[
{ "_id" : { "$oid" : "56cccdcada14d8755a58c591" }, "foo" : "bar" }
]]>
   </screen>
  </example>

  <example>
   <title><function>MongoDB\BSON\Serializable::bsonSerialize</function> devolviendo un array secuencial para el documento raíz</title>
   <programlisting role="php">
<![CDATA[
<?php

class MyArray implements MongoDB\BSON\Serializable
{
    function bsonSerialize(): array
    {
        return [1, 2, 3];
    }
}

echo MongoDB\BSON\Document::fromPHP(new MyArray)->toRelaxedExtendedJSON(), "\n";

?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
{ "0" : 1, "1" : 2, "2" : 3 }
]]>
   </screen>
  </example>

  <example>
   <title><function>MongoDB\BSON\Serializable::bsonSerialize</function> devolviendo un array asociativo para el campo de documento</title>
   <programlisting role="php">
<![CDATA[
<?php

class MyDocument implements MongoDB\BSON\Serializable
{
    function bsonSerialize(): array
    {
        return ['foo' => 'bar'];
    }
}

$value = ['document' => new MyDocument];

echo MongoDB\BSON\Document::fromPHP($value)->toRelaxedExtendedJSON(), "\n";

?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
{ "document" : { "foo" : "bar" } }
]]>
   </screen>
  </example>

  <example>
   <title><function>MongoDB\BSON\Serializable::bsonSerialize</function> devolviendo un array secuencial para el campo de documento</title>
   <programlisting role="php">
<![CDATA[
<?php

class MyArray implements MongoDB\BSON\Serializable
{
    function bsonSerialize(): array
    {
        return [1, 2, 3];
    }
}

$value = ['array' => new MyArray];
$bson = MongoDB\BSON\fromPHP($value);
echo MongoDB\BSON\toJSON($bson), "\n";

?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
{ "array" : [ 1, 2, 3 ] }
]]>
   </screen>
  </example>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <simplelist>
   <member><function>MongoDB\BSON\Unserializable::bsonUnserialize</function></member>
   <member><interfacename>MongoDB\BSON\Persistable</interfacename></member>
   <member><xref linkend="mongodb.persistence"/></member>
  </simplelist>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
