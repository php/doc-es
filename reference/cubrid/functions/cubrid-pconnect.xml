<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 648875cf73af01acdb6afaa5ca38b0bf6631bf42 Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: no -->

<refentry xml:id="function.cubrid-pconnect" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>cubrid_pconnect</refname>
  <refpurpose>Establece una conexión persistente con un servidor CUBRID</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>resource</type><methodname>cubrid_pconnect</methodname>
   <methodparam><type>string</type><parameter>host</parameter></methodparam>
   <methodparam><type>int</type><parameter>port</parameter></methodparam>
   <methodparam><type>string</type><parameter>dbname</parameter></methodparam>
   <methodparam choice="opt"><type>string</type><parameter>userid</parameter></methodparam>
   <methodparam choice="opt"><type>string</type><parameter>passwd</parameter></methodparam>
  </methodsynopsis>
  <para>
   Establece una conexión persistente con un servidor CUBRID.
  </para>
  <para>
   <function>cubrid_pconnect</function> funciona de manera similar a
   <function>cubrid_connect</function> con dos diferencias principales.
  </para>
  <para>
   En primer lugar, al establecer la conexión, la función intentará primero
   encontrar un enlace (persistente) ya abierto con el mismo nombre de host,
   en el mismo puerto, utilizando la misma base de datos dbname y el mismo
   userid. Si se encuentra un enlace de este tipo, su identificador será
   devuelto en lugar de abrir una nueva conexión.
  </para>
  <para>
   En segundo lugar, la conexión con el servidor CUBRID no se cerrará cuando
   finalice el script. En su lugar, el enlace permanecerá abierto para su
   uso futuro (<function>cubrid_close</function> o
   <function>cubrid_disconnect</function> no cerrarán los enlaces establecidos
   con <function>cubrid_pconnect</function>).
  </para>
  <para>
   Este tipo de enlace se denominaba anteriormente 'persistente'.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>host</parameter></term>
     <listitem>
      <para>
       Nombre del host o dirección IP del servidor CUBRID CAS.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>port</parameter></term>
     <listitem>
      <para>
       Número de puerto del servidor CUBRID CAS (BROKER_PORT configurado en $CUBRID/conf/cubrid_broker.conf).
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>dbname</parameter></term>
     <listitem>
      <para>
       Nombre de la base de datos.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>userid</parameter></term>
     <listitem>
      <para>
       Nombre de usuario para la base de datos.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>passwd</parameter></term>
     <listitem>
      <para>
       Contraseña asociada al nombre de usuario.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Identificador de conexión en caso de éxito,&return.falseforfailure;.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title>Ejemplo con <function>cubrid_connect</function></title>
   <programlisting role="php">
<![CDATA[
<?php
printf("%-30s %s\n", "Versión de CUBRID PHP:", cubrid_version());

printf("\n");

$conn = cubrid_pconnect("localhost", 33000, "demodb", "dba");

if (!$conn) {
    die('Error de conexión ('. cubrid_error_code() .')' . cubrid_error_msg());
}

$db_params = cubrid_get_db_parameter($conn);

while (list($param_name, $param_value) = each($db_params)) {
    printf("%-30s %s\n", $param_name, $param_value);
}

printf("\n");

$server_info = cubrid_get_server_info($conn);
$client_info = cubrid_get_client_info();

printf("%-30s %s\n", "Información del servidor:", $server_info);
printf("%-30s %s\n", "Información del cliente:", $client_info);

printf("\n");

$charset = cubrid_get_charset($conn);

printf("%-30s %s\n", "Juego de caracteres CUBRID:", $charset);

cubrid_disconnect($conn);
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
Versión de CUBRID PHP:            9.1.0.0001

PARAM_ISOLATION_LEVEL          3
LOCK_TIMEOUT                   -1
MAX_STRING_LENGTH              1073741823
PARAM_AUTO_COMMIT              1

Información del servidor:      9.1.0.0212
Información del cliente:       9.1.0

Juego de caracteres CUBRID:     iso8859-1
]]>
   </screen>
  </example>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>cubrid_connect</function></member>
    <member><function>cubrid_connect_with_url</function></member>
    <member><function>cubrid_pconnect_with_url</function></member>
    <member><function>cubrid_disconnect</function></member>
    <member><function>cubrid_close</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
