<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 73fae4ee51b644b72028e610abefefced57c18ad Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: no -->
<refentry xml:id="function.cubrid-pconnect-with-url" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>cubrid_pconnect_with_url</refname>
  <refpurpose>Establece una conexión persistente con un servidor CUBRID</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>resource</type><methodname>cubrid_pconnect_with_url</methodname>
   <methodparam><type>string</type><parameter>conn_url</parameter></methodparam>
   <methodparam choice="opt"><type>string</type><parameter>userid</parameter></methodparam>
   <methodparam choice="opt"><type>string</type><parameter>passwd</parameter></methodparam>
  </methodsynopsis>
  <para>
   Establece una conexión persistente con un servidor CUBRID.
  </para>
  <para>
   <function>cubrid_pconnect_with_url</function> funciona de manera similar a la
   función <function>cubrid_connect_with_url</function>, con dos diferencias principales.
  </para>
  <para>
   En primer lugar, al establecer la conexión, la función intentará encontrar
   un enlace (persistente) ya abierto con el mismo host, en el mismo puerto, en la
   misma base de datos dbname y utilizando el mismo userid. Si se encuentra una conexión
   de este tipo, su identificador será devuelto en lugar de abrir una nueva conexión.
  </para>
  <para>
   A continuación, la conexión al servidor CUBRID no se cerrará cuando finalice
   el script. En su lugar, la conexión permanecerá abierta para su uso futuro (la función
   <function>cubrid_close</function> o la función <function>cubrid_disconnect</function> no cerrarán la conexión
   establecida por la función <function>cubrid_pconnect_with_url</function>).
  </para>
  <para>
   Este tipo de enlace se denominaba anteriormente 'persistente'.
  </para>
  <para>
   &lt;url&gt; ::= CUBRID:&lt;host&gt;:&lt;db_name&gt;:&lt;db_user&gt;:&lt;db_password&gt;:[?&lt;properties&gt;]
  </para>
  <para>
   &lt;properties&gt; ::= &lt;property&gt; [&amp;&lt;property&gt;]
  </para>
  <para>
   &lt;properties&gt; ::= alhosts=&lt;alternative_hosts&gt;[ &amp;rctime=&lt;time&gt;]
  </para>
  <para>
   &lt;properties&gt; ::= login_timeout=&lt;milli_sec&gt;
  </para>
  <para>
   &lt;properties&gt; ::= query_timeout=&lt;milli_sec&gt;
  </para>
  <para>
   &lt;properties&gt; ::= disconnect_on_query_timeout=true|false
  </para>
  <para>
   &lt;alternative_hosts&gt; ::= &lt;standby_broker1_host&gt;:&lt;port&gt; [,&lt;standby_broker2_host&gt;:&lt;port&gt;]
  </para>
  <para>
   &lt;host&gt; := HOSTNAME | IP_ADDR
  </para>
  <para>
   &lt;time&gt; := SECOND
  </para>
  <para>
   &lt;milli_sec&gt; := MILLI SECOND
  </para>
  <para>
   <simplelist>
    <member>host : Un nombre de host o una dirección IP del servidor maestro de la base de datos</member>
    <member>db_name : Un nombre de base de datos</member>
    <member>db_user : Un nombre de usuario de la base de datos</member>
    <member>db_password : Una contraseña para el usuario de la base de datos</member>
    <member>autocommit : El modo auto-commit de la conexión a la base de datos</member>
    <member>
     alhosts : Especifica la información del broker del servidor, que será utilizado como punto de salida
     cuando no sea posible conectarse al servidor activo. Se pueden especificar varios brokers en este caso,
     y la conexión a los brokers se intentará en el orden de la configuración alhosts
    </member>
    <member>
     rctime : Un intervalo de tiempo para esperar antes de intentar una conexión con un broker cuando ocurre un error.
     Después de que ocurra un error, el sistema intentará conectarse a un broker especificado por
     althosts, terminará la transacción, y luego intentará conectarse al broker activo del servidor maestro
     de la base de datos. El valor por omisión es de 600 segundos.
    </member>
    <member>
     login_timeout : Valor del tiempo máximo de espera (unidad: milisegundo) para la identificación
     a la base de datos. Por omisión, este valor es 0, lo que significa que se espera indefinidamente.
    </member>
    <member>
     query_timeout : Valor del tiempo máximo de espera (unidad: milisegundo) para la ejecución
     de la consulta. Una vez alcanzado este valor, se envía un mensaje para cancelar la consulta
     enviada al servidor. El valor devuelto puede depender de la configuración de disconnect_on_query_timeout;
     incluso si el mensaje para cancelar la consulta ha sido enviado al servidor, la consulta puede tener éxito.
    </member>
    <member>
     disconnect_on_query_timeout : Configura un valor que determina si se debe devolver
     inmediatamente un error para las funciones ejecutadas después del tiempo máximo de espera.
     El valor por omisión es &false;.
    </member>
   </simplelist>
  </para>
  <note>
   <para>
    Los caracteres <literal>?</literal> y <literal>:</literal>
    utilizados como identificadores en las URLs de conexión PHP no pueden
    ser incluidos en la contraseña. A continuación se muestra un ejemplo de contraseña
    inválida, ya que utiliza los caracteres "<literal>?:</literal>" en la URL de conexión.
   </para>
   <para>
    $url = "CUBRID:localhost:33000:tdb:dba:12?:?login_timeout=100";
   </para>
   <para>
    Las contraseñas que contienen el carácter <literal>?</literal> o el
    carácter <literal>:</literal> pueden ser pasadas como argumento separado.
   </para>
   <para>
    $url = "CUBRID:localhost:33000:tbd:::?login_timeout=100";
   </para>
   <para>
    $conn = cubrid_pconnect_with_url ($url, "dba", "12?");
   </para>
   <para>
    Si el nombre de usuario o la contraseña están vacíos, no se deben
    eliminar los "<literal>:</literal>"; a continuación se muestra un ejemplo:
   </para>
   <para>
    $url = "CUBRID:localhost:33000:demodb:::";
   </para>
  </note>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>conn_url</parameter></term>
     <listitem>
      <para>
       Un &string; que contiene la información de conexión para el servidor.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>userid</parameter></term>
     <listitem>
      <para>
       Nombre de usuario para la base de datos.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>passwd</parameter></term>
     <listitem>
      <para>
       Contraseña para el usuario.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Identificador de conexión, cuando el proceso tiene éxito,&return.falseforfailure;.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title>Ejemplo con <function>cubrid_pconnect_with_url</function> sin propiedades</title>
   <programlisting role="php">
<![CDATA[
<?php
$conn_url = "CUBRID:127.0.0.1:33000:demodb:dba::?althost=10.34.63.132:33088&rctime=100";
$con = cubrid_pconnect_with_url ($conn_url);

if ($con) {
   echo "Conexión exitosa";
   cubrid_execute($con, "create table person(id int,name char(16))");
   $req =cubrid_execute($con, "insert into person values(1,'James')");

   if ($req) {
      cubrid_close_request ($req);
      cubrid_commit ($con);
   } else {
      cubrid_rollback ($con);
   }
   cubrid_disconnect ($con);
}
?>
]]>
   </programlisting>
  </example>

  <example>
   <title><function>cubrid_pconnect_with_url</function> url with properties example</title>
   <programlisting role="php">
<![CDATA[
<?php
$conn_url = "CUBRID:127.0.0.1:33000:demodb:dba::?autocommit=off&althost=10.34.63.132:33088&rctime=100";
$con = cubrid_pconnect_with_url ($conn_url);

if ($con) {
   echo "Conexión exitosa";
   $req =cubrid_execute($con, "insert into person values(1,'James')");

   if ($req) {
      cubrid_close_request ($req);
      cubrid_commit ($con);
   } else {
      cubrid_rollback ($con);
   }
   cubrid_disconnect ($con);
}
?>
]]>
   </programlisting>
  </example>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>cubrid_connect</function></member>
    <member><function>cubrid_connect_with_url</function></member>
    <member><function>cubrid_pconnect</function></member>
    <member><function>cubrid_disconnect</function></member>
    <member><function>cubrid_close</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
