<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 497c40ac164d5873fd87f622dfdeb5206392b446 Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: no -->
<refentry xml:id="function.openssl-verify" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>openssl_verify</refname>
  <refpurpose>Verifica una firma</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type class="union"><type>int</type><type>false</type></type><methodname>openssl_verify</methodname>
   <methodparam><type>string</type><parameter>data</parameter></methodparam>
   <methodparam><type>string</type><parameter>signature</parameter></methodparam>
   <methodparam><type class="union"><type>OpenSSLAsymmetricKey</type><type>OpenSSLCertificate</type><type>array</type><type>string</type></type><parameter>public_key</parameter></methodparam>
   <methodparam choice="opt"><type class="union"><type>string</type><type>int</type></type><parameter>algorithm</parameter><initializer><constant>OPENSSL_ALGO_SHA1</constant></initializer></methodparam>
  </methodsynopsis>
  <para>
   <function>openssl_verify</function> verifica que la firma
   <parameter>signature</parameter> es correcta para los datos
   <parameter>data</parameter>, y con la clave pública
   <parameter>public_key</parameter>. Esta clave debe ser la clave
   pública correspondiente a la clave privada utilizada durante la firma.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>data</parameter></term>
     <listitem>
      <para>
       La cadena de datos utilizada para generar la firma
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>signature</parameter></term>
     <listitem>
      <para>
       Una cadena binaria bruta, generada por la función
       <function>openssl_sign</function> o similar
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>public_key</parameter></term>
     <listitem>
      <para>
       <classname>OpenSSLAsymmetricKey</classname> - una clave, retornada por la función
       <function>openssl_get_publickey</function>
      </para>
      <para>
       <type>string</type> - una clave en formato <acronym>PEM</acronym>, por ejemplo: <literal>-----BEGIN PUBLIC KEY-----
MIIBCgK...</literal>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>algorithm</parameter></term>
     <listitem>
      <para>
       <type>int</type> - una de las <link linkend="openssl.signature-algos">firmas de algoritmos</link>.
      </para>
      <para>
       <type>string</type> - una cadena válida retornada por la función <function>openssl_get_md_methods</function>,
       por ejemplo: "sha1WithRSAEncryption" o "sha512". Algoritmo por omisión: "OPENSSL_ALGO_SHA1".
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Retorna 1 si la firma es correcta, 0 si es
   incorrecta y -1 o &false; si ocurre un error.
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <informaltable>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>&Version;</entry>
      <entry>&Description;</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>8.0.0</entry>
      <entry>
       <parameter>public_key</parameter> acepta ahora una instancia de
       <classname>OpenSSLAsymmetricKey</classname> o <classname>OpenSSLCertificate</classname>;
       anteriormente, se aceptaba un &resource; de tipo <literal>OpenSSL key</literal> o <literal>OpenSSL X.509</literal>.
      </entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Ejemplo con <function>openssl_verify</function></title>
    <programlisting role="php">
<![CDATA[
<?php
// Se asume que $data y $signature contienen los datos a firmar y
// la firma.

// Lectura de la clave pública desde el certificado
$pubkeyid = openssl_pkey_get_public("file://src/openssl-0.9.6/demos/sign/cert.pem");

// indica si la firma es correcta
$ok = openssl_verify($data, $signature, $pubkeyid);
if ($ok == 1) {
    echo "Firma válida";
} elseif ($ok == 0) {
    echo "Firma errónea";
} else {
    echo "Error de verificación de la firma";
}
// libera las claves de la memoria
openssl_free_key($pubkeyid);
?>
]]>
    </programlisting>
   </example>
   <example>
    <title>Ejemplo con <function>openssl_verify</function></title>
    <programlisting role="php">
<![CDATA[
<?php
//Datos que se desean firmar
$data = 'my data';

//Crea una nueva clave privada y pública
$private_key_res = openssl_pkey_new(array(
    "private_key_bits" => 2048,
    "private_key_type" => OPENSSL_KEYTYPE_RSA,
));
$details = openssl_pkey_get_details($private_key_res);
$public_key_res = openssl_pkey_get_public($details['key']);

//Crea una firma
openssl_sign($data, $signature, $private_key_res, "sha256WithRSAEncryption");

//Verifica la firma
$ok = openssl_verify($data, $signature, $public_key_res, OPENSSL_ALGO_SHA256);
if ($ok == 1) {
    echo "válida";
} elseif ($ok == 0) {
    echo "inválida";
} else {
    echo "error: ".openssl_error_string();
}
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>openssl_sign</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
