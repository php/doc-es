<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: b9271c0d58c90c9359444348192c7c3f7d9e178f Maintainer: seros Status: ready -->
<!-- Reviewed: no -->
<refentry xmlns="http://docbook.org/ns/docbook" xml:id="function.openssl-random-pseudo-bytes">
 <refnamediv>
  <refname>openssl_random_pseudo_bytes</refname>
  <refpurpose>Genera una cadena de bytes pseudo-aleatoria</refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>string</type><methodname>openssl_random_pseudo_bytes</methodname>
   <methodparam><type>int</type><parameter>length</parameter></methodparam>
   <methodparam choice="opt"><type>bool</type><parameter role="reference">crypto_strong</parameter></methodparam>
  </methodsynopsis>
  <para>
   Genera una <type>cadena</type> de bytes pseudo-aleatoria, con el número de bytes
   determinado por el parámetro <parameter>length</parameter>.
  </para>
  <para>
   También indica si se usó un algoritmo criptográficamente fuerte para producir los
   bytes pseudo-aleatorios, y hace esto mediante el parámetro opcional <parameter>crypto_strong</parameter>.
   Es raro que este parámetro sea &false;, pero algunos sistemas pueden ser antiguos o no funcionar correctamente.
  </para>
 </refsect1>
 
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>length</parameter></term>
     <listitem>
      <para>
       La longitud de la cadena de bytes deseada. Debe ser un entero positivo. PHP intentará
       asignar este parámetro a un entero no nulo para usarlo. 
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>crypto_strong</parameter></term>
     <listitem>
      <para>
       Si se pasó en la función, mantendrá un valor <type>booleano</type> value que determina
       si el algoritmo usado fue "criptográficamente fuerte", p.ej., seguro para el uso con GPG,
       contraseñas, etc. &true; si lo hizo, de otro modo &false;
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Devuelve el &string; de bytes generado si se tuvo éxito, &return.falseforfailure;.
  </para>
 </refsect1>
 
 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Ejemplo de <function>openssl_random_pseudo_bytes</function></title>
    <programlisting role="php">
<![CDATA[
<?php
for ($i = -1; $i <= 4; $i++) {
    $bytes = openssl_random_pseudo_bytes($i, $cstrong);
    $hex   = bin2hex($bytes);

    echo "Longitudes: Bytes: $i y Hex: " . strlen($hex) . PHP_EOL;
    var_dump($hex);
    var_dump($cstrong);
    echo PHP_EOL;
}
?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
Longitudes: Bytes: -1 y Hex: 0
string(0) ""
NULL

Longitudes: Bytes: 0 y Hex: 0
string(0) ""
NULL

Longitudes: Bytes: 1 y Hex: 2
string(2) "42"
bool(true)

Longitudes: Bytes: 2 y Hex: 4
string(4) "dc6e"
bool(true)

Longitudes: Bytes: 3 y Hex: 6
string(6) "288591"
bool(true)

Longitudes: Bytes: 4 y Hex: 8
string(8) "ab86d144"
bool(true)

]]>
    </screen>
   </example>
  </para>
 </refsect1>
 
 <refsect1 role="seealso">
  &reftitle.seealso;
  <simplelist>
   <member><function>random_bytes</function></member>
   <member><function>bin2hex</function></member>
   <member><function>crypt</function></member>
   <member><function>mt_rand</function></member>
   <member><function>uniqid</function></member>
  </simplelist>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
