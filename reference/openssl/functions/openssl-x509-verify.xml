<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 497c40ac164d5873fd87f622dfdeb5206392b446 Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: no -->
<refentry xml:id="function.openssl-x509-verify" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>openssl_x509_verify</refname>
  <refpurpose>Verifica la firma digital de un certificado x509 con respecto a una clave pública</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>int</type><methodname>openssl_x509_verify</methodname>
   <methodparam><type class="union"><type>OpenSSLCertificate</type><type>string</type></type><parameter>certificate</parameter></methodparam>
   <methodparam><type class="union"><type>OpenSSLAsymmetricKey</type><type>OpenSSLCertificate</type><type>array</type><type>string</type></type><parameter>public_key</parameter></methodparam>
  </methodsynopsis>
  <para>
   La función <function>openssl_x509_verify</function> verifica que el certificado
   <parameter>certificate</parameter> ha sido firmado por la clave privada correspondiente a la clave
   pública <parameter>public_key</parameter>.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    &openssl.param.x509;
    <varlistentry>
     <term><parameter>public_key</parameter></term>
     <listitem>
      <para>
       <classname>OpenSSLAsymmetricKey</classname> - una clave, devuelta por la función
       <function>openssl_get_publickey</function>
      </para>
      <para>
       <type>string</type> - una clave con formato <acronym>PEM</acronym>, por ejemplo, <literal>-----BEGIN PUBLIC KEY-----
MIIBCgK...</literal>.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Devuelve 1 si la firma es correcta, 0 si es incorrecta y
   -1 si ocurre un error.
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <informaltable>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>&Version;</entry>
      <entry>&Description;</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>8.0.0</entry>
      <entry>
       <parameter>certificate</parameter> acepta ahora una instancia de
       <classname>OpenSSLCertificate</classname>;
       anteriormente, un &resource; de tipo <literal>OpenSSL X.509</literal> era aceptado.
      </entry>
     </row>
     <row>
      <entry>8.0.0</entry>
      <entry>
       <parameter>public_key</parameter> acepta ahora una instancia de
       <classname>OpenSSLAsymmetricKey</classname> o <classname>OpenSSLCertificate</classname>;
       anteriormente, un &resource; de tipo <literal>OpenSSL key</literal> o <literal>OpenSSL X.509</literal>
       era aceptado.
      </entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Ejemplo con <function>openssl_x509_verify</function></title>
    <programlisting role="php">
<![CDATA[
<?php
$hostname = "news.php.net";
$ssloptions = array(
    "capture_peer_cert" => true,
    "capture_peer_cert_chain" => true,
    "allow_self_signed"=> false,
    "CN_match" => $hostname,
    "verify_peer" => true,
    "SNI_enabled" => true,
    "SNI_server_name" => $hostname,
);

$ctx = stream_context_create( array("ssl" => $ssloptions) );
$result = stream_socket_client("ssl://$hostname:443", $errno, $errstr, 30, STREAM_CLIENT_CONNECT, $ctx);
$cont = stream_context_get_params($result);
$x509 = $cont["options"]["ssl"]["peer_certificate"];
$certparsed = openssl_x509_parse($x509);

foreach($cont["options"]["ssl"]["peer_certificate_chain"] as $chaincert)
{
    $chainparsed = openssl_x509_parse($chaincert);
    $chain_public_key = openssl_get_publickey($chaincert);
    $r = openssl_x509_verify($x509, $chain_public_key);
    if ($r==1)
    {
        echo $certparsed['subject']['CN'];
        echo " fue firmado digitalmente por ";
        echo $chainparsed['subject']['CN']."\n";
    }
}
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>openssl_verify</function></member>
    <member><function>openssl_get_publickey</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
