<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 94281c46f6c390dbadc7629b643c6bd5843ec8d1 Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: no Maintainer: Marqitos -->
<refentry xml:id="function.apcu-entry" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>apcu_entry</refname>
  <refpurpose>
   Recupera o genera de forma atómica una entrada de caché
  </refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>mixed</type><methodname>apcu_entry</methodname>
   <methodparam><type>string</type><parameter>key</parameter></methodparam>
   <methodparam><type>callable</type><parameter>callback</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>ttl</parameter><initializer>0</initializer></methodparam>
  </methodsynopsis>
  <para>
   Intenta de forma atómica encontrar <parameter>key</parameter> en la caché; si no se encuentra, se llama a <parameter>callback</parameter>,
   pasando <parameter>key</parameter> como único argumento. El valor de retorno de la llamada se almacena en caché con el <parameter>ttl</parameter>
   especificado opcionalmente y se devuelve.
  </para>
  <note>
   <simpara>
    Cuando el control entra en <function>apcu_entry</function>, se adquiere de forma exclusiva el bloqueo de la caché, que se libera cuando el control
    sale de <function>apcu_entry</function>. En efecto, esto convierte el cuerpo de <parameter>callback</parameter> en una sección crítica, impidiendo que
    dos procesos ejecuten las mismas rutas de código concurrentemente. Además, prohíbe la ejecución concurrente de cualquier otra función de APCu,
    ya que adquirirán el mismo bloqueo.
   </simpara>
  </note>
  <warning>
   <simpara>
    La única función de APCu que puede llamarse de forma segura desde <parameter>callback</parameter> es <function>apcu_entry</function>.
   </simpara>
  </warning>
 </refsect1>
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>key</parameter></term>
     <listitem>
      <para>
       Identificador de la entrada de caché
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>callback</parameter></term>
     <listitem>
      <para>
       Una retrollamada que acepta <parameter>key</parameter> como único argumento y devuelve el valor a almacenar en caché.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>ttl</parameter></term>
     <listitem>
      <para>
       Tiempo de vida; almacena el valor de retorno del <parameter>callback</parameter> en la caché durante
       <parameter>ttl</parameter> segundos. Después de que
       <parameter>ttl</parameter> haya transcurrido, la entrada almacenada será
       eliminada de la caché (en la siguiente petición). Si no se proporciona <parameter>ttl</parameter>
       (o si el <parameter>ttl</parameter> es
       <literal>0</literal>), el valor persistirá hasta que se elimine manualmente de
       la caché, o deje de existir en la caché (limpieza,
       reinicio, etc.).
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Devuelve el valor almacenado en caché
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Un ejemplo de <function>apcu_entry</function></title>
    <programlisting role="php">
<![CDATA[
<?php
$config = apcu_entry("config", function($key) {
 return [
   "fruit" => apcu_entry("config.fruit", function($key){
     return [
       "apples",
       "pears"
     ];
   }),
   "people" => apcu_entry("config.people", function($key){
     return [
      "bob",
      "joe",
      "niki"
     ];
   })
 ];
});

var_dump($config);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
array(2) {
  ["fruit"]=>
  array(2) {
    [0]=>
    string(6) "apples"
    [1]=>
    string(5) "pears"
  }
  ["people"]=>
  array(3) {
    [0]=>
    string(3) "bob"
    [1]=>
    string(3) "joe"
    [2]=>
    string(4) "niki"
  }
}
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>apcu_store</function></member>
    <member><function>apcu_fetch</function></member>
    <member><function>apcu_delete</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
