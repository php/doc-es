<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: b6c220c748034c8db2d007ef42b74b212ac2f1cd Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: yes -->

<appendix xml:id="memcached.constants" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 &reftitle.constants;
 &extension.constants;
 <variablelist>

  <varlistentry xml:id="memcached.constants.opt-compression">
   <term><constant>Memcached::OPT_COMPRESSION</constant></term>
   <listitem>
    <simpara>
     Activa o desactiva la compresión del contenido. Si está
     activada, los elementos que excedan un tamaño (actualmente
     200 bytes), serán comprimidos durante el almacenamiento, y
     descomprimidos al recuperar, de manera transparente. El umbral puede ser configurado
     mediante el parámetro ini <link linkend="ini.memcached.compression-threshold">memcached.compression_threshold</link>.
    </simpara>
     <para>Tipo: <type>bool</type>, por omisión: &true;.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-compression-type">
   <term><constant>Memcached::OPT_COMPRESSION_TYPE</constant></term>
   <listitem>
    <simpara>
     Especifica el algoritmo de compresión a utilizar, si la compresión está activada.
     Los algoritmos válidos son <constant>Memcached::COMPRESSION_FASTLZ</constant>,
     <constant>Memcached::COMPRESSION_ZLIB</constant> y
     <constant>Memcached::COMPRESSION_ZSTD</constant>.
    </simpara>
    <para>Tipo: <type>int</type>, por omisión: <constant>Memcached::COMPRESSION_FASTLZ</constant>.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.compression-fastlz">
   <term><constant>Memcached::COMPRESSION_FASTLZ</constant></term>
   <listitem>
    <simpara>
     El algoritmo de compresión FASTLZ.
    </simpara>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.compression-zlib">
   <term><constant>Memcached::COMPRESSION_ZLIB</constant></term>
   <listitem>
    <simpara>El algoritmo de compresión ZLIB.</simpara>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.compression-zstd">
   <term><constant>Memcached::COMPRESSION_ZSTD</constant></term>
   <listitem>
    <simpara>
     El algoritmo de compresión ZSTD.
    </simpara>
    <simpara>
     Disponible a partir de Memcached 3.3.0.
    </simpara>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-compression-level">
   <term><constant>Memcached::OPT_COMPRESSION_LEVEL</constant></term>
   <listitem>
    <simpara>
     Especifica el nivel de compresión a utilizar, si la compresión está activada.
    </simpara>
    <simplelist>
     <member><constant>Memcached::COMPRESSION_FASTLZ</constant> no soporta niveles de compresión.</member>
     <member><constant>Memcached::COMPRESSION_ZSTD</constant>: el nivel mínimo es <literal>-22</literal> y el nivel máximo es <literal>22</literal>.</member>
     <member><constant>Memcached::COMPRESSION_ZLIB</constant>: el nivel mínimo es <literal>0</literal> y el nivel máximo es <literal>9</literal>.</member>
    </simplelist>
    <para>Tipo: <type>int</type>, por omisión: <literal>3</literal>.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-serializer">
   <term><constant>Memcached::OPT_SERIALIZER</constant></term>
   <listitem>
    <simpara>
     Especifica la función de serialización a utilizar para los valores no
     escalares. Las funciones válidas son
     <constant>Memcached::SERIALIZER_PHP</constant>,
     <constant>Memcached::SERIALIZER_IGBINARY</constant>,
     <constant>Memcached::SERIALIZER_JSON</constant>,
     <constant>Memcached::SERIALIZER_JSON_ARRAY</constant> y
     <constant>Memcached::SERIALIZER_MSGPACK</constant>.
    </simpara>
    <para>
     Tipo: <type>int</type>, por omisión: <constant>Memcached::SERIALIZER_IGBINARY</constant> si está disponible,
     luego <constant>Memcached::SERIALIZER_MSGPACK</constant> si está disponible,
     luego <constant>Memcached::SERIALIZER_PHP</constant>.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.serializer-php">
   <term><constant>Memcached::SERIALIZER_PHP</constant></term>
   <listitem>
    <para>
     La función de serialización por defecto de PHP.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.serializer-igbinary">
   <term><constant>Memcached::SERIALIZER_IGBINARY</constant></term>
   <listitem>
    <simpara>
     El serializador <link linkend="book.igbinary">igbinary</link>.
     En lugar de una representación textual, esta función almacena las
     estructuras PHP en un formato compacto y binario, con un ahorro
     de tiempo y espacio.
     </simpara>
     <simpara>
      Este serializador solo es soportado si memcached está configurado con
      la opción <option>--enable-memcached-igbinary</option> y si la extensión
      <link linkend="intro.igbinary">igbinary</link> está cargada.
     </simpara>
    </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.serializer-json">
   <term><constant>Memcached::SERIALIZER_JSON</constant></term>
   <listitem>
    <para>El serializador JSON. Este serializador deserializa el JSON en un objeto.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.serializer-json-array">
   <term><constant>Memcached::SERIALIZER_JSON_ARRAY</constant></term>
   <listitem>
    <simpara>
     El serializador JSON en array.
     Este serializador deserializa el JSON en un array asociativo.
    </simpara>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.serializer-msgpack">
   <term><constant>Memcached::SERIALIZER_MSGPACK</constant></term>
   <listitem>
    <simpara>
     El serializador <link xlink:href="&url.pecl.package;msgpack">MessagePack</link>.
    </simpara>
    <simpara>
     Este serializador solo es soportado si memcached está configurado con
     la opción <option>--enable-memcached-msgpack</option> y si la extensión
     <literal>msgpack</literal> está cargada.
    </simpara>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-prefix-key">
   <term><constant>Memcached::OPT_PREFIX_KEY</constant></term>
   <listitem>
    <simpara>
     Esta opción puede ser utilizada para crear un "dominio" para las claves.
     El valor especificado aquí será prefijado a cada clave. No puede ser
     más largo que <literal>128</literal> caracteres, y reducirá en consecuencia
     el tamaño máximo de clave disponible. El prefijo solo se aplica
     a las claves de elemento, y no a las claves de servidor.
    </simpara>
    <para>Tipo: <type>string</type>, por omisión: <literal>""</literal>.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-hash">
   <term><constant>Memcached::OPT_HASH</constant></term>
   <listitem>
    <simpara>
     Especifica el algoritmo de hash utilizado para las claves. Los valores válidos
     son proporcionados con las constantes <constant>Memcached::HASH_<replaceable>*</replaceable></constant>.
     Cada algoritmo de hash tiene sus ventajas y desventajas. Utilice
     el que se proporciona por omisión, si no comprende, o si no le importa.
    </simpara>
    <para>Tipo: <type>int</type>, por omisión: <constant>Memcached::HASH_DEFAULT</constant></para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.hash-default">
   <term><constant>Memcached::HASH_DEFAULT</constant></term>
   <listitem>
    <para>
     El algoritmo por omisión (<literal>Jenkins one-at-a-time</literal>)
     de hash.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.hash-md5">
   <term><constant>Memcached::HASH_MD5</constant></term>
   <listitem>
    <para>
     El algoritmo de hash por MD5
    </para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.hash-crc">
   <term><constant>Memcached::HASH_CRC</constant></term>
   <listitem>
    <para>
     El algoritmo de hash por CRC
    </para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.hash-fnv1-64">
   <term><constant>Memcached::HASH_FNV1_64</constant></term>
   <listitem>
    <para>
     El algoritmo de hash por FNV1_64
    </para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.hash-fnv1a-64">
   <term><constant>Memcached::HASH_FNV1A_64</constant></term>
   <listitem>
    <para>
     El algoritmo de hash por FNV1_64A
    </para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.hash-fnv1-32">
   <term><constant>Memcached::HASH_FNV1_32</constant></term>
   <listitem>
    <para>
     El algoritmo de hash por FNV1_32
    </para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.hash-fnv1a-32">
   <term><constant>Memcached::HASH_FNV1A_32</constant></term>
   <listitem>
    <para>
     El algoritmo de hash por FNV1_32A
    </para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.hash-hsieh">
   <term><constant>Memcached::HASH_HSIEH</constant></term>
   <listitem>
    <para>
     El algoritmo de hash por Hsieh
    </para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.hash-murmur">
   <term><constant>Memcached::HASH_MURMUR</constant></term>
   <listitem>
    <para>
     El algoritmo de hash por Murmur
    </para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-distribution">
   <term><constant>Memcached::OPT_DISTRIBUTION</constant></term>
   <listitem>
    <simpara>
     Especifica el método de distribución de claves en los servidores.
     Actualmente, esta opción soporta el módulo y el hash consistente.
     El hash consistente proporciona la mejor distribución, y permite
     añadir servidores al grupo con un mínimo de pérdidas de caché.
    </simpara>
    <para>Tipo: <type>int</type>, por omisión: <constant>Memcached::DISTRIBUTION_MODULA</constant>.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.distribution-modula">
   <term><constant>Memcached::DISTRIBUTION_MODULA</constant></term>
   <listitem>
    <para>
     El algoritmo de distribución por módulo
    </para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.distribution-consistent">
   <term><constant>Memcached::DISTRIBUTION_CONSISTENT</constant></term>
   <listitem>
    <para>
     El algoritmo de distribución por hash consistente
    </para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.distribution-virtual-bucket">
   <term><constant>Memcached::DISTRIBUTION_VIRTUAL_BUCKET</constant></term>
   <listitem>
    <simpara>
     Algoritmo de distribución de clave de hash Virtual Bucket (también llamado vbucket).
    </simpara>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-libketama-compatible">
   <term><constant>Memcached::OPT_LIBKETAMA_COMPATIBLE</constant></term>
   <listitem>
    <para>
     Activa o no la compatibilidad con el comportamiento tipo libketama.
     Cuando esta opción está activada, el algoritmo de hash es MD5,
     y la distribución es el hash consistente. Esto es práctico porque
     otros clientes que utilizan libketama (Python, Ruby, etc.) con
     la misma configuración de servidor serán capaces de utilizar las mismas
     claves, de manera transparente.
    </para>
    <note>
     <para>
      Esta opción es altamente recomendada, si se quiere utilizar
      el hash consistente, y es probable que esté activada por omisión en futuras versiones.
     </para>
    </note>
    <para>Tipo: <type>bool</type>, por omisión: &false;.</para>
    </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-libketama-hash">
   <term><constant>Memcached::OPT_LIBKETAMA_HASH</constant></term>
   <listitem>
    <simpara>
     Especifica el algoritmo de hash para el mapeo del host.
    </simpara>
    <para>Tipo: <type>int</type>.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-tcp-keepalive">
   <term><constant>Memcached::OPT_TCP_KEEPALIVE</constant></term>
   <listitem>
    <simpara>
     Activa el mantenimiento de la conexión TCP (keep-alive).
    </simpara>
    <para>Tipo: <type>bool</type>, por omisión: &false;.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-buffer-writes">
   <term><constant>Memcached::OPT_BUFFER_WRITES</constant></term>
   <listitem>
    <simpara>
     Activa o no la bufferización de entrada/salida. La bufferización
     hace que los comandos de almacenamiento se buffericen, en lugar de
     enviarse. Cualquier acción que lea datos hace que el buffer de escritura sea enviado al servidor remoto. El cierre de la
     conexión o su parada también forzarán el envío de los datos del buffer.
    </simpara>
    <para>Tipo: <type>bool</type>, por omisión: &false;.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-binary-protocol">
   <term><constant>Memcached::OPT_BINARY_PROTOCOL</constant></term>
   <listitem>
    <simpara>
     Active esta opción para utilizar el protocolo binario.
     Tenga en cuenta que no puede cambiar esta opción para
     una conexión ya abierta.
    </simpara>
    <para>Tipo: <type>bool</type>, por omisión: &false;.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-no-block">
   <term><constant>Memcached::OPT_NO_BLOCK</constant></term>
   <listitem>
    <simpara>
     Activa o no los transferencias asíncronas. Este es el modo de transferencia
     más rápido, para las funciones de almacenamiento.
    </simpara>
    <para>Tipo: <type>bool</type>, por omisión: &false;.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-noreply">
   <term><constant>Memcached::OPT_NOREPLY</constant></term>
   <listitem>
    <simpara>
     Activa o desactiva la ignoración del resultado de los comandos de almacenamiento
     (set, add, replace, append, prepend, delete, increment, decrement, etc.).
     Los comandos de almacenamiento serán enviados sin pasar tiempo esperando
     una respuesta (no habría respuesta).
     Los comandos de recuperación como <methodname>Memcached::get</methodname>
     no son afectados por esta configuración.
    </simpara>
    <para>Tipo: <type>bool</type>, por omisión: &false;.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-tcp-nodelay">
   <term><constant>Memcached::OPT_TCP_NODELAY</constant></term>
   <listitem>
    <simpara>
     Activa o no las conexiones sin retraso de los sockets (esto puede ser
     un aumento de rendimiento en algunos entornos.
    </simpara>
    <para>Tipo: <type>bool</type>, por omisión: &false;.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-socket-send-size">
   <term><constant>Memcached::OPT_SOCKET_SEND_SIZE</constant></term>
   <listitem>
    <simpara>
     El tamaño máximo del buffer de envío por socket, en bytes.
    </simpara>
    <para>
     Tipo: <type>int</type>, por omisión: varía según la configuración de la plataforma/núcleo.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-socket-recv-size">
   <term><constant>Memcached::OPT_SOCKET_RECV_SIZE</constant></term>
   <listitem>
    <simpara>
     El tamaño máximo del buffer de recepción por socket, en bytes.
    </simpara>
    <para>
     Tipo: <type>int</type>, por omisión: varía según la configuración de la plataforma/núcleo.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-connect-timeout">
   <term><constant>Memcached::OPT_CONNECT_TIMEOUT</constant></term>
   <listitem>
    <simpara>
     En modo no bloqueante, esta opción configura el tiempo de espera
     durante la conexión del socket, en milisegundos.
    </simpara>
    <para>Tipo: <type>int</type>, por omisión: <literal>1000</literal>.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-retry-timeout">
   <term><constant>Memcached::OPT_RETRY_TIMEOUT</constant></term>
   <listitem>
    <simpara>
     La duración, en segundos, de espera antes de intentar nuevamente una
     conexión que ha fallado.
    </simpara>
    <para>Tipo: <type>int</type>, por omisión: <literal>2</literal>.</para>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="memcached.constants.opt-dead-timeout">
   <term><constant>Memcached::OPT_DEAD_TIMEOUT</constant></term>
   <listitem>
    <simpara>
     La duración, en segundos, de espera antes de reintentar con los servidores muertos.
     <literal>0</literal> significa ningún reintento.
    </simpara>
    <para>Tipo: <type>int</type>, por omisión: <literal>0</literal>.</para>
    </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-send-timeout">
   <term><constant>Memcached::OPT_SEND_TIMEOUT</constant></term>
   <listitem>
    <simpara>
     Tiempo de espera de envío para el socket, en microsegundos. En los casos
     donde se utiliza un socket no bloqueante, esto permitirá tener
     tiempos de espera en el envío de datos, de todos modos.
    </simpara>
    <para>Tipo: <type>int</type>, por omisión: <literal>0</literal>.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-recv-timeout">
   <term><constant>Memcached::OPT_RECV_TIMEOUT</constant></term>
   <listitem>
    <simpara>
     Tiempo de espera de recepción para el socket, en microsegundos. En los casos
     donde se utiliza un socket no bloqueante, esto permitirá tener
     tiempos de espera en la recepción de datos, de todos modos.
    </simpara>
    <para>Tipo: &integer;, por omisión: <literal>0</literal>.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-poll-timeout">
   <term><constant>Memcached::OPT_POLL_TIMEOUT</constant></term>
   <listitem>
    <simpara>
     Tiempo de espera para la consulta de conexiones, en milisegundos.
    </simpara>
    <para>Tipo: &integer;, por omisión: <literal>1000</literal>.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-cache-lookups">
   <term><constant>Memcached::OPT_CACHE_LOOKUPS</constant></term>
   <listitem>
    <simpara>
     Activa o no el caché de DNS.
    </simpara>
    <para>Tipo: &boolean;, por omisión: &false;.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-server-failure-limit">
   <term><constant>Memcached::OPT_SERVER_FAILURE_LIMIT</constant></term>
   <listitem>
    <simpara>
     Especifica el límite del número de fallos de conexión. El servidor será
     retirado de la lista después de tantos fallos de conexión consecutivos.
    </simpara>
    <para>Tipo: &integer;, por omisión: <literal>5</literal>.</para>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="memcached.constants.opt-server-timeout-limit">
   <term><constant>Memcached::OPT_SERVER_TIMEOUT_LIMIT</constant></term>
   <listitem>
    <simpara>
     Especifica el límite de tiempo de espera para los intentos de conexión al servidor.
     El servidor será eliminado después de este número de tiempos de espera continuos de conexión.
    </simpara>
    <para>Tipo: <type>int</type>, por omisión: <literal>0</literal>.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-auto-eject-hosts">
   <term><constant>Memcached::OPT_AUTO_EJECT_HOSTS</constant></term>
   <listitem>
    <para>
     Elimina los servidores desactivados de la lista. Para utilizar con
     <constant>Memcached::OPT_SERVER_FAILURE_LIMIT</constant> y
     <constant>Memcached::OPT_SERVER_TIMEOUT_LIMIT</constant>.
    </para>
    <note>
     <para>
      Esta opción es reemplazada por
      <constant>Memcached::OPT_REMOVE_FAILED_SERVERS</constant>.
     </para>
    </note>
    <para>Tipo: <type>bool</type>, por omisión: &false;.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-verify-key">
   <term><constant>Memcached::OPT_VERIFY_KEY</constant></term>
   <listitem>
    <simpara>
     Activa la verificación de claves por memcached.
    </simpara>
    <para>Tipo: <type>bool</type>, por omisión: &false;.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-use-udp">
   <term><constant>Memcached::OPT_USE_UDP</constant></term>
   <listitem>
    <simpara>
     Utiliza UDP en lugar de TCP.
    </simpara>
    <para>Tipo: <type>bool</type>, por omisión: &false;.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-number-of-replicas">
   <term><constant>Memcached::OPT_NUMBER_OF_REPLICAS</constant></term>
   <listitem>
    <simpara>
     Almacena este número de réplicas de cada elemento en diferentes servidores.
    </simpara>
    <para>Tipo: <type>int</type>, por omisión: <literal>0</literal>.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-randomize-replica-reads">
   <term><constant>Memcached::OPT_RANDOMIZE_REPLICA_READS</constant></term>
   <listitem>
    <simpara>
     Randomiza el servidor de lectura de réplica.
    </simpara>
    <para>Tipo: <type>bool</type>, por omisión: &false;.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.opt-remove-failed-servers">
   <term><constant>Memcached::OPT_REMOVE_FAILED_SERVERS</constant></term>
   <listitem>
    <simpara>
     Elimina los servidores desactivados de la lista. Para utilizar con
     <constant>Memcached::OPT_SERVER_FAILURE_LIMIT</constant> y
     <constant>Memcached::OPT_SERVER_TIMEOUT_LIMIT</constant>.
    </simpara>
    <para>Tipo: <type>bool</type>, por omisión: &false;.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.have-igbinary">
   <term><constant>Memcached::HAVE_IGBINARY</constant></term>
   <listitem>
    <simpara>
     Indica si el soporte de la función de serialización
     igbinary está activado.
    </simpara>
    <para>Tipo: <type>bool</type>.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.have-json">
   <term><constant>Memcached::HAVE_JSON</constant></term>
   <listitem>
    <simpara>
     Indica si la función de serialización JSON
     está disponible.
    </simpara>
    <para>Tipo: <type>bool</type>.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.have-msgpack">
   <term><constant>Memcached::HAVE_MSGPACK</constant></term>
   <listitem>
    <simpara>Indica si el soporte del serializador msgpack está disponible.</simpara>
    <para>Tipo: <type>bool</type>.</para>
    <para>Disponible a partir de Memcached 3.0.0.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.have-zstd">
   <term><constant>Memcached::HAVE_ZSTD</constant></term>
   <listitem>
    <simpara>Indica si la soporte de la compresión ZSTD está disponible.</simpara>
    <para>Tipo: <type>bool</type>.</para>
    <para>Disponible a partir de Memcached 3.3.0.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.have-encoding">
   <term><constant>Memcached::HAVE_ENCODING</constant></term>
   <listitem>
    <simpara>
     Indica si el cifrado de datos mediante
     <methodname>Memcached::setEncodingKey</methodname> está soportado.
    </simpara>
    <para>Tipo: <type>bool</type>.</para>
    <para>Disponible a partir de Memcached 3.1.0.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.have-session">
   <term><constant>Memcached::HAVE_SESSION</constant></term>
   <listitem>
    <para>Tipo: <type>bool</type>.</para>
    <para>Disponible a partir de Memcached 3.0.0.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.have-sasl">
   <term><constant>Memcached::HAVE_SASL</constant></term>
   <listitem>
    <para>Tipo: <type>bool</type>.</para>
    <para>Disponible a partir de Memcached 3.0.0.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.get-extended">
   <term><constant>Memcached::GET_EXTENDED</constant></term>
   <listitem>
    <para>
     Una bandera para <methodname>Memcached::get</methodname>,
     <methodname>Memcached::getMulti</methodname> y
     <methodname>Memcached::getMultiByKey</methodname> para asegurar
     que los valores del token CAS también sean devueltos.
    </para>
    <para>Disponible a partir de Memcached 3.0.0.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.get-preserve-order">
   <term><constant>Memcached::GET_PRESERVE_ORDER</constant></term>
   <listitem>
    <para>Una opción para <methodname>Memcached::getMulti</methodname> y
     <methodname>Memcached::getMultiByKey</methodname> para asegurar que las
     claves sean devueltas en el mismo orden que su orden de solicitud.
     Las claves inexistentes toman entonces el valor &null;.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-success">
   <term><constant>Memcached::RES_SUCCESS</constant></term>
   <listitem>
    <para>
     La operación ha tenido éxito.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-failure">
   <term><constant>Memcached::RES_FAILURE</constant></term>
   <listitem>
    <para>
     La operación ha fallado, de una manera u otra.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-host-lookup-failure">
   <term><constant>Memcached::RES_HOST_LOOKUP_FAILURE</constant></term>
   <listitem>
    <para>
     La búsqueda DNS ha fallado.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-unknown-read-failure">
   <term><constant>Memcached::RES_UNKNOWN_READ_FAILURE</constant></term>
   <listitem>
    <para>
     Fallo de lectura en la red.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-protocol-error">
   <term><constant>Memcached::RES_PROTOCOL_ERROR</constant></term>
   <listitem>
    <para>
     Comando incorrecto en el protocolo memcached.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-client-error">
   <term><constant>Memcached::RES_CLIENT_ERROR</constant></term>
   <listitem>
    <para>
     Error del lado del cliente.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-server-error">
   <term><constant>Memcached::RES_SERVER_ERROR</constant></term>
   <listitem>
    <para>
     Error del lado del servidor.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-write-failure">
   <term><constant>Memcached::RES_WRITE_FAILURE</constant></term>
   <listitem>
    <para>
     Fallo de escritura en la red.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-data-exists">
   <term><constant>Memcached::RES_DATA_EXISTS</constant></term>
   <listitem>
    <para>
     Fallo de comparación y intercambio: el elemento que se intenta
     almacenar ha sido modificado desde la última lectura.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-notstored">
   <term><constant>Memcached::RES_NOTSTORED</constant></term>
   <listitem>
    <para>
     El elemento no ha sido almacenado, pero no debido a un error. Esto es
     normal, y significa que una condición para un añadido "<literal>add</literal>" o
     un reemplazo "<literal>replace</literal>" no ha sido satisfecha, o
     que un elemento ha sido puesto en una cola de borrado.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-notfound">
   <term><constant>Memcached::RES_NOTFOUND</constant></term>
   <listitem>
    <para>
     El elemento con esta clave no ha sido encontrado (con una operación
     "<literal>get</literal>" o "<literal>cas</literal>").
    </para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-partial-read">
   <term><constant>Memcached::RES_PARTIAL_READ</constant></term>
   <listitem>
    <para>
     Error de lectura parcial en la red.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-some-errors">
   <term><constant>Memcached::RES_SOME_ERRORS</constant></term>
   <listitem>
    <para>
     Han ocurrido errores durante una lectura múltiple.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-no-servers">
   <term><constant>Memcached::RES_NO_SERVERS</constant></term>
   <listitem>
    <para>
     Lista de servidores vacía.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-end">
   <term><constant>Memcached::RES_END</constant></term>
   <listitem>
    <para>
     Fin del conjunto de resultados.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-errno">
   <term><constant>Memcached::RES_ERRNO</constant></term>
   <listitem>
    <para>
     Error del sistema.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-buffered">
   <term><constant>Memcached::RES_BUFFERED</constant></term>
   <listitem>
    <para>
     La operación ha sido bufferizada.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-timeout">
   <term><constant>Memcached::RES_TIMEOUT</constant></term>
   <listitem>
    <para>
     El tiempo de ejecución de la operación ha expirado.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-bad-key-provided">
   <term><constant>Memcached::RES_BAD_KEY_PROVIDED</constant></term>
   <listitem>
    <para>
     Clave incorrecta.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-stored">
   <term><constant>Memcached::RES_STORED</constant></term>
   <listitem>
    <simpara>Elemento almacenado.</simpara>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-deleted">
   <term><constant>Memcached::RES_DELETED</constant></term>
   <listitem>
    <simpara>Elemento eliminado.</simpara>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-stat">
   <term><constant>Memcached::RES_STAT</constant></term>
   <listitem>
    <simpara>Estadísticas.</simpara>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-item">
   <term><constant>Memcached::RES_ITEM</constant></term>
   <listitem>
    <simpara>Elemento.</simpara>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-not-supported">
   <term><constant>Memcached::RES_NOT_SUPPORTED</constant></term>
   <listitem>
    <simpara>No soportado.</simpara>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-fetch-notfinished">
   <term><constant>Memcached::RES_FETCH_NOTFINISHED</constant></term>
   <listitem>
    <simpara>Recuperación no terminada.</simpara>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-server-marked-dead">
   <term><constant>Memcached::RES_SERVER_MARKED_DEAD</constant></term>
   <listitem>
    <simpara>Servidor marcado como muerto.</simpara>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-unknown-stat-key">
   <term><constant>Memcached::RES_UNKNOWN_STAT_KEY</constant></term>
   <listitem>
    <simpara>Clave de estadística desconocida.</simpara>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-invalid-host-protocol">
   <term><constant>Memcached::RES_INVALID_HOST_PROTOCOL</constant></term>
   <listitem>
    <simpara>Protocolo de host inválido.</simpara>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-memory-allocation-failure">
   <term><constant>Memcached::RES_MEMORY_ALLOCATION_FAILURE</constant></term>
   <listitem>
    <simpara>Fallo de asignación de memoria.</simpara>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-connection-socket-create-failure">
   <term><constant>Memcached::RES_CONNECTION_SOCKET_CREATE_FAILURE</constant></term>
   <listitem>
    <para>No se puede crear un socket.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-payload-failure">
   <term><constant>Memcached::RES_PAYLOAD_FAILURE</constant></term>
   <listitem>
    <para>
     Fallo de procesamiento: no se puede comprimir,
     descomprimir o serializar el valor.
    </para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-auth-problem">
   <term><constant>Memcached::RES_AUTH_PROBLEM</constant></term>
   <listitem>
    <para>Disponible a partir de Memcached 3.0.0.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-auth-failure">
   <term><constant>Memcached::RES_AUTH_FAILURE</constant></term>
   <listitem>
    <para>Disponible a partir de Memcached 3.0.0.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-auth-continue">
   <term><constant>Memcached::RES_AUTH_CONTINUE</constant></term>
   <listitem>
    <para>Disponible a partir de Memcached 3.0.0.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-e2big">
   <term><constant>Memcached::RES_E2BIG</constant></term>
   <listitem>
    <para>Disponible a partir de Memcached 3.0.0.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-key-too-big">
   <term><constant>Memcached::RES_KEY_TOO_BIG</constant></term>
   <listitem>
    <para>Disponible a partir de Memcached 3.0.0.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-server-temporarily-disabled">
   <term><constant>Memcached::RES_SERVER_TEMPORARILY_DISABLED</constant></term>
   <listitem>
    <para>Disponible a partir de Memcached 3.0.0.</para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="memcached.constants.res-server-memory-allocation-failure">
   <term><constant>Memcached::RES_SERVER_MEMORY_ALLOCATION_FAILURE</constant></term>
   <listitem>
    <para>Disponible a partir de Memcached 3.0.0.</para>
   </listitem>
  </varlistentry>

 </variablelist>
</appendix>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
