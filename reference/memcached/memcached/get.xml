<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
 <!-- EN-Revision: 1d8068ecb070fdc360d750e0c1f3f15796e61ec0 Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: yes -->
<refentry xml:id="memcached.get" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>Memcached::get</refname>
  <refpurpose>Lee un elemento</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis role="Memcached">
   <modifier>public</modifier> <type>mixed</type><methodname>Memcached::get</methodname>
   <methodparam><type>string</type><parameter>key</parameter></methodparam>
   <methodparam choice="opt"><type class="union"><type>callable</type><type>null</type></type><parameter>cache_cb</parameter><initializer>&null;</initializer></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>get_flags</parameter><initializer>0</initializer></methodparam>
  </methodsynopsis>
  <para>
   <function>Memcached::get</function> lee un elemento que ha sido almacenado previamente
   con la clave <parameter>key</parameter>. Si el elemento es encontrado, y que
   <parameter>get_flags</parameter> es proporcionado <constant>Memcached::GET_EXTENDED</constant>,
   el valor del token CAS del elemento también será retornado.
   Ver <methodname>Memcached::cas</methodname> para saber cómo utilizar los
   tokens CAS. Una <link linkend="memcached.callbacks">función de retrollamada en caso de ausencia</link> puede ser
   especificada con el parámetro <parameter>cache_cb</parameter>.
  </para>
  <para>
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>key</parameter></term>
     <listitem>
      <para>
       La clave del elemento a leer.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>cache_cb</parameter></term>
     <listitem>
      <para>
       Una función de retrollamada en caso de ausencia o &null;.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>get_flags</parameter></term>
     <listitem>
      <para>
       Bandera para controlar el resultado retornado.
       Cuando <constant>Memcached::GET_EXTENDED</constant>
       es proporcionada, la función retornará también el token CAS.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Retorna el valor almacenado en la caché, o bien &false; en caso contrario.
   Si <parameter>get_flags</parameter> es definido a
   <constant>Memcached::GET_EXTENDED</constant>, un &array; conteniendo
   el valor y el token CAS es retornado en lugar de solo el valor.
   El método <methodname>Memcached::getResultCode</methodname> retorna
   <constant>Memcached::RES_NOTFOUND</constant> si la clave no existe.
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <informaltable>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>&Version;</entry>
      <entry>&Description;</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>PECL memcached 3.0.0</entry>
      <entry>
       El parámetro <parameter role="reference">cas_tokens</parameter> ha sido eliminado.
       <constant>Memcached::GET_EXTENDED</constant> ha sido añadida y cuando es pasada
       como bandera asegura que los tokens CAS sean recuperados.
      </entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Ejemplo con <function>Memcached::get</function> 1</title>
    <programlisting role="php">
<![CDATA[
<?php
$m = new Memcached();
$m->addServer('localhost', 11211);

$m->set('foo', 100);
var_dump($m->get('foo'));
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
int(100)
]]>
    </screen>
   </example>
   <example>
    <title>Ejemplo con <function>Memcached::get</function> 2</title>
    <programlisting role="php">
<![CDATA[
<?php
$m = new Memcached();
$m->addServer('localhost', 11211);

if (!($ip = $m->get('ip_block'))) {
    if ($m->getResultCode() == Memcached::RES_NOTFOUND) {
        $ip = array();
        $m->set('ip_block', $ip);
    } else {
        /* log error */
        /* ...       */
    }
}
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><methodname>Memcached::getByKey</methodname></member>
    <member><methodname>Memcached::getMulti</methodname></member>
    <member><methodname>Memcached::getDelayed</methodname></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
