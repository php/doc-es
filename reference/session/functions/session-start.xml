<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 151e61773c016edcae8fd4989ad9a86ffd03c283 Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: yes -->
<refentry xml:id="function.session-start" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>session_start</refname>
  <refpurpose>Inicia una nueva sesión o reanuda una sesión existente</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>bool</type><methodname>session_start</methodname>
   <methodparam choice="opt"><type>array</type><parameter>options</parameter><initializer>[]</initializer></methodparam>
  </methodsynopsis>
  <para>
   <function>session_start</function> crea una sesión o
   restaura la encontrada en el servidor, mediante el identificador
   de sesión pasado en una petición GET, POST o mediante una cookie.
  </para>
  <para>
   Cuando <function>session_start</function> es llamada o cuando una sesión comienza
   automáticamente, PHP va a llamar a los gestores de apertura y lectura. Estos son
   gestores internos proporcionados por PHP (como archivos, SQLite o Memcached) o bien
   gestores personalizados definidos mediante
   <function>session_set_save_handler</function>. La función de lectura va a recuperar toda
   sesión existente (almacenada en forma serializada) y va a deserializar los datos para poblar
   $_SESSION.
  </para>
  <para>
   Para utilizar una sesión nombrada, debe
   llamarse a <function>session_name</function> antes de llamar
   a <function>session_start</function>.
  </para>
  <para>
   Cuando <link linkend="ini.session.use-trans-sid">session.use_trans_sid</link>
   está activada, la función <function>session_start</function> registrará un
   gestor interno de salida para la reescritura de URLs.
  </para>
  <para>
   Si un usuario utiliza <literal>ob_gzhandler</literal> o el equivalente
   <function>ob_start</function>, el orden de llamada de las funciones es importante
   para una salida correcta. Por ejemplo,
   <literal>ob_gzhandler</literal> debe ser registrado antes de iniciar la sesión.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <variablelist>
   <varlistentry>
    <term><parameter>options</parameter></term>
    <listitem>
     <para>
      Si se proporciona, se trata de un array asociativo de opciones que reemplazará
      <link linkend="session.configuration">las directivas de configuración de sesión</link>
      actualmente definidas.
      Las claves no deben incluir el prefijo <literal>session.</literal>.
     </para>
     <para>
      Además del conjunto normal de directivas de configuración, una opción
      <literal>read_and_close</literal> puede también ser proporcionada. Si la
      valor es definido como &true;, esto provoca el cierre inmediato de
      la sesión después de la lectura, lo que evita cualquier bloqueo innecesario si los
      datos de sesión no son modificados.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Devuelve &true; si una sesión pudo ser iniciada con éxito, y &false; en caso contrario.
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>7.1.0</entry>
       <entry>
        <function>session_start</function> ahora devuelve &false; y
        ya no inicializa <varname>$_SESSION</varname> cuando no ha podido
        iniciar la sesión.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <refsect2>
   <title>Un ejemplo de sesión básica</title>

  <para>
   <example>
    <title><filename>page1.php</filename></title>
    <programlisting role="php">
<![CDATA[
<?php
// page1.php

session_start();

echo 'Bienvenido a la página número 1';

$_SESSION['favcolor'] = 'green';
$_SESSION['animal']   = 'cat';
$_SESSION['time']     = time();

// Funciona si la cookie ha sido aceptada
echo '<br /><a href="page2.php">página 2</a>';

// O bien, indicando explícitamente el identificador de sesión
echo '<br /><a href="page2.php?' . SID . '">página 2</a>';
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   Después de ver la página <filename>page1.php</filename> con un navegador,
   la segunda página <filename>page2.php</filename> (cuyo código sigue) va a mostrar
   mágicamente los datos de sesión. Consulte la referencia sobre
   las <link linkend="ref.session">sesiones</link> para obtener información
   sobre la <link linkend="session.idpassing">propagación de identificadores de sesión</link>,
   y el uso de la constante <constant>SID</constant>.
  </para>
  <para>
   <example>
    <title>Recuperación de la sesión: <filename>page2.php</filename></title>
    <programlisting role="php">
<![CDATA[
<?php
// page2.php

session_start();

echo 'Bienvenido a la página número 2<br />';

echo $_SESSION['favcolor']; // green
echo $_SESSION['animal'];   // cat
echo date('Y m d H:i:s', $_SESSION['time']);

// Podría utilizarse la constante SID aquí, al igual que en la página page1.php
echo '<br /><a href="page1.php">página 1</a>';
?>
]]>
    </programlisting>
   </example>
  </para>
  </refsect2>
  <refsect2>
   <title>Proporcionar opciones a <function>session_start</function></title>

   <example>
    <title>Reemplazo de la duración del cookie</title>
    <programlisting role="php">
<![CDATA[
<?php
// Esto envía un cookie persistente que dura un día.
session_start([
    'cookie_lifetime' => 86400,
]);
?>
]]>
    </programlisting>
   </example>

   <example>
    <title>Lectura de la sesión y cierre</title>
    <programlisting role="php">
<![CDATA[
<?php
// Si sabemos que no necesitamos cambiar
// nada en la sesión, podemos simplemente
// leer y cerrar de inmediato para evitar bloquear
// el archivo de sesión y bloquear otras páginas
session_start([
    'cookie_lifetime' => 86400,
    'read_and_close'  => true,
]);
]]>
    </programlisting>
   </example>
  </refsect2>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <note>
   <para>
    Para utilizar sesiones basadas en cookies, <function>session_start</function>
    debe ser llamada antes de mostrar cualquier cosa en el navegador.
   </para>
  </note>
  <note>
   <para>
    El uso de
    <link linkend="ini.zlib.output-compression"><option>zlib.output_compression</option></link>
    es recomendado, en lugar de <function>ob_gzhandler</function>.
   </para>
  </note>
  <note>
   <para>
    Esta función va a emitir varios encabezados HTTP, dependiendo
    de la configuración. Consulte <function>session_cache_limiter</function> para
    personalizar estos encabezados.
   </para>
  </note>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><varname>$_SESSION</varname></member>
    <member>
     La directiva de configuración <link linkend="ini.session.auto-start">session.auto_start</link>
    </member>
    <member><function>session_id</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
