<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 8ac065774e87c73919ee3508fc957adebe1c4408 Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: yes -->

<chapter xml:id="simplexml.examples" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 &reftitle.examples;
 <section xml:id="simplexml.examples-basic">
  <title>Uso básico de SimpleXML</title>
  <para>
   Varios ejemplos de este capítulo requieren una cadena XML. En lugar de
   repetirla en cada ejemplo, se colocará en un archivo que se incluirá en
   cada uno de ellos. El contenido de este archivo se ilustra con el ejemplo
   que sigue. De lo contrario, puede crearse un documento XML y leerse con
   <function>simplexml_load_file</function>.
  </para>
  <para>
   <example>
    <title>Ejemplo de archivo incluido examples/simplexml-data.php con una cadena XML</title>
    <programlisting role="php" xml:id="simplexml.examples.movie">
<![CDATA[
<?php
$xmlstr = <<<XML
<?xml version='1.0' standalone='yes'?>
<movies>
 <movie>
  <title>PHP: Behind the Parser</title>
  <characters>
   <character>
    <name>Ms. Coder</name>
    <actor>Onlivia Actora</actor>
   </character>
   <character>
    <name>Mr. Coder</name>
    <actor>El Act&#211;r</actor>
   </character>
  </characters>
  <plot>
   So, this language. It's like, a programming language. Or is it a
   scripting language? All is revealed in this thrilling horror spoof
   of a documentary.
  </plot>
  <great-lines>
   <line>PHP solves all my web problems</line>
  </great-lines>
  <rating type="thumbs">7</rating>
  <rating type="stars">5</rating>
 </movie>
</movies>
XML;
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   La simplicidad de SimpleXML se hace más evidente cuando se intenta
   extraer una cadena o un número de un documento XML básico.
   <example>
    <title>Lectura de <literal>&lt;plot&gt;</literal></title>
    <programlisting role="php">
<![CDATA[
<?php
include 'examples/simplexml-data.php';

$movies = new SimpleXMLElement($xmlstr);

echo $movies->movie[0]->plot;
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[

   So, this language. It's like, a programming language. Or is it a
   scripting language? All is revealed in this thrilling horror spoof
   of a documentary.

]]>
    </screen>
   </example>
  </para>
  <para>
   El acceso a los elementos de un documento XML que contiene caracteres no permitidos
   según la convención de nombres de PHP (por ejemplo, palabras clave) es posible
   encapsulando el nombre del elemento entre corchetes y comillas simples.
   <example>
    <title>Recuperación de <literal>&lt;line&gt;</literal></title>
    <programlisting role="php">
<![CDATA[
<?php
include 'examples/simplexml-data.php';

$movies = new SimpleXMLElement($xmlstr);

echo $movies->movie->{'great-lines'}->line;
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
PHP solves all my web problems
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title>Acceder a un elemento no único con SimpleXML</title>
    <simpara>
     Cuando existen múltiples instancias de un elemento como hijos de un
     elemento padre único, pueden aplicarse las técnicas normales de iteración.
    </simpara>
    <programlisting role="php">
<![CDATA[
<?php
include 'examples/simplexml-data.php';

$movies = new SimpleXMLElement($xmlstr);

/* Para cada <character>, se muestra un <name>. */
foreach ($movies->movie->characters->character as $character) {
   echo $character->name, ' played by ', $character->actor, PHP_EOL;
}

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Ms. Coder played by Onlivia Actora
Mr. Coder played by El ActÓr
]]>
    </screen>
   </example>
  </para>
  <note>
   <para>
    Las propiedades (<literal>$movies->movie</literal> en nuestro ejemplo anterior)
    no son arrays. Son objetos
    <link linkend="class.iterator">iterables</link> y
    <link linkend="class.arrayaccess">accesibles</link>.
   </para>
  </note>
  <para>
   <example>
    <title>Uso de atributos</title>
    <simpara>
     Hasta ahora, solo se ha cubierto la lectura de los nombres de los elementos
     y sus valores. SimpleXML también puede acceder a sus atributos.
     El acceso a los atributos de un elemento se realiza de la misma manera que
     el acceso a los elementos de un array.
    </simpara>
    <programlisting role="php">
<![CDATA[
<?php
include 'examples/simplexml-data.php';

$movies = new SimpleXMLElement($xmlstr);

/* Acceso al nodo <rating> del primer <movie>.
 * Mostrar también los atributos de <rating>. */
foreach ($movies->movie[0]->rating as $rating) {
    switch((string) $rating['type']) { // Obtener atributos como índices de elementos
    case 'thumbs':
        echo $rating, ' thumbs up';
        break;
    case 'stars':
        echo $rating, ' stars';
        break;
    }
}
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
7 thumbs up5 stars
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title>Comparación de elementos y atributos con texto</title>
    <simpara>
     Para comparar un elemento o un atributo con una cadena de caracteres
     o para pasarlo a una función que requiera una cadena de caracteres,
     debe convertirse en una cadena utilizando
     <literal>(string)</literal>.
     De lo contrario, PHP tratará el elemento como un objeto.
    </simpara>
    <programlisting role="php">
<![CDATA[
<?php
include 'examples/simplexml-data.php';

$movies = new SimpleXMLElement($xmlstr);

if ((string) $movies->movie->title == 'PHP: Behind the Parser') {
    print 'My favorite movie.';
}

echo htmlentities((string) $movies->movie->title);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
My favorite movie.PHP: Behind the Parser
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title>Comparación de 2 elementos</title>
    <simpara>
     Dos objetos <classname>SimpleXMLElement</classname>
     se consideran diferentes incluso si
     apuntan al mismo elemento.
    </simpara>
    <programlisting role="php">
<![CDATA[
<?php
include 'examples/simplexml-data.php';

$movies1 = new SimpleXMLElement($xmlstr);
$movies2 = new SimpleXMLElement($xmlstr);
var_dump($movies1 == $movies2);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
bool(false)
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title>Uso de XPath</title>
    <simpara>
     SimpleXML incluye soporte integrado para <acronym>XPath</acronym>.
     Para encontrar todos los elementos <literal>&lt;character&gt;</literal>.
    </simpara>
    <simpara>
     '<literal>//</literal>' actúa como comodín. Para especificar una ruta absoluta,
     se elimina una barra.
    </simpara>
    <programlisting role="php">
<![CDATA[
<?php
include 'examples/simplexml-data.php';

$movies = new SimpleXMLElement($xmlstr);

foreach ($movies->xpath('//character') as $character) {
    echo $character->name, ' played by ', $character->actor, PHP_EOL;
}
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Ms. Coder played by Onlivia Actora
Mr. Coder played by El ActÓr
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title>Asignación de valores</title>
    <simpara>
     Los datos en SimpleXML no tienen que ser constantes. El objeto permite
     la manipulación de todos estos elementos.
    </simpara>
    <programlisting role="php">
<![CDATA[
<?php
include 'examples/simplexml-data.php';
$movies = new SimpleXMLElement($xmlstr);

$movies->movie[0]->characters->character[0]->name = 'Miss Coder';

echo $movies->asXML();
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
<?xml version="1.0" standalone="yes"?>
<movies>
 <movie>
  <title>PHP: Behind the Parser</title>
  <characters>
   <character>
    <name>Miss Coder</name>
    <actor>Onlivia Actora</actor>
   </character>
   <character>
    <name>Mr. Coder</name>
    <actor>El Act&#xD3;r</actor>
   </character>
  </characters>
  <plot>
   So, this language. It's like, a programming language. Or is it a
   scripting language? All is revealed in this thrilling horror spoof
   of a documentary.
  </plot>
  <great-lines>
   <line>PHP solves all my web problems</line>
  </great-lines>
  <rating type="thumbs">7</rating>
  <rating type="stars">5</rating>
 </movie>
</movies>
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title>Añadir elementos y atributos</title>
    <simpara>
     SimpleXML es capaz de añadir fácilmente
     hijos y atributos.
    </simpara>
    <programlisting role="php">
<![CDATA[
<?php
include 'examples/simplexml-data.php';
$movies = new SimpleXMLElement($xmlstr);

$character = $movies->movie[0]->characters->addChild('character');
$character->addChild('name', 'Mr. Parser');
$character->addChild('actor', 'John Doe');

$rating = $movies->movie[0]->addChild('rating', 'PG');
$rating->addAttribute('type', 'mpaa');

echo $movies->asXML();
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
<?xml version="1.0" standalone="yes"?>
<movies>
 <movie>
  <title>PHP: Behind the Parser</title>
  <characters>
   <character>
    <name>Ms. Coder</name>
    <actor>Onlivia Actora</actor>
   </character>
   <character>
    <name>Mr. Coder</name>
    <actor>El Act&#xD3;r</actor>
   </character>
  <character><name>Mr. Parser</name><actor>John Doe</actor></character></characters>
  <plot>
   So, this language. It's like, a programming language. Or is it a
   scripting language? All is revealed in this thrilling horror spoof
   of a documentary.
  </plot>
  <great-lines>
   <line>PHP solves all my web problems</line>
  </great-lines>
  <rating type="thumbs">7</rating>
  <rating type="stars">5</rating>
 <rating type="mpaa">PG</rating></movie>
</movies>
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title>Interoperabilidad DOM</title>
    <simpara>
     PHP tiene un mecanismo para convertir nodos XML entre los formatos
     SimpleXML y DOM. Este ejemplo muestra cómo cambiar un elemento DOM a
     SimpleXML.
    </simpara>
    <programlisting role="php">
<![CDATA[
<?php
$dom = new DOMDocument;
$dom->loadXML('<books><book><title>blah</title></book></books>');
if (!$dom) {
    echo 'Error al analizar el documento';
    exit;
}

$books = simplexml_import_dom($dom);

echo $books->book[0]->title;
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
blah
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title>Uso de espacios de nombres</title>
    <programlisting role="php">
     <![CDATA[
<?php
$data = <<<XML
<movies xmlns="http://default" xmlns:a="http://a">
 <movie xml:id="movie1" a:link="IMDB">
  <a:actor>Onlivia Actora</a:actor>
 </movie>
</movies>
XML;

$movies = simplexml_load_string($data);

// El espacio de nombres http://www.w3.org/XML/1998/namespace está disponible bajo el nombre "xml".
echo $movies->movie->attributes("xml", true)["id"] . "\n";

// Los atributos con espacio de nombres pueden recuperarse con attributes().
echo $movies->movie->attributes("a", true)["link"] . "\n";

// El uso de la URI del espacio de nombres permite usar cualquier alias en el documento.
echo $movies->movie->attributes("http://a")["link"] . "\n";

// Los hijos pueden recuperarse con children().
echo $movies->movie->children("http://a")->actor . "\n";

// El uso de xpath() con un espacio de nombres requiere registrarlo primero.
$movies->registerXPathNamespace("a", "http://a");
echo count($movies->xpath("//a:actor")) . "\n";

// Incluso el espacio de nombres por defecto debe registrarse.
$movies->registerXPathNamespace("default", "http://default");
echo count($movies->xpath("//default:movie")) . "\n";

// Esto está vacío.
echo count($movies->xpath("//movie")) . "\n";
?>
]]>
        </programlisting>
       </example>
      </para>
 </section>

 <section xml:id="simplexml.examples-errors">
  <title>Manejo de errores XML</title>
  <para>
   El manejo de errores XML al cargar un documento es
   una tarea sencilla. Utilizando las funcionalidades
   <link linkend="book.libxml">libxml</link>, es posible suprimir
   todos los errores XML al cargar un documento, y luego recorrerlos.
  </para>
  <para>
   El objeto <classname>libXMLError</classname>, devuelto por la función
   <function>libxml_get_errors</function>, contiene varias propiedades
   como el <link linkend="libxmlerror.props.message">mensaje</link>,
   la <link linkend="libxmlerror.props.line">línea</link> y la
   <link linkend="libxmlerror.props.column">columna</link> (posición) del error.
  </para>
  <para>
   <example>
    <title>Carga de cadenas XML rotas</title>
    <programlisting role="php" xml:id="simplexml.examples.error">
<![CDATA[
<?php
libxml_use_internal_errors(true);
$sxe = simplexml_load_string("<?xml version='1.0'><broken><xml></broken>");
if ($sxe === false) {
    echo "Error al cargar el XML\n";
    foreach(libxml_get_errors() as $error) {
        echo "\t", $error->message;
    }
}
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Error al cargar el XML
    Blank needed here
    parsing XML declaration: '?>' expected
    Opening and ending tag mismatch: xml line 1 and broken
    Premature end of data in tag broken line 1
]]>
    </screen>
   </example>
  </para>
  <section role="seealso"><!-- {{{ -->
   &reftitle.seealso;
   <para>
    <simplelist>
     <member><function>libxml_use_internal_errors</function></member>
     <member><function>libxml_get_errors</function></member>
     <member><xref linkend="class.libxmlerror" /></member>
    </simplelist>
   </para>
  </section>
 </section>

</chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
