<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: c1f37a6c270aadbbb3da56a3973ffd62197adf2b Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: yes -->
<refentry xml:id="function.simplexml-load-file" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>simplexml_load_file</refname>
  <refpurpose>Convierte un fichero XML en objeto</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type class="union"><type>SimpleXMLElement</type><type>false</type></type><methodname>simplexml_load_file</methodname>
   <methodparam><type>string</type><parameter>filename</parameter></methodparam>
   <methodparam choice="opt"><type class="union"><type>string</type><type>null</type></type><parameter>class_name</parameter><initializer>SimpleXMLElement::class</initializer></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>options</parameter><initializer>0</initializer></methodparam>
   <methodparam choice="opt"><type>string</type><parameter>namespace_or_prefix</parameter><initializer>""</initializer></methodparam>
   <methodparam choice="opt"><type>bool</type><parameter>is_prefix</parameter><initializer>&false;</initializer></methodparam>
  </methodsynopsis>
  <para>
   Convierte el documento XML <parameter>filename</parameter>
   en un objeto de tipo <type>SimpleXMLElement</type>.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>filename</parameter></term>
     <listitem>
      <para>
       Ruta hacia el fichero XML
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>class_name</parameter></term>
     <listitem>
      <para>
       Puede utilizarse este parámetro opcional, y así,
       la función <function>simplexml_load_file</function> devolverá un objeto de
       la clase especificada. Esta clase debe extender la clase
       <type>SimpleXMLElement</type>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>options</parameter></term>
     <listitem>
      &dom.parameter.options;
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>namespace_or_prefix</parameter></term>
     <listitem>
      <para>
       Prefijo o la URI del espacio de nombres.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>is_prefix</parameter></term>
     <listitem>
      <para>
       &true; si <parameter>namespace_or_prefix</parameter> es un prefijo,
       &false; si es la URI; por omisión, &false;.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Devuelve un &object; de la clase <type>SimpleXMLElement</type>
   cuyas propiedades contienen los datos del documento XML, &return.falseforfailure;.
  </para>
  &return.falseproblem;
 </refsect1>

 <refsect1 role="errors"><!-- {{{ -->
  &reftitle.errors;
  <para>
   Genera un mensaje de error de nivel <constant>E_WARNING</constant>
   para cada error encontrado en los datos XML.
  </para>
  <tip>
   <para>
    Utilice la función <function>libxml_use_internal_errors</function>
    para suprimir todos los errores XML, y la función
    <function>libxml_get_errors</function> para recorrerlos.
   </para>
  </tip>
 </refsect1><!-- }}} -->

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Interpretación de un documento XML</title>
    <programlisting role="php">
<![CDATA[
<?php
// El fichero examples/book.xml contiene un documento XML con un elemento raíz
// y al menos un elemento /[raíz]/title.

if (file_exists('examples/book.xml')) {
    $xml = simplexml_load_file('examples/book.xml');

    print_r($xml);
} else {
    exit('Fallo al abrir el fichero examples/test.xml.');
}
?>
]]>
    </programlisting>
    <para>
     Este script mostrará, en caso de éxito:
    </para>
    <screen>
<![CDATA[
SimpleXMLElement Object
(
  [book] => Array
  ...
)
]]>
    </screen>
    <simpara>
     A partir de ahí, puede utilizarse <literal>$xml-&gt;title</literal>
     y cualquier otro elemento.
    </simpara>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>simplexml_load_string</function></member>
    <member><methodname>SimpleXMLElement::__construct</methodname></member>
    <member><xref linkend="simplexml.examples-errors"/></member>
    <member><function>libxml_use_internal_errors</function></member>
    <member><xref linkend="simplexml.examples-basic"/></member>
    <member><function>libxml_set_streams_context</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
