<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 45042fef652f1b4e904e809fcbfcf31f6c60670b Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: no -->

<refentry xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://docbook.org/ns/docbook" xml:id="function.echo">
 <refnamediv>
  <refname>echo</refname>
  <refpurpose>Muestra una string</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>void</type><methodname>echo</methodname>
   <methodparam rep="repeat"><type>string</type><parameter>expressions</parameter></methodparam>
  </methodsynopsis>
  <simpara>
   Muestra una o varias expresiones, sin espacios o nueva línea adicionales.
  </simpara>
  <para>
   <literal>echo</literal> no es una función sino una construcción del lenguaje.
   Sus argumentos son una lista de expresiones que siguen la palabra clave <literal>echo</literal>,
   separados por comas, y no delimitados por paréntesis.
   A diferencia de otras construcciones del lenguaje, <literal>echo</literal>
   no tiene valor de retorno, por lo que no puede ser utilizada en
   el contexto de una expresión.
  </para>
  <para>
   <literal>echo</literal> también dispone de una sintaxis corta,
   donde se puede hacer seguir inmediatamente la etiqueta PHP de apertura con un
   signo igual (<literal>=</literal>).
   Esta sintaxis está disponible incluso si la directiva de configuración
   <link linkend="ini.short-open-tag"><option>short_open_tag</option></link>
   está desactivada.
   <informalexample>
    <programlisting role="php">
<![CDATA[
Tengo <?=$foo?> foo.
]]>
    </programlisting>
   </informalexample>
  </para>
  <para>
   La mayor diferencia con <function>print</function> es que
   <literal>echo</literal> acepta múltiples argumentos y no retorna
   ningún valor.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>expressions</parameter></term>
     <listitem>
      <para>
       Una o varias expresiones de string a mostrar,
       separadas por comas.
       Los valores que no son strings serán convertidos
       a strings, incluso si la directiva
       <link linkend="language.types.declarations.strict"><literal>strict_types</literal></link>
       está activada.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.void;
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Ejemplo con <literal>echo</literal></title>
    <programlisting role="php">
<![CDATA[
<?php
echo "echo no requiere paréntesis.";

// Las strings pueden ser pasadas individualmente como múltiples argumentos o
// concatenadas y pasadas como un solo argumento
echo 'Esta ', 'string ', 'fue ', 'creada ', 'con múltiples parámetros.', "\n";
echo 'Esta ' . 'string ' . 'fue ' . 'creada ' . 'con concatenación.' . "\n";

// Ninguna nueva línea o espacio es añadido; lo siguiente muestra "helloworld", todo en una línea
echo "hola";
echo "mundo";

// Igual que lo anterior
echo "hola", "mundo";

echo "Esta string abarca
múltiples líneas. Los saltos de línea serán
mostrados también";

echo "Esta string abarca\nmúltiples líneas. Los saltos de línea serán\nmostrados también.";

// El argumento puede ser cualquier expresión que produzca una string
$foo = "ejemplo";
echo "foo es $foo"; // foo es ejemplo

$frutas = ["limón", "naranja", "plátano"];
echo implode(" y ", $frutas); // limón y naranja y plátano

// Las expresiones que no son strings son convertidas a strings, incluso si declare(strict_types=1) es utilizado
echo 6 * 7; // 42

// Sin embargo, los siguientes ejemplos funcionarán:
($some_var) ? print 'true' : print 'false'; // print también es una construcción, pero
                                            // es una expresión válida, retornando 1.
                                            // Por lo tanto puede ser utilizada en este contexto.

echo $some_var ? 'true': 'false'; // evaluando la expresión primero y luego pasándola a echo
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title><literal>echo</literal> no es una expresión</title>
    <programlisting role="php" annotations="non-interactive">
<![CDATA[
<?php
// Debido a que echo no se comporta como una expresión, el siguiente código es inválido.
($some_var) ? echo 'true' : echo 'false';
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  &note.language-construct;

  <note>
   <title>Uso con paréntesis</title>
   <para>
    Rodear un solo argumento de <literal>echo</literal> con paréntesis
    no generará un error de sintaxis, y produce una sintaxis similar a una
    llamada normal de función. Sin embargo, esto puede ser engañoso, ya que los
    paréntesis son en realidad parte de la expresión que se está
    mostrando, y no parte de la sintaxis de <literal>echo</literal>
    en sí mismo.
   <example>
    <title>Uso de paréntesis</title>
     <programlisting role="php">
      <![CDATA[
<?php
echo "hola", PHP_EOL;
// muestra "hola"

echo("hola"), PHP_EOL;
// también muestra "hola", ya que ("hola") es una expresión válida

echo(1 + 2) * 3, PHP_EOL;
// muestra "9"; el paréntesis permite que 1+2 sea evaluado primero, luego 3*3
// echo ve el resultado de la expresión como un solo argumento

echo "hola", " mundo", PHP_EOL;
// muestra "hola mundo"

echo("hola"), (" mundo"), PHP_EOL;
// muestra "hola mundo"; los paréntesis son parte de cada expresión
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
    <example>
     <title>Expresión inválida</title>
     <programlisting role="php" annotations="non-interactive">
     <![CDATA[
<?php
echo("hola", " mundo"), PHP_EOL;
// Genera un error de análisis ya que ("hola", " mundo") no es una expresión válida
?>
]]>
     </programlisting>
    </example>
   </para>
  </note>

  <tip>
   <para>
    Pasar múltiples argumentos a <literal>echo</literal> permite evitar
    complicaciones que aparecen debido a la precedencia de la operación de
    concatenación en PHP. Por ejemplo, el operador de concatenación tiene una
    precedencia mayor que el operador ternario, y anteriormente a PHP 8.0.0,
    tenía la misma precedencia que la suma y la resta:
   </para>
   <programlisting role="php">
<![CDATA[
<?php
// A continuación, la expresión 'Hola ' . isset($name) es evaluada primero,
// y siempre es verdadera, por lo que el argumento para echo siempre es $name
echo 'Hola ' . isset($name) ? $name : 'John Doe' . '!';

// El comportamiento deseado requiere paréntesis adicionales
echo 'Hola ' . (isset($name) ? $name : 'John Doe') . '!';

// En PHP anterior a 8.0.0, lo siguiente muestra "2", en lugar de "Suma: 3"
echo 'Suma: ' . 1 + 2;

// Nuevamente, añadir paréntesis asegura el orden de evaluación deseado
echo 'Suma: ' . (1 + 2);
]]>
   </programlisting>
   <para>
    Si se proporcionan múltiples argumentos, entonces los paréntesis no serán
    necesarios para aumentar la precedencia, ya que cada expresión está separada:
   </para>
   <programlisting role="php">
<![CDATA[
<?php
echo "Hola ", isset($name) ? $name : "John Doe", "!";

echo "Suma: ", 1 + 2;
]]>
   </programlisting>
  </tip>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>print</function></member>
    <member><function>printf</function></member>
    <member><function>flush</function></member>
    <member><link linkend="language.types.string">Forma de especificar strings literales</link></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
