<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: e095023e408c8cb6378ae16bb6870343a3946919 Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: yes -->
<refentry xmlns="http://docbook.org/ns/docbook" xml:id="function.crc32">
 <refnamediv>
  <refname>crc32</refname>
  <refpurpose>Calcula la suma de comprobación CRC32</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>int</type><methodname>crc32</methodname>
   <methodparam><type>string</type><parameter>string</parameter></methodparam>
  </methodsynopsis>
  <para>
   Genera la suma de comprobación cíclica CRC32, calculada en 32 bits, y
   aplicada a la cadena <parameter>string</parameter>. Esta función se
   utiliza generalmente para validar la integridad de los datos durante una
   transmisión.
  </para>
  <warning>
   <simpara>
    Debido a que el tipo entero de PHP es firmado,
    la mayoría de las sumas de comprobación crc32 resultan ser
    enteros negativos en plataformas de 32 bits. En instalaciones
    de 64 bits, todos los resultados de la función <function>crc32</function>
    serán enteros positivos.
   </simpara>
   <simpara>
    Asimismo, se debe utilizar el formateador "%u" de la función
    <function>sprintf</function> o de la función <function>printf</function>
    para obtener una representación en cadena de caracteres de la suma
    de comprobación no firmada de la función <function>crc32</function>
    en formato decimal.
   </simpara>
   <simpara>
    Para una representación hexadecimal de la suma de comprobación, se
    puede utilizar el formateador "%x" de la función <function>sprintf</function>
    o de la función <function>printf</function>, o bien las funciones de
    conversión <function>dechex</function>, ambas soluciones se encargan
    de convertir el resultado de la función <function>crc32</function>
    en un entero no firmado.
   </simpara>
   <simpara>
    En instalaciones de 64 bits, la función también devolverá enteros
    negativos para valores devueltos muy grandes, pero esto romperá
    la conversión hexadecimal al tener una posición adicional 0xFFFFFFFF########.
    Sabiendo que la representación decimal parece ser el caso más ampliamente utilizado,
    se ha decidido no romperla incluso si esto rompe directamente la comparación decimal
    en el 50% de los casos al pasar de 32 a 64 bits.
   </simpara>
   <simpara>
    Con perspectiva, el hecho de que la función devuelva un entero quizá no
    fue la mejor idea, y devolver desde el principio una representación hexadecimal
    en forma de cadena de caracteres (tal como hace la función
    <function>md5</function>), habría sido una mejor solución.
   </simpara>
   <simpara>
    Para una solución más duradera, se puede recurrir a la función
    genérica <function>hash</function>. <code>hash("crc32b", $str)</code>
    devolverá la misma cadena de caracteres que <code>str_pad(dechex(crc32($str)), 8, '0', STR_PAD_LEFT)</code>.
   </simpara>
  </warning>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>string</parameter></term>
     <listitem>
      <para>
       Los datos.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Devuelve la suma de comprobación crc32 de la cadena
   <parameter>string</parameter>, en forma de un entero.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Mostrar una suma de comprobación CRC32</title>
    <para>
     Este ejemplo ilustra cómo mostrar la suma de comprobación
     con la función <function>printf</function>:
    </para>
    <programlisting role="php">
<![CDATA[
<?php
$checksum = crc32("Le vif zéphyr jubile sur les kumquats du clown gracieux.");
printf("%u\n", $checksum);
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>hash</function></member>
    <member><function>md5</function></member>
    <member><function>sha1</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
