<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 45042fef652f1b4e904e809fcbfcf31f6c60670b Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: yes -->
<refentry xml:id="function.addcslashes" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>addcslashes</refname>
  <refpurpose>Añade barras invertidas a un string, al estilo del lenguaje C</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>string</type><methodname>addcslashes</methodname>
   <methodparam><type>string</type><parameter>string</parameter></methodparam>
   <methodparam><type>string</type><parameter>characters</parameter></methodparam>
  </methodsynopsis>
  <para>
   Devuelve el string <parameter>string</parameter>, después de haber añadido
   barras invertidas antes de todos los caracteres que están presentes
   en la lista <parameter>characters</parameter>.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>string</parameter></term>
     <listitem>
      <para>
       El string a escapar.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>characters</parameter></term>
     <listitem>
      <para>
       Una lista de caracteres a escapar. Si
       <parameter>characters</parameter> contiene los caracteres
       <literal>\n</literal>, <literal>\r</literal> etc., serán
       convertidos al estilo del lenguaje C, mientras que otros
       caracteres no alfanuméricos con un código ASCII inferior
       a 26 y superior a 126 son reemplazados por su representación
       octal.
      </para>
      <para>
       Al definir una secuencia de caracteres
       en el parámetro <parameter>characters</parameter>, asegúrese
       de que conoce bien todos los caracteres que se encuentran entre
       los límites de los intervalos.
      <example>
       <title><function>addcslashes</function> con rangos</title>
        <programlisting role="php">
<![CDATA[
<?php
echo addcslashes('foo[ ]', 'A..z');
// Muestra:  \f\o\o\[ \]
// Todas las mayúsculas y minúsculas serán escapadas
// ... pero también los caracteres [\]^_`
?>
]]>
        </programlisting>
       </example>
       Asimismo, si el primer carácter de un intervalo tiene un código ASCII
       mayor que el segundo, el intervalo no será creado.
       Solo los límites del intervalo y el carácter punto (.) serán
       escapados. Utilice la función <function>ord</function> para
       encontrar el valor ASCII de un carácter.
      <example>
       <title><function>addcslashes</function> con caracteres en el orden incorrecto</title>
        <programlisting role="php">
<![CDATA[
<?php
echo addcslashes("zoo['.']", 'z..A');
// Muestra:  \zoo['\.']
?>
]]>
        </programlisting>
       </example>
      </para>
      <para>
       Tenga cuidado con el uso de caracteres como 0, a, b, f, n, r,
       t y v. Serán convertidos en \0, \a, \b, \f, \n, \r, \t y \v,
       todos siendo secuencias de escape en C. La mayoría de estas secuencias
       también están definidas en otros lenguajes derivados de C, incluyendo PHP,
       lo que significa que no se obtendrá el resultado esperado si se
       utiliza la salida de la función <function>addcslashes</function>
       para generar código para estos lenguajes con los caracteres definidos
       en el parámetro <parameter>characters</parameter>.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Devuelve el string escapado.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <parameter>characters</parameter> puede escribirse "\0..\37", lo que
   identifica todos los caracteres ASCII cuyo código está entre
   0 y 37.
   <example>
    <title>Ejemplo con <function>addcslashes</function></title>
    <programlisting role="php">
<![CDATA[
<?php
$not_escaped = "PHP isThirty\nYears Old!\tYay to the Elephant!\n";
$escaped = addcslashes($not_escaped, "\0..\37!@\177..\377");
echo $escaped;
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>stripcslashes</function></member>
    <member><function>stripslashes</function></member>
    <member><function>addslashes</function></member>
    <member><function>htmlspecialchars</function></member>
    <member><function>quotemeta</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
