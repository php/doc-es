<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 45042fef652f1b4e904e809fcbfcf31f6c60670b Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: yes -->
<refentry xml:id="function.substr-count" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>substr_count</refname>
  <refpurpose>Cuenta el número de ocurrencias de segmentos en un string</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>int</type><methodname>substr_count</methodname>
   <methodparam><type>string</type><parameter>haystack</parameter></methodparam>
   <methodparam><type>string</type><parameter>needle</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>offset</parameter><initializer>0</initializer></methodparam>
   <methodparam choice="opt"><type class="union"><type>int</type><type>null</type></type><parameter>length</parameter><initializer>&null;</initializer></methodparam>
  </methodsynopsis>
  <para>
   <function>substr_count</function> devuelve el número de ocurrencias
   de <parameter>needle</parameter> en el string
   <parameter>haystack</parameter>. Tenga en cuenta que <parameter>needle</parameter>
   es sensible a mayúsculas y minúsculas.
  </para>
  <note>
   <para>
    Esta función no cuenta los strings que se solapan.
    Véase el ejemplo a continuación.
   </para>
  </note>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>haystack</parameter></term>
     <listitem>
      <para>
       El string en el que se busca
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>needle</parameter></term>
     <listitem>
      <para>
       El string que se busca
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>offset</parameter></term>
     <listitem>
      <para>
       El desplazamiento desde donde se comienza a contar. Si la posición es negativa,
       el conteo comienza desde el final del string.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>length</parameter></term>
     <listitem>
      <para>
       La longitud máxima después del desplazamiento especificado para buscar el
       string. La función emite un error si el desplazamiento más la longitud es
       mayor que la longitud de <parameter>haystack</parameter>.
       Una longitud negativa hará que el conteo comience al final de
       <parameter>haystack</parameter>.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Esta función devuelve un &integer;.
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
     <row>
      <entry>8.0.0</entry>
      <entry>
       <parameter>length</parameter> ahora puede ser nullable.
      </entry>
     </row>
      <row>
       <entry>7.1.0</entry>
       <entry>
        Se agregó soporte para números negativos para <parameter>offset</parameter>
        y <parameter>length</parameter>.
        <parameter>length</parameter> también puede ser <literal>0</literal> ahora.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Ejemplo con <function>substr_count</function></title>
    <programlisting role="php">
<![CDATA[
<?php
$text = 'Esto es una prueba';
echo strlen($text), PHP_EOL; // 16

echo substr_count($text, 'es'), PHP_EOL; // 2

// el string se reduce a 'st una prueba', por lo que muestra 1
echo substr_count($text, 'es', 6), PHP_EOL;

// el texto se reduce a 'st u', por lo que muestra 0
echo substr_count($text, 'is', 3, 3), PHP_EOL;

// muestra solo 1, porque no cuenta los strings
// que se solapan
$text2 = 'gcdgcdgcd';
echo substr_count($text2, 'gcdgcd'), PHP_EOL;

// lanza una excepción porque 5+10 > 14
echo substr_count($text, 'is', 5, 10), PHP_EOL;
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>count_chars</function></member>
    <member><function>strpos</function></member>
    <member><function>substr</function></member>
    <member><function>strstr</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
