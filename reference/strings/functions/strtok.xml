<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 45042fef652f1b4e904e809fcbfcf31f6c60670b Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: no -->
<refentry xml:id="function.strtok" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>strtok</refname>
  <refpurpose>Divide una cadena en segmentos</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type class="union"><type>string</type><type>false</type></type><methodname>strtok</methodname>
   <methodparam><type>string</type><parameter>string</parameter></methodparam>
   <methodparam><type>string</type><parameter>token</parameter></methodparam>
  </methodsynopsis>
  <simpara>Firma alternativa (no soportada con argumentos nombrados):</simpara>
  <methodsynopsis>
   <type class="union"><type>string</type><type>false</type></type><methodname>strtok</methodname>
   <methodparam><type>string</type><parameter>token</parameter></methodparam>
  </methodsynopsis>
  <para>
   <function>strtok</function> divide la cadena <parameter>string</parameter>
   en segmentos, cada segmento está delimitado por <parameter>token</parameter>.
   Por ejemplo, si se tiene una cadena como
   <literal>"Este es un buen ejemplo"</literal>, se pueden extraer
   las diferentes palabras utilizando el espacio como <parameter>token</parameter>.
  </para>
  <para>
   Tenga en cuenta que solo la primera llamada a <function>strtok</function> utiliza
   el argumento <parameter>string</parameter>.
   Todas las llamadas posteriores a <function>strtok</function> requieren únicamente
   el <parameter>token</parameter> a utilizar, ya que sabe dónde se encuentra
   en la cadena actual.
   Para reiniciar o dividir una nueva cadena, simplemente se puede
   llamar a <function>strtok</function> con el parámetro <parameter>string</parameter>
   nuevamente para inicializarlo. Cabe señalar que es posible incluir
   varios tokens en el parámetro <parameter>token</parameter>.
   La cadena <parameter>string</parameter> se dividirá tan pronto como se encuentre
   uno de los caracteres del argumento <parameter>token</parameter>.
  </para>
  <note>
   <para>
    Esta función se comporta de manera ligeramente diferente a lo que se
    podría esperar al estar familiarizado con <function>explode</function>.
    En primer lugar, una secuencia de dos o más caracteres <parameter>token</parameter>
    contiguos en la cadena analizada se considera como un único
    delimitador.
    Además, un <parameter>token</parameter> situado al inicio o al final de la
    cadena es ignorado.
    Por ejemplo, si la cadena <literal>";aaa;;bbb;"</literal> es utilizada,
    las llamadas sucesivas a <function>strtok</function> con
    <literal>";"</literal> como <parameter>token</parameter> devolverán
    las cadenas "aaa" y "bbb", y luego &false;.
    Por lo tanto, la cadena se dividirá simplemente en dos elementos, mientras que
    <literal>explode(";", $string)</literal> devolvería un array de 5 elementos.
   </para>
  </note>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>string</parameter></term>
     <listitem>
      <para>
       La cadena a dividir en varias cadenas de menor tamaño (tokens).
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>token</parameter></term>
     <listitem>
      <para>
       El delimitador utilizado para dividir <parameter>string</parameter>.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Una <type>string</type> dividida, o &false; si no hay más tokens disponibles.
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>8.3.0</entry>
       <entry>
        Ahora emite un <constant>E_WARNING</constant> cuando el <parameter>token</parameter> no es proporcionado.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Ejemplo con <function>strtok</function></title>
    <programlisting role="php">
<![CDATA[
<?php
$string = "This is\tan example\nstring";
// Utilice también las nuevas líneas y las tabulaciones
// como separador de palabras
$tok = strtok($string, " \n\t");

while ($tok !== false) {
    echo "Word={$tok}\n";
    $tok = strtok(" \n\t");
}
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title>Comportamiento de <function>strtok</function> al encontrar una parte vacía</title>
    <programlisting role="php">
<![CDATA[
<?php
$first_token  = strtok('/something', '/');
$second_token = strtok('/');
var_dump($first_token, $second_token);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
    string(9) "something"
    bool(false)
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title>La diferencia entre <function>strtok</function> y <function>explode</function></title>
    <programlisting role="php">
<![CDATA[
<?php
$string = ";aaa;;bbb;";

$parts = [];
$tok = strtok($string, ";");
while ($tok !== false) {
    $parts[] = $tok;
    $tok = strtok(";");
}
echo json_encode($parts),"\n";

$parts = explode(";", $string);
echo json_encode($parts),"\n";
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
["aaa","bbb"]
["","aaa","","bbb",""]
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  &return.falseproblem;
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>explode</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
