<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 45042fef652f1b4e904e809fcbfcf31f6c60670b Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: yes -->
<refentry xml:id="function.substr" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>substr</refname>
  <refpurpose>Devuelve un segmento de string</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>string</type><methodname>substr</methodname>
   <methodparam><type>string</type><parameter>string</parameter></methodparam>
   <methodparam><type>int</type><parameter>offset</parameter></methodparam>
   <methodparam choice="opt"><type class="union"><type>int</type><type>null</type></type><parameter>length</parameter><initializer>&null;</initializer></methodparam>
  </methodsynopsis>
  <para>
   Devuelve el segmento de <parameter>string</parameter> definido por
   <parameter>offset</parameter> y <parameter>length</parameter>.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>string</parameter></term>
     <listitem>
      <para>
       El string de entrada.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>offset</parameter></term>
     <listitem>
      <para>
       Si <parameter>offset</parameter> es positivo, el string
       devuelto comenzará en el carácter número <parameter>offset</parameter>,
       en el string <parameter>string</parameter>. El primer carácter
       está numerado cero. En efecto, en el string '<literal>abcdef</literal>',
       el carácter en la posición <literal>0</literal> es '<literal>a</literal>',
       el carácter en la posición <literal>2</literal> es '<literal>c</literal>',
       y así sucesivamente.
      </para>
      <para>
       Si <parameter>offset</parameter> es negativo, el string devuelto
       comenzará en el carácter número <parameter>offset</parameter> contando
       desde el final del string <parameter>string</parameter>.
      </para>
      <para>
       Si <parameter>string</parameter> es más pequeño que
       <parameter>offset</parameter> caracteres de largo, se devolverá un string vacío.
      </para>
       <para>
       <example>
        <title>Ejemplo con <parameter>offset</parameter> negativo</title>
        <programlisting role="php">
<![CDATA[
<?php
$rest = substr("abcdef", -1), PHP_EOL;    // devuelve "f"
$rest = substr("abcdef", -2), PHP_EOL;    // devuelve "ef"
$rest = substr("abcdef", -3, 1), PHP_EOL; // devuelve "d"
?>
]]>
        </programlisting>
       </example>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>length</parameter></term>
     <listitem>
      <para>
       Si <parameter>length</parameter> es proporcionado y es positivo,
       el string devuelto contendrá como máximo <parameter>length</parameter>
       caracteres, comenzando desde el carácter
       <parameter>offset</parameter> (dependiendo del tamaño del string
       <parameter>string</parameter>).
      </para>
      <para>
       Si <parameter>length</parameter> es proporcionado y negativo, entonces el mismo
       número de caracteres será omitido, comenzando desde el final del string
       <parameter>string</parameter>. Si <parameter>offset</parameter> representa
       una posición fuera del string, &false; será devuelto.
      </para>
      <para>
       Si el parámetro <parameter>length</parameter> es proporcionado
       y vale <literal>0</literal>, se devolverá un string vacío.
      </para>
      <para>
       Si <parameter>length</parameter> es omitido o &null;, el substring comenzando
       desde <parameter>offset</parameter> hasta el final será devuelto.
      </para>
      <example>
       <title>Uso de un valor negativo para <parameter>length</parameter></title>
       <programlisting role="php">
<![CDATA[
<?php
$rest = substr("abcdef", 0, -1), PHP_EOL;  // devuelve "abcde"
$rest = substr("abcdef", 2, -1), PHP_EOL;  // devuelve "cde"
$rest = substr("abcdef", 4, -4), PHP_EOL;  // devuelve ""; anterior a PHP 8.0.0, false era devuelto
$rest = substr("abcdef", -3, -1), PHP_EOL; // devuelve "de"
?>
]]>
       </programlisting>
      </example>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Devuelve la parte extraída del string <parameter>string</parameter>,
   o un string vacío.
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <informaltable>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>&Version;</entry>
      <entry>&Description;</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>8.0.0</entry>
      <entry>
       <parameter>length</parameter> es ahora nullable.
       Cuando <parameter>length</parameter> es explícitamente definido como &null;,
       la función devuelve un substring terminando al final del string,
       mientras que anteriormente devolvía un string vacío.
      </entry>
     </row>
     <row>
      <entry>8.0.0</entry>
      <entry>
       Esta función devuelve un string vacío donde anteriormente devolvía &false;
      </entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Ejemplo con <function>substr</function></title>
    <programlisting role="php">
<![CDATA[
<?php
echo substr('abcdef', 1), PHP_EOL;     // bcdef
echo substr("abcdef", 1, null), PHP_EOL; // bcdef; anterior a PHP 8.0.0, un string vacío era devuelto
echo substr('abcdef', 1, 3), PHP_EOL;  // bcd
echo substr('abcdef', 0, 4), PHP_EOL;  // abcd
echo substr('abcdef', 0, 8), PHP_EOL;  // abcdef
echo substr('abcdef', -1, 1), PHP_EOL; // f

// Acceder a un simple carácter en un string
// también puede ser realizado usando corchetes
$string = 'abcdef';
echo $string[0], PHP_EOL;                 // a
echo $string[3], PHP_EOL;                 // d
echo $string[strlen($string)-1], PHP_EOL; // f

?>
]]>
    </programlisting>
   </example>
   <example>
    <title>Comportamiento del cast con <function>substr</function></title>
    <programlisting role="php">
<![CDATA[
<?php
class apple {
    public function __toString() {
        return "green";
    }
}

echo "1) ", var_export(substr("pear", 0, 2), true), PHP_EOL;
echo "2) ", var_export(substr(54321, 0, 2), true), PHP_EOL;
echo "3) ", var_export(substr(new apple(), 0, 2), true), PHP_EOL;
echo "4) ", var_export(substr(true, 0, 1), true), PHP_EOL;
echo "5) ", var_export(substr(false, 0, 1), true), PHP_EOL;
echo "6) ", var_export(substr("", 0, 1), true), PHP_EOL;
echo "7) ", var_export(substr(1.2e3, 0, 4), true), PHP_EOL;
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
1) 'pe'
2) '54'
3) 'gr'
4) '1'
5) ''
6) ''
7) '1200'
]]>
    </screen>
   </example>
  </para>

  <example>
   <title>Intervalo de caracteres inválido</title>
   <para>
    Si un intervalo de caracteres inválido es solicitado,
    <function>substr</function> devuelve un string vacío a partir de PHP 8.0.0;
    anteriormente &false; era devuelto en su lugar.
   </para>
   <programlisting role="php">
<![CDATA[
<?php
var_dump(substr('a', 2));
?>
]]>
   </programlisting>
   &example.outputs.8;
   <screen>
<![CDATA[
string(0) ""
]]>
   </screen>
   &example.outputs.7;
   <screen>
<![CDATA[
bool(false)
]]>
   </screen>
  </example>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>strrchr</function></member>
    <member><function>substr_replace</function></member>
    <member><function>preg_match</function></member>
    <member><function>trim</function></member>
    <member><function>mb_substr</function></member>
    <member><function>wordwrap</function></member>
    <member><link linkend="language.types.string.substr">Acceso y modificación de un string, por carácter</link></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
