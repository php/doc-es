<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 5d7f95f58f99eb121d25348370ee6146c0442b0c Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: yes Maintainer: Marqitos -->
<refentry xml:id="function.parse-str" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>parse_str</refname>
  <refpurpose>Analiza un string de una variable</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>void</type><methodname>parse_str</methodname>
   <methodparam><type>string</type><parameter>string</parameter></methodparam>
   <methodparam><type>array</type><parameter role="reference">result</parameter></methodparam>
  </methodsynopsis>
  <para>
   Analiza el string <parameter>string</parameter> como si
   se tratara de los parámetros pasados a través de la URL. Todas las variables
   que se encuentran en ella se crean con sus valores respectivos (o en el array si <parameter>result</parameter> es proporcionado).
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>string</parameter></term>
     <listitem>
      <para>
       El string de entrada.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>result</parameter></term>
     <listitem>
      <para>
       Si el segundo argumento <parameter>result</parameter> es proporcionado,
       las variables se almacenarán en él, en forma de un array indexado.
      </para>
      <warning>
       <para>
        El uso de esta función sin el parámetro <parameter>result</parameter>
        está muy <emphasis>DESACONSEJADO</emphasis> y <emphasis>OBSOLETO</emphasis>
        a partir de PHP 7.2.
        A partir de PHP 8.0.0, el parámetro <parameter>result</parameter> es <emphasis>obligatorio</emphasis>.
       </para>
      </warning>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.void;
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
     <row>
      <entry>8.0.0</entry>
      <entry>
       <parameter>result</parameter> ya no es opcional.
      </entry>
     </row>
      <row>
       <entry>7.2.0</entry>
       <entry>
        El uso de <function>parse_str</function> sin el segundo argumento
        emite una nota <constant>E_DEPRECATED</constant>.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Ejemplo con <function>parse_str</function></title>
    <programlisting role="php">
<![CDATA[
<?php
$str = "first=value&arr[]=foo+bar&arr[]=baz";

// Recomendado
parse_str($str, $output);
echo $output['first'];  // value
echo $output['arr'][0]; // foo bar
echo $output['arr'][1]; // baz

// Desaconsejado
parse_str($str);
echo $first;  // value
echo $arr[0]; // foo bar
echo $arr[1]; // baz
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   Debido a que las variables en PHP no pueden tener puntos y espacios en sus nombres, estos se convierten en guiones bajos. Lo mismo se aplica a la denominación de los nombres de claves respectivos en caso de uso de esta función con el argumento de <parameter>result</parameter>.
   <example>
    <title>Deformación de nombres por <function>parse_str</function></title>
    <programlisting role="php">
<![CDATA[
<?php
parse_str("My Value=Something");
echo $My_Value; // Something

parse_str("My Value=Something", $output);
echo $output['My_Value']; // Something
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>
  <refsect1 role="notes">
  &reftitle.notes;

  <note>
   <para>
    <function>parse_str()</function> se ve afectado por la directiva <link linkend="ini.max-input-vars">max_input_vars</link>.
    Superar este límite emite un <constant>E_WARNING</constant>,
    y las variables que los superen no se añadirán al array de resultados.
    El valor predeterminado es 1000; ajuste <link linkend="ini.max-input-vars">max_input_vars</link> según sea necesario.
   </para>
  </note>

  <note>
   <para>
    Todas las variables creadas (o valores devueltos en un array si el segundo argumento está establecido)
    ya están <function>urldecode</function>d.
   </para>
  </note>
  <note>
   <para>
    Para obtener el <literal>QUERY_STRING</literal> actual, se puede utilizar
    la variable <varname>$_SERVER['QUERY_STRING']</varname>. Además, se puede leer la sección sobre las
    <link linkend="language.variables.external"> variables de fuentes externas</link>.
   </para>
  </note>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>parse_url</function></member>
    <member><function>pathinfo</function></member>
    <member><function>http_build_query</function></member>
    <member><function>urldecode</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
