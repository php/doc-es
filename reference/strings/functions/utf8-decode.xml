<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 9b1673cf114a1e10c4563ab9223cb56aed552b89 Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: yes -->
<refentry xml:id="function.utf8-decode" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>utf8_decode</refname>
  <refpurpose>
   Convierte una string UTF-8 a ISO-8859-1, reemplazando los caracteres no válidos o no representables.
  </refpurpose>
 </refnamediv>

 <refsynopsisdiv>
  &warn.deprecated.function-8-2-0;
 </refsynopsisdiv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier role="attribute">#[\Deprecated]</modifier>
   <type>string</type><methodname>utf8_decode</methodname>
   <methodparam><type>string</type><parameter>string</parameter></methodparam>
  </methodsynopsis>
  <para>
   <function>utf8_decode</function> decodifica la string
   <parameter>string</parameter>, asumiendo que está en formato
   <literal>UTF-8</literal>, y la convierte al formato
   <literal>ISO-8859-1</literal>. Los bytes en la string que no son
   válidos en <literal>UTF-8</literal> y los caracteres <literal>UTF-8</literal>
   que no existen en <literal>ISO-8859-1</literal> (que son, los caracteres
   por encima de <literal>U+00FF</literal>) son reemplazados por <literal>?</literal>.
  </para>

  <note>
   <para>
    Numerosas páginas web marcadas como utilizando la codificación de caracteres
    <literal>ISO-8859-1</literal> utilizan efectivamente una codificación similar
    a <literal>Windows-1252</literal>, y los navegadores web interpretarán
    las páginas web <literal>ISO-8859-1</literal> como
    <literal>Windows-1252</literal>. Las características adicionales
    de <literal>Windows-1252</literal> son caracteres imprimibles,
    tales como el signo euro (<literal>€</literal>) y las comillas curvas
    (<literal>“</literal> <literal>”</literal>), en lugar de ciertos
    caracteres de control de <literal>ISO-8859-1</literal>. Esta función
    no convertirá correctamente estos caracteres <literal>Windows-1252</literal>.
    Utilice una función diferente si se requiere una conversión
    <literal>Windows-1252</literal>.
   </para>
  </note>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>string</parameter></term>
     <listitem>
      <para>
       La string codificada en UTF-8.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Devuelve la string <parameter>string</parameter> convertida a ISO-8859-1.
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>8.2.0</entry>
       <entry>
        Esta función ha sido declarada obsoleta.
       </entry>
      </row>
      <row>
       <entry>7.2.0</entry>
       <entry>
        Esta función fue movida al núcleo de PHP; anteriormente, era
        necesario instalar la extensión XML para utilizarla.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title>Ejemplo de uso</title>
   <programlisting role="php">
<![CDATA[
<?php
// Convierte la string 'Zoë' de UTF-8 a ISO 8859-1
$utf8_string = "\x5A\x6F\xC3\xAB";
$iso8859_1_string = utf8_decode($utf8_string);
echo bin2hex($iso8859_1_string), "\n";

// Las secuencias UTF-8 no válidas son reemplazadas por '?'
$invalid_utf8_string = "\xC3";
$iso8859_1_string = utf8_decode($invalid_utf8_string);
var_dump($iso8859_1_string);

// Los caracteres que no existen en la norma ISO 8859-1,
// tales como '€' (signo del euro) son igualmente reemplazados por '?'
$utf8_string = "\xE2\x82\xAC";
$iso8859_1_string = utf8_decode($utf8_string);
var_dump($iso8859_1_string);
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
5a6feb
string(1) "?"
string(1) "?"
]]>
   </screen>
  </example>
 </refsect1>

 <refsect1 role="notes">
  <title>Notas</title>
  <note>
    <title>Obsolescencia y alternativas</title>
    <para>
      Esta función está <emphasis>obsoleta</emphasis> a partir de PHP 8.2.0
      y será eliminada en una versión futura. Los usos existentes deberían ser verificados
      y reemplazados por alternativas apropiadas.
    </para>
    <para>
      Una funcionalidad similar puede obtenerse con <function>mb_convert_encoding</function>,
      que soporta ISO-8859-1 y numerosos otros juegos de caracteres.
      <informalexample>
        <programlisting role="php">
<![CDATA[
<?php
$utf8_string = "\xC3\xAB"; // 'ë' (e con diéresis) en UTF-8
$iso8859_1_string = mb_convert_encoding($utf8_string, 'ISO-8859-1', 'UTF-8');
echo bin2hex($iso8859_1_string), "\n";

$utf8_string = "\xCE\xBB"; // 'λ' (lambda minúscula griega) en UTF-8
$iso8859_7_string = mb_convert_encoding($utf8_string, 'ISO-8859-7', 'UTF-8');
echo bin2hex($iso8859_7_string), "\n";

$utf8_string = "\xE2\x82\xAC"; // '€' (signo del euro) en UTF-8 (no presente en ISO-8859-1)
$windows_1252_string = mb_convert_encoding($utf8_string, 'Windows-1252', 'UTF-8');
echo bin2hex($windows_1252_string), "\n";
?>
          ]]>
        </programlisting>
        &example.outputs;
        <screen>
<![CDATA[
eb
eb
80
]]>
        </screen>
      </informalexample>
    </para>
    <para>
      Otras opciones pueden estar disponibles dependiendo de las extensiones instaladas,
      tales como <methodname>UConverter::transcode</methodname> y <function>iconv</function>.
    </para>
    <para>
      Los siguientes ejemplos producen todos el mismo resultado:
      <informalexample>
        <programlisting role="php">
<![CDATA[
<?php
$utf8_string = "\x5A\x6F\xC3\xAB"; // 'Zoë' en UTF-8
$iso8859_1_string = utf8_decode($utf8_string);
echo bin2hex($iso8859_1_string), "\n";

$iso8859_1_string = mb_convert_encoding($utf8_string, 'ISO-8859-1', 'UTF-8');
echo bin2hex($iso8859_1_string), "\n";

$iso8859_1_string = iconv('UTF-8', 'ISO-8859-1', $utf8_string);
echo bin2hex($iso8859_1_string), "\n";

$iso8859_1_string = UConverter::transcode($utf8_string, 'ISO-8859-1', 'UTF8');
echo bin2hex($iso8859_1_string), "\n";
?>
          ]]>
        </programlisting>
        &example.outputs;
        <screen>
<![CDATA[
5a6feb
5a6feb
5a6feb
5a6feb
]]>
        </screen>
      </informalexample>
      Al especificar <literal>'?'</literal> como opción <literal>'to_subst'</literal> para <methodname>UConverter::transcode</methodname>,
      se obtiene el mismo resultado que <function>utf8_decode</function> para las strings que son inválidas o que no pueden ser representadas en ISO 8859-1.
      <informalexample>
        <programlisting role="php">
<![CDATA[
<?php
$utf8_string = "\xE2\x82\xAC"; // € (signo del euro) no existe en ISO 8859-1
$iso8859_1_string = UConverter::transcode(
    $utf8_string, 'ISO-8859-1', 'UTF-8', ['to_subst' => '?']
);
var_dump($iso8859_1_string);
?>
          ]]>
        </programlisting>
        &example.outputs;
        <screen>
<![CDATA[
string(1) "?"
]]>
        </screen>
      </informalexample>
    </para>
  </note>
</refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>utf8_encode</function></member>
    <member><function>mb_convert_encoding</function></member>
    <member><methodname>UConverter::transcode</methodname></member>
    <member><function>iconv</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
