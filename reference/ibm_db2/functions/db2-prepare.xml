<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 871b71764cdca8238069f27436d96011a6a2cb36 Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: no -->

<refentry xml:id="function.db2-prepare" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>db2_prepare</refname>
  <refpurpose>
   Prepara una consulta SQL para ser ejecutada
  </refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type class="union"><type>resource</type><type>false</type></type><methodname>db2_prepare</methodname>
   <methodparam><type>resource</type><parameter>connection</parameter></methodparam>
   <methodparam><type>string</type><parameter>statement</parameter></methodparam>
   <methodparam choice="opt"><type>array</type><parameter>options</parameter><initializer>[]</initializer></methodparam>
  </methodsynopsis>

  <para>
   <function>db2_prepare</function> crea una consulta SQL preparada que puede
   incluir ningún o varios marcadores (caracteres <literal>?</literal>)
   representando los argumentos de entrada, salida o entrada/salida. Se
   pueden pasar argumentos a la consulta preparada utilizando la
   función <function>db2_bind_param</function>, si solo hay entradas,
   se puede utilizar <function>db2_execute</function>.
  </para>
  <para>
   Existen tres ventajas principales de utilizar consultas preparadas en
   la aplicación :
   <itemizedlist>
    <listitem>
     <para>
      <emphasis>Rendimiento</emphasis> : al preparar una consulta, el
      servidor de base de datos crea un plan de acceso optimizado para la
      recuperación de datos con la consulta. Posteriormente, el envío de la
      consulta preparada con <function>db2_execute</function> permite a la
      consulta reutilizar el plan de acceso y así evitar sobrecargas del
      procesador en cada envío de consulta que crearía dinámicamente un
      nuevo plan de acceso.
     </para>
    </listitem>
    <listitem>
     <para>
      <emphasis>Seguridad</emphasis> : al preparar una consulta, se pueden
      incluir marcadores para los valores de entrada. Al ejecutar una
      consulta preparada con estos valores de entrada, el servidor de
      base de datos verifica cada valor de entrada para asegurarse de que
      los tipos coincidan con la definición de la columna o del parámetro
      de definición.
     </para>
    </listitem>
    <listitem>
     <para>
      <emphasis>Funcionalidad avanzada</emphasis> : Los marcadores permiten
      no solo pasar valores de entrada en las consultas SQL preparadas,
      sino también recuperar parámetros de SALIDA y de ENTRADA/SALIDA de
      los procedimientos de registro utilizando la función
      <function>db2_bind_param</function>.
     </para>
    </listitem>
   </itemizedlist>
  </para>

 </refsect1>
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>connection</parameter></term>
     <listitem>
      <para>
       Una variable recurso de conexión válida devuelta por
       <function>db2_connect</function> o <function>db2_pconnect</function>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>statement</parameter></term>
     <listitem>
      <para>
       Una consulta SQL que puede contener uno o varios marcadores.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>options</parameter></term>
     <listitem>
      <para>
       Un array asociativo que contiene las opciones de la consulta. Se
       puede utilizar este parámetro para solicitar un cursor flotante en
       los servidores de base de datos que soportan esta funcionalidad.
      </para>
      <para>
       Para una descripción de las opciones válidas, consulte la función
       <function>db2_set_option</function>.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Devuelve una variable recurso si la consulta SQL fue enviada
   correctamente o &false; si el servidor de base de datos ha
   devuelto un error. Se puede determinar qué error fue devuelto
   llamando a la función
   <function>db2_stmt_error</function> o <function>db2_stmt_errormsg</function>.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Preparación y ejecución de una consulta SQL con marcadores</title>
    <para>
     El siguiente ejemplo prepara una consulta INSERT que acepta cuatro
     marcadores, luego itera sobre el array que contiene los valores de
     entrada que serán pasados a la función <function>db2_execute</function>.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
$animales = array(
    array(0, 'gato', 'Pook', 3.2),
    array(1, 'perro', 'Peaches', 12.3),
    array(2, 'caballo', 'Smarty', 350.0),
);

$insert = 'INSERT INTO animales (id, raza, nombre, peso)
    VALUES (?, ?, ?, ?)';
$stmt = db2_prepare($conn, $insert);
if ($stmt) {
    foreach ($animales as $animal) {
        $result = db2_execute($stmt, $animal);
    }
}
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>db2_bind_param</function></member>
    <member><function>db2_execute</function></member>
    <member><function>db2_stmt_error</function></member>
    <member><function>db2_stmt_errormsg</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
