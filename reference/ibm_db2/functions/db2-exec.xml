<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 28529d3539b850e870e3aa97570f4db0e53daa03 Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: no -->

<refentry xml:id="function.db2-exec" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>db2_exec</refname>
  <refpurpose>
   Ejecuta una consulta SQL directamente
  </refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type class="union"><type>resource</type><type>false</type></type><methodname>db2_exec</methodname>
   <methodparam><type>resource</type><parameter>connection</parameter></methodparam>
   <methodparam><type>string</type><parameter>statement</parameter></methodparam>
   <methodparam choice="opt"><type>array</type><parameter>options</parameter><initializer>[]</initializer></methodparam>
  </methodsynopsis>

  <para>
   Ejecuta una consulta SQL directamente.
  </para>
  <para>
   Si se prevé insertar variables PHP en la consulta SQL, debe entenderse que
   esto es una de las fallas de seguridad más comunes. Se recomienda llamar a la
   función <function>db2_prepare</function> para preparar una consulta SQL que
   contenga marcadores para variables de entrada. Posteriormente, puede llamarse
   a la función <function>db2_execute</function> para pasar los valores de
   entrada y así evitar ataques por inyección SQL.
  </para>
  <para>
   Si se prevé llamar repetidamente a la misma consulta SQL con diferentes
   parámetros, se recomienda utilizar las funciones <function>db2_prepare</function>
   y <function>db2_execute</function> para permitir que el servidor de base de
   datos reutilice su plan de acceso y así mejorar la eficiencia del acceso a la
   base de datos.
  </para>

 </refsect1>
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>connection</parameter></term>
     <listitem>
      <para>
       Una variable de tipo resource de conexión válida devuelta por
       <function>db2_connect</function> o <function>db2_pconnect</function>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>statement</parameter></term>
     <listitem>
      <para>
       Una consulta SQL. La consulta no puede contener marcadores.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>options</parameter></term>
     <listitem>
      <para>
       Un array asociativo que contiene las opciones de la consulta. Este
       parámetro puede utilizarse para solicitar un cursor flotante en los
       servidores de base de datos que soportan esta funcionalidad.
      </para>
      <para>
       Para obtener una descripción de las opciones válidas, consulte la
       función <function>db2_set_option</function>.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Devuelve una variable de tipo resource si la consulta SQL fue enviada
   correctamente o &false; si la base de datos no pudo ejecutar la consulta SQL.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Creación de una tabla con <function>db2_exec</function></title>
    <para>
     El siguiente ejemplo utiliza la función <function>db2_exec</function> para
     enviar un conjunto de consultas DDL con el fin de crear una tabla.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
$conn = db2_connect($database, $user, $password);

// Crear la tabla de prueba
$create = 'CREATE TABLE animales (id INTEGER, raza VARCHAR(32),
    nombre CHAR(16), peso DECIMAL(7,2))';
$result = db2_exec($conn, $create);
if ($result) {
    print "La tabla se ha creado correctamente.\n";
}

// Rellenar la tabla de prueba
$animales = array(
    array(0, 'gato', 'Pook', 3.2),
    array(1, 'perro', 'Peaches', 12.3),
    array(2, 'caballo', 'Smarty', 350.0),
    array(3, 'pez dorado', 'Bubbles', 0.1),
    array(4, 'periquito', 'Gizmo', 0.2),
    array(5, 'cabra', 'Rickety Ride', 9.7),
    array(6, 'llama', 'Sweater', 150)
);

foreach ($animales as $animal) {
    $rc = db2_exec($conn, "INSERT INTO animales (id, raza, nombre, peso)
      VALUES ({$animal[0]}, '{$animal[1]}', '{$animal[2]}', {$animal[3]})");
    if ($rc) {
        print "Inserción... ";
    }
}
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
La tabla se ha creado correctamente.
Inserción... Inserción... Inserción... Inserción... Inserción... Inserción... Inserción...
]]>
    </screen>
   </example>

   <example>
    <title>Ejecución de una consulta SELECT con un cursor flotante</title>
    <para>
     El siguiente ejemplo muestra cómo solicitar un cursor flotante para una
     consulta SQL enviada con la función <function>db2_exec</function>.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
$conn = db2_connect($database, $user, $password);
$sql = "SELECT nombre FROM animales
    WHERE peso < 10.0
    ORDER BY nombre";
if ($conn) {
    require_once 'prepare.inc';
    $stmt = db2_exec($conn, $sql, array('cursor' => DB2_SCROLLABLE));
    while ($row = db2_fetch_array($stmt)) {
        print "$row[0]\n";
    }
}
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Bubbles
Gizmo
Pook
Rickety Ride
]]>
    </screen>
   </example>
   <example>
    <title>Devuelve datos XML como ResultSet SQL</title>
    <para>
     El siguiente ejemplo demuestra cómo utilizar documentos almacenados
     en una columna XML utilizando la base de datos SAMPLE. Mediante un simple
     SQL/XML, este ejemplo devuelve algunos nodos en un documento XML en un
     formato ResultSet SQL con el que la mayoría de los usuarios están
     familiarizados.
    </para>
    <programlisting role="php">
<![CDATA[
<?php

$conn = db2_connect("SAMPLE", "db2inst1", "ibmdb2");

$query = 'SELECT * FROM XMLTABLE(
    XMLNAMESPACES (DEFAULT \'http://posample.org\'),
    \'db2-fn:xmlcolumn("CUSTOMER.INFO")/customerinfo\'
    COLUMNS
    "CID" VARCHAR (50) PATH \'@Cid\',
    "NAME" VARCHAR (50) PATH \'name\',
    "PHONE" VARCHAR (50) PATH \'phone [ @type = "work"]\'
    ) AS T
    WHERE NAME = \'Kathy Smith\'
    ';
$stmt = db2_exec($conn, $query);

while($row = db2_fetch_object($stmt)){
    printf("$row->CID     $row->NAME     $row->PHONE\n");
}
db2_close($conn);

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
1000     Kathy Smith     416-555-1358
1001     Kathy Smith     905-555-7258
]]>
    </screen>
   </example>
   <example>
    <title>Ejecutar un "JOIN" con datos XML</title>
    <para>
     El siguiente ejemplo trabaja con documentos almacenados en dos columnas
     diferentes en la base de datos SAMPLE. Esto crea dos tablas temporales
     provenientes de los documentos XML de dos columnas XML diferentes y
     devuelve un ResultSet SQL con la información que contiene el estado de
     envío para un cliente.
    </para>
    <programlisting role="php">
<![CDATA[
<?php

$conn = db2_connect("SAMPLE", "db2inst1", "ibmdb2");

$query = '
    SELECT A.CID, A.NAME, A.PHONE, C.PONUM, C.STATUS
    FROM
    XMLTABLE(
    XMLNAMESPACES (DEFAULT \'http://posample.org\'),
    \'db2-fn:xmlcolumn("CUSTOMER.INFO")/customerinfo\'
    COLUMNS
    "CID" BIGINT PATH \'@Cid\',
    "NAME" VARCHAR (50) PATH \'name\',
    "PHONE" VARCHAR (50) PATH \'phone [ @type = "work"]\'
    ) as A,
    PURCHASEORDER AS B,
    XMLTABLE (
    XMLNAMESPACES (DEFAULT \'http://posample.org\'),
    \'db2-fn:xmlcolumn("PURCHASEORDER.PORDER")/PurchaseOrder\'
    COLUMNS
    "PONUM"  BIGINT PATH \'@PoNum\',
    "STATUS" VARCHAR (50) PATH \'@Status\'
    ) as C
    WHERE A.CID = B.CUSTID AND
 B.POID = C.PONUM AND
 A.NAME = \'Kathy Smith\'
';

$stmt = db2_exec($conn, $query);

while($row = db2_fetch_object($stmt)){
    printf("$row->CID     $row->NAME     $row->PHONE     $row->PONUM     $row->STATUS\n");
}

db2_close($conn);

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
1001     Kathy Smith     905-555-7258     5002     Shipped
]]>
    </screen>
   </example>
   <example>
    <title>Devuelve datos SQL que forman parte de un documento XML grande</title>
    <para>
     El siguiente ejemplo utiliza una porción de los documentos de
     PRODUCT.DESCRIPTION en la base de datos SAMPLE. Esto crea un documento
     XML que contiene la descripción del producto (datos XML) y la información
     sobre el precio (datos SQL).
    </para>
    <programlisting role="php">
<![CDATA[
<?php

$conn = db2_connect("SAMPLE", "db2inst1", "ibmdb2");

$query = '
SELECT
XMLSERIALIZE(
XMLQUERY(\'
    declare boundary-space strip;
    declare default element namespace "http://posample.org";
    <promoList> {
        for $prod in $doc/product
        where $prod/description/price < 10.00
        order by $prod/description/price ascending
        return(
            <promoitem> {
                $prod,
                <startdate> {$start} </startdate>,
                <enddate> {$end} </enddate>,
                <promoprice> {$promo} </promoprice>
            } </promoitem>
        )
    } </promoList>
\' passing by ref DESCRIPTION AS "doc",
PROMOSTART as "start",
PROMOEND as "end",
PROMOPRICE as "promo"
RETURNING SEQUENCE)
AS CLOB (32000))
AS NEW_PRODUCT_INFO
FROM PRODUCT
WHERE PID = \'100-100-01\'
';

$stmt = db2_exec($conn, $query);

while($row = db2_fetch_array($stmt)){
 printf("$row[0]\n");
}
db2_close($conn);

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
<promoList xmlns="http://posample.org">
    <promoitem>
    <product pid="100-100-01">
        <description>
            <name>Snow Shovel, Basic 22 inch</name>
            <details>Basic Snow Shovel, 22 inches wide, straight handle with D-Grip</details>
            <price>9.99</price>
            <weight>1 kg</weight>
        </description>
    </product>
    <startdate>2004-11-19</startdate>
    <enddate>2004-12-19</enddate>
    <promoprice>7.25</promoprice>
    </promoitem>
</promoList>
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>db2_execute</function></member>
    <member><function>db2_prepare</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
