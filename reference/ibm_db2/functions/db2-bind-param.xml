<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 61374bbe228e8e9c55a24aba59a1e2bb2a871148 Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: yes -->

<refentry xml:id="function.db2-bind-param" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>db2_bind_param</refname>
  <refpurpose>
   Asocia una variable PHP a un parámetro de una consulta SQL
  </refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>bool</type><methodname>db2_bind_param</methodname>
   <methodparam><type>resource</type><parameter>stmt</parameter></methodparam>
   <methodparam><type>int</type><parameter>parameter_number</parameter></methodparam>
   <methodparam><type>string</type><parameter>variable_name</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>parameter_type</parameter><initializer><constant>DB2_PARAM_IN</constant></initializer></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>data_type</parameter><initializer>0</initializer></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>precision</parameter><initializer>-1</initializer></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>scale</parameter><initializer>0</initializer></methodparam>
  </methodsynopsis>

  <para>
   Asocia una variable PHP a un parámetro en la consulta SQL
   devuelta por <function>db2_prepare</function>. Esta función permite
   mayor control sobre los tipos de los parámetros, los tipos de datos, la
   precisión y la escala para el parámetro que al pasarle simplemente una
   variable dentro del array de entrada opcional de la función
   <function>db2_execute</function>.
  </para>

 </refsect1>
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>stmt</parameter></term>
     <listitem>
      <para>
       Una consulta preparada devuelta por <function>db2_prepare</function>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>parameter_number</parameter></term>
     <listitem>
      <para>
       Especifica la posición del parámetro comenzando en el índice 1 en la
       consulta preparada.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>variable_name</parameter></term>
     <listitem>
      <para>
       Una cadena que especifica el nombre de la variable PHP a asociar al
       parámetro especificado por <parameter>parameter_number</parameter>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>parameter_type</parameter></term>
     <listitem>
      <para>
       Una constante que especifica si la variable PHP debe ser asociada al
       parámetro SQL como parámetro de entrada
       (<constant>DB2_PARAM_IN</constant>), como parámetro de salida
       (<constant>DB2_PARAM_OUT</constant>) o como parámetro que acepta
       entradas y salidas (<constant>DB2_PARAM_INOUT</constant>).
       Para evitar un exceso de consumo de memoria, también puede especificarse
       <constant>DB2_PARAM_FILE</constant> para asociar la variable PHP al
       nombre del archivo que contiene los datos del objeto grande (BLOB, CLOB o
       DBCLOB).
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>data_type</parameter></term>
     <listitem>
      <para>
       Una constante que especifica el tipo de datos SQL que la variable PHP
       debe ser asociada. El parámetro debe tomar uno de los siguientes valores:
       <constant>DB2_BINARY</constant>, <constant>DB2_CHAR</constant>,
       <constant>DB2_DOUBLE</constant> o <constant>DB2_LONG</constant>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>precision</parameter></term>
     <listitem>
      <para>
       Especifica la precisión con la que la variable debe ser asociada a
       la base de datos. Este parámetro también puede ser utilizado para
       recuperar valores de salida XML para procedimientos almacenados.
       Un valor no negativo especifica el tamaño máximo de los datos XML
       que serán recuperados desde la base de datos. Si este parámetro no es
       utilizado, se definirá un tamaño por defecto de 1 MB para recuperar
       los valores de tipo XML desde el procedimiento almacenado.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>scale</parameter></term>
     <listitem>
      <para>
       Especifica la escala con la que la variable debe ser asociada a la
       base de datos.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.success;
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Asociación de variables PHP a una consulta preparada</title>
    <para>
     La consulta SQL en el siguiente ejemplo utiliza dos parámetros de entrada
     en la sección WHERE. Se llama a <function>db2_bind_param</function>
     para asociar dos variables que no han sido declaradas o asignadas
     antes de la llamada a <function>db2_bind_param</function>; en este ejemplo,
     <literal>$lower_limit</literal> es asignada antes de ser llamada a
     <function>db2_bind_param</function>, pero <literal>$upper_limit</literal>
     es asignada después de la llamada a <function>db2_bind_param</function>. Las
     variables deben ser asociadas y, para los parámetros que aceptan entradas,
     se les debe asignar un valor antes de llamar a <function>db2_execute</function>.
    </para>
    <programlisting role="php">
<![CDATA[
<?php

$sql = 'SELECT nom, race, poids FROM animaux
    WHERE poids > ? AND poids < ?';
$conn = db2_connect($database, $user, $password);
$stmt = db2_prepare($conn, $sql);

// Se puede declarar la variable antes de llamar a db2_bind_param()
$lower_limit = 1;

db2_bind_param($stmt, 1, "lower_limit", DB2_PARAM_IN);
db2_bind_param($stmt, 2, "upper_limit", DB2_PARAM_IN);

// También se puede declarar la variable después de llamar a db2_bind_param()
$upper_limit = 15.0;

if (db2_execute($stmt)) {
    while ($row = db2_fetch_array($stmt)) {
        print "{$row[0]}, {$row[1]}, {$row[2]}\n";
    }
}
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Pook, chat, 3.2
Rickety Ride, chèvre, 9.7
Peaches, chien, 12.3
]]>
    </screen>
   </example>
   <example>
    <title>Llamada a procedimientos de registro con parámetros IN y OUT</title>
    <para>
     El procedimiento de registro concorde_animal en el siguiente ejemplo
     acepta tres diferentes parámetros:
     <orderedlist>
      <listitem>
       <para>
        un parámetro de entrada (IN) que acepta el nombre del primer animal en
        entrada
       </para>
      </listitem>
      <listitem>
       <para>
        un parámetro de entrada-salida (INOUT) que acepta el nombre del segundo
        animal en entrada y devuelve un &string; <literal>TRUE</literal> si un
        animal en la base de datos coincide con este nombre
       </para>
      </listitem>
      <listitem>
       <para>
        un parámetro de salida (OUT) que devuelve la suma de los pesos de los dos
        animales identificados
       </para>
      </listitem>
     </orderedlist>
     Además, el procedimiento de registro devuelve un conjunto de resultados
     que contiene los animales listados en orden alfabético comenzando con
     el animal correspondiente al valor de entrada del primer parámetro y
     terminando con el animal correspondiente al valor de entrada del segundo
     parámetro.
    </para>
    <programlisting role="php">
<![CDATA[
<?php

$sql = 'CALL concorde_animal(?, ?, ?)';
$conn = db2_connect($database, $user, $password);
$stmt = db2_prepare($conn, $sql);

$nom = "Peaches";
$second_nom = "Rickety Ride";
$poids = 0;

db2_bind_param($stmt, 1, "nom", DB2_PARAM_IN);
db2_bind_param($stmt, 2, "second_nom", DB2_PARAM_INOUT);
db2_bind_param($stmt, 3, "poids", DB2_PARAM_OUT);

print "Valores de los parámetros _antes_ de CALL :\n";
print "  1: {$nom} 2: {$second_nom} 3: {$poids}\n\n";

if (db2_execute($stmt)) {
    print "Valores de los parámetros _después_ de CALL :\n";
    print "  1: {$nom} 2: {$second_nom} 3: {$poids}\n\n";

    print "Resultados :\n";
    while ($row = db2_fetch_array($stmt)) {
        print "  {$row[0]}, {$row[1]}, {$row[2]}\n";
    }
}
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Valores de los parámetros _antes_ de CALL :
  1: Peaches 2: Rickety Ride 3: 0

Valores de los parámetros _después_ de CALL :
  1: Peaches 2: TRUE 3: 22

Resultados :
  Peaches, chien, 12.3
  Pook, chat, 3.2
  Rickety Ride, chèvre, 9.7
]]>
    </screen>
   </example>
   <example>
    <title>Inserción de un objeto grande binario (BLOB) directamente desde un archivo</title>
    <para>
     Los datos para los objetos grandes normalmente se almacenan en archivos,
     como documentos XML o archivos de audio. En lugar de leer el archivo
     completo en una variable de PHP y luego asociar la variable PHP en la
     consulta SQL, se puede evitar cierto sobrecoste de memoria asociando el
     archivo directamente al parámetro de entrada de su consulta SQL. El
     siguiente ejemplo demuestra cómo asociar un archivo directamente en una
     columna BLOB.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
$stmt = db2_prepare($conn, "INSERT INTO animal_pictures(photo) VALUES (?)");

$picture = "/opt/albums/spook/grooming.jpg";
$rc = db2_bind_param($stmt, 1, "picture", DB2_PARAM_FILE);
$rc = db2_execute($stmt);
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>db2_execute</function></member>
    <member><function>db2_prepare</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
