<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 871b71764cdca8238069f27436d96011a6a2cb36 Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: no -->

<refentry xml:id="function.db2-lob-read" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>db2_lob_read</refname>
  <refpurpose>
   Recupera grandes objetos binarios de tamaños predefinidos en cada invocación
  </refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type class="union"><type>string</type><type>false</type></type><methodname>db2_lob_read</methodname>
   <methodparam><type>resource</type><parameter>stmt</parameter></methodparam>
   <methodparam><type>int</type><parameter>colnum</parameter></methodparam>
   <methodparam><type>int</type><parameter>length</parameter></methodparam>
  </methodsynopsis>
  <para>
   Utilice <function>db2_lob_read</function> para recorrer una columna
   específica de un conjunto de resultados y recuperar los grandes objetos binarios de
   tamaño predefinido.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>stmt</parameter></term>
     <listitem>
      <para>
       Un recurso <literal>stmt</literal> válido que contiene grandes objetos binarios.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>colnum</parameter></term>
     <listitem>
      <para>
       Un número de columna válido en el conjunto de resultados del recurso
       <literal>stmt</literal>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>length</parameter></term>
     <listitem>
      <para>
       El tamaño de los grandes objetos binarios a recuperar del recurso
       <literal>stmt</literal>.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Devuelve el número de datos especificados. Devuelve &false; si los datos
   no pueden ser recuperados.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Iterar a través de diferentes tipos de datos</title>
    <para>
    </para>
    <programlisting role="php">
<![CDATA[
<?php

/* Parámetros de Conexión */
$db = 'SAMPLE';
$username = 'db2inst1';
$password = 'ibmdb2';

/* Recuperación del Recurso de Conexión */
$conn = db2_connect($db,$username,$password);

if ($conn) {
    $drop = 'DROP TABLE clob_stream';
    $result = @db2_exec( $conn, $drop );

    $create = 'CREATE TABLE clob_stream (id INTEGER, my_clob CLOB)';
    $result = db2_exec( $conn, $create );

    $variable = "";
    $stmt = db2_prepare($conn, "INSERT INTO clob_stream (id,my_clob) VALUES (1, ?)");
    $variable = "THIS IS A CLOB TEST. THIS IS A CLOB TEST.";
    db2_bind_param($stmt, 1, "variable", DB2_PARAM_IN);
    db2_execute($stmt);

    $sql = "SELECT id,my_clob FROM clob_stream";
    $result = db2_prepare($conn, $sql);
    db2_execute($result);
    db2_fetch_row($result);
    $i = 0;
    /* Lectura de grandes objetos */
    while ($data = db2_lob_read($result, 2, 6)) {
        echo "Bucle $i : $data\n";
        $i = $i + 1;
    }

    $drop = 'DROP TABLE blob_stream';
    $result = @db2_exec( $conn, $drop );

    $create = 'CREATE TABLE blob_stream (id INTEGER, my_blob CLOB)';
    $result = db2_exec( $conn, $create );

    $variable = "";
    $stmt = db2_prepare($conn, "INSERT INTO blob_stream (id,my_blob) VALUES (1, ?)");
    $variable = "THIS IS A BLOB TEST. THIS IS A BLOB TEST.";
    db2_bind_param($stmt, 1, "variable", DB2_PARAM_IN);
    db2_execute($stmt);

    $sql = "SELECT id,my_blob FROM blob_stream";
    $result = db2_prepare($conn, $sql);
    db2_execute($result);
    db2_fetch_row($result);
    $i = 0;
    /* Lectura de grandes objetos */
    while ($data = db2_lob_read($result, 2, 6)) {
        echo "Bucle $i : $data\n";
        $i = $i + 1;
    }
} else {
    echo 'ninguna conexión : ' . db2_conn_errormsg();
}

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Bucle 0 : THIS I
Bucle 1 : S A CL
Bucle 2 : OB TES
Bucle 3 : T. THI
Bucle 4 : S IS A
Bucle 5 :  CLOB
Bucle 6 : TEST.
Bucle 0 : THIS I
Bucle 1 : S A BL
Bucle 2 : OB TES
Bucle 3 : T. THI
Bucle 4 : S IS A
Bucle 5 :  BLOB
Bucle 6 : TEST.
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>db2_bind_param</function></member>
    <member><function>db2_exec</function></member>
    <member><function>db2_execute</function></member>
    <member><function>db2_fetch_row</function></member>
    <member><function>db2_prepare</function></member>
    <member><function>db2_result</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
