<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 871b71764cdca8238069f27436d96011a6a2cb36 Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: no -->

<refentry xml:id="function.db2-execute" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>db2_execute</refname>
  <refpurpose>
   Ejecuta una consulta SQL preparada
  </refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>bool</type><methodname>db2_execute</methodname>
   <methodparam><type>resource</type><parameter>stmt</parameter></methodparam>
   <methodparam choice="opt"><type>array</type><parameter>parameters</parameter><initializer>[]</initializer></methodparam>
  </methodsynopsis>

  <para>
   <function>db2_execute</function> ejecuta una consulta SQL que ha sido
   preparada por <function>db2_prepare</function>.
  </para>
  <para>
   Si la consulta SQL devuelve un conjunto de resultados, por ejemplo, una consulta
   SELECT o CALL a un procedimiento de registro devuelve uno o
   varios conjuntos de resultados, puede recuperar una fila como un array a partir de la
   recurso <literal>stmt</literal> utilizando
   <function>db2_fetch_assoc</function>,
   <function>db2_fetch_both</function> o
   <function>db2_fetch_array</function>. Alternativamente, puede utilizar
   <function>db2_fetch_row</function> para mover el puntero a
   la fila siguiente y recuperar una columna a la vez de esta fila con la
   función <function>db2_result</function>.
  </para>
  <para>
   Consúltese <function>db2_prepare</function> para una breve discusión
   sobre las ventajas de utilizar <function>db2_prepare</function> y
   <function>db2_execute</function> en lugar de <function>db2_exec</function>.
  </para>

 </refsect1>
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>stmt</parameter></term>
     <listitem>
      <para>
       Una consulta preparada devuelta por <function>db2_prepare</function>.
      </para>
     </listitem>
     </varlistentry>
    <varlistentry>
     <term><parameter>parameters</parameter></term>
     <listitem>
      <para>
       Un array de parámetros de entrada que contiene los marcadores de
       variables contenidos en la consulta preparada.
      </para>
     </listitem>
     </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.success;
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Preparación y ejecución de una consulta SQL con marcadores</title>
    <para>
     El siguiente ejemplo prepara una consulta INSERT que acepta cuatro
     marcadores, luego itera sobre el array que contiene los valores de entrada
     que será pasado a la función <function>db2_execute</function>.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
$pet = array(0, 'chat', 'Pook', 3.2);

$insert = 'INSERT INTO animales (id, raza, nombre, peso)
    VALUES (?, ?, ?, ?)';

$stmt = db2_prepare($conn, $insert);
if ($stmt) {
    $result = db2_execute($stmt, $pet);
    if ($result) {
        print "Añadido un nuevo animal con éxito.";
    }
}
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Añadido un nuevo animal con éxito.
]]>
    </screen>
   </example>
   <example>
    <title>Llamada a un procedimiento de registro con un parámetro de SALIDA</title>
    <para>
     El siguiente ejemplo prepara una consulta CALL que acepta un marcador que
     representa un parámetro de SALIDA, vincula la variable PHP <literal>$my_pets</literal>
     al parámetro utilizando la función
     <function>db2_bind_param</function> y llama a la función
     <function>db2_execute</function> para ejecutar la consulta
     CALL. Una vez que la consulta CALL ha sido ejecutada, el valor de
     <literal>$num_pets</literal> cambia para reflejar el valor devuelto
     por el procedimiento de registro para este parámetro de SALIDA.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
$num_pets = 0;
$res = db2_prepare($conn, "CALL count_my_pets(?)");
$rc = db2_bind_param($res, 1, "num_pets", DB2_PARAM_OUT);
$rc = db2_execute($res);
print "Tengo $num_pets animales !";
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Tengo 7 animales !
]]>
    </screen>
   </example>
   <example>
    <title>Devuelve datos XML como ResultSet SQL</title>
    <para>
     El siguiente ejemplo demuestra cómo utilizar documentos almacenados
     en una columna XML utilizando la base de datos SAMPLE. Utilizando un simple SQL/XML,
     este ejemplo devuelve algunos nodos en un documento XML en un formato ResultSet SQL
     con el que la mayoría de los usuarios están familiarizados.
    </para>
    <programlisting role="php">
<![CDATA[
<?php

$conn = db2_connect("SAMPLE", "db2inst1", "ibmdb2");

$query = 'SELECT * FROM XMLTABLE(
    XMLNAMESPACES (DEFAULT \'http://posample.org\'),
    \'db2-fn:xmlcolumn("CUSTOMER.INFO")/customerinfo\'
    COLUMNS
    "CID" VARCHAR (50) PATH \'@Cid\',
    "NAME" VARCHAR (50) PATH \'name\',
    "PHONE" VARCHAR (50) PATH \'phone [ @type = "work"]\'
    ) AS T
    WHERE NAME = ?
    ';

$stmt = db2_prepare($conn, $query);

$name = 'Kathy Smith';

if ($stmt) {
    db2_bind_param($stmt, 1, "name", DB2_PARAM_IN);
    db2_execute($stmt);

    while($row = db2_fetch_object($stmt)){
        printf("$row->CID     $row->NAME     $row->PHONE\n");
    }
}
db2_close($conn);

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
1000     Kathy Smith     416-555-1358
1001     Kathy Smith     905-555-7258
]]>
    </screen>
   </example>
   <example>
    <title>Ejecutar un "JOIN" con datos XML</title>
    <para>
     El siguiente ejemplo trabaja con documentos almacenados en dos
     columnas diferentes en la base de datos SAMPLE. Esto crea dos
     tablas temporales a partir de los documentos XML de dos diferentes
     columnas XML y devuelve un ResultSet SQL con la información que contiene
     el estado de envío para un cliente.
    </para>
    <programlisting role="php">
<![CDATA[
<?php

$conn = db2_connect("SAMPLE", "db2inst1", "ibmdb2");

$query = '
SELECT A.CID, A.NAME, A.PHONE, C.PONUM, C.STATUS
FROM
XMLTABLE(
XMLNAMESPACES (DEFAULT \'http://posample.org\'),
\'db2-fn:xmlcolumn("CUSTOMER.INFO")/customerinfo\'
COLUMNS
"CID" BIGINT PATH \'@Cid\',
"NAME" VARCHAR (50) PATH \'name\',
"PHONE" VARCHAR (50) PATH \'phone [ @type = "work"]\'
) as A,
PURCHASEORDER AS B,
XMLTABLE (
XMLNAMESPACES (DEFAULT \'http://posample.org\'),
\'db2-fn:xmlcolumn("PURCHASEORDER.PORDER")/PurchaseOrder\'
COLUMNS
"PONUM"  BIGINT PATH \'@PoNum\',
"STATUS" VARCHAR (50) PATH \'@Status\'
) as C
WHERE A.CID = B.CUSTID AND
        B.POID = C.PONUM AND
        A.NAME = ?
';

$stmt = db2_prepare($conn, $query);

$name = 'Kathy Smith';

if ($stmt) {
    db2_bind_param($stmt, 1, "name", DB2_PARAM_IN);
    db2_execute($stmt);

    while($row = db2_fetch_object($stmt)){
        printf("$row->CID     $row->NAME     $row->PHONE     $row->PONUM     $row->STATUS\n");
    }
}

db2_close($conn);

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
1001     Kathy Smith     905-555-7258     5002     Shipped
]]>
    </screen>
   </example>
   <example>
    <title>Devuelve datos SQL que forman parte de un documento XML grande</title>
    <para>
     El siguiente ejemplo utiliza una porción de los documentos de
     PRODUCT.DESCRIPTION en la base de datos SAMPLE. Esto crea un documento
     XML que contiene la descripción del producto (datos XML) y las informaciones
     concernientes al precio (datos SQL).
    </para>
    <programlisting role="php">
<![CDATA[
<?php

$conn = db2_connect("SAMPLE", "db2inst1", "ibmdb2");

$query = '
SELECT
XMLSERIALIZE(
XMLQUERY(\'
    declare boundary-space strip;
    declare default element namespace "http://posample.org";
    <promoList> {
        for $prod in $doc/product
        where $prod/description/price < 10.00
        order by $prod/description/price ascending
        return(
            <promoitem> {
                $prod,
                <startdate> {$start} </startdate>,
                <enddate> {$end} </enddate>,
                <promoprice> {$promo} </promoprice>
            } </promoitem>
        )
    } </promoList>
\' passing by ref DESCRIPTION AS "doc",
PROMOSTART as "start",
PROMOEND as "end",
PROMOPRICE as "promo"
RETURNING SEQUENCE)
AS CLOB (32000))
AS NEW_PRODUCT_INFO
FROM PRODUCT
WHERE PID = ?
';

$stmt = db2_prepare($conn, $query);

$pid = "100-100-01";

if ($stmt) {
    db2_bind_param($stmt, 1, "pid", DB2_PARAM_IN);
    db2_execute($stmt);

    while($row = db2_fetch_array($stmt)){
        printf("$row[0]\n");
    }
}

db2_close($conn);

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
<promoList xmlns="http://posample.org">
    <promoitem>
    <product pid="100-100-01">
        <description>
            <name>Snow Shovel, Basic 22 inch</name>
            <details>Basic Snow Shovel, 22 inches wide, straight handle with D-Grip</details>
            <price>9.99</price>
            <weight>1 kg</weight>
        </description>
    </product>
    <startdate>2004-11-19</startdate>
    <enddate>2004-12-19</enddate>
    <promoprice>7.25</promoprice>
    </promoitem>
</promoList>
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>db2_exec</function></member>
    <member><function>db2_fetch_array</function></member>
    <member><function>db2_fetch_assoc</function></member>
    <member><function>db2_fetch_both</function></member>
    <member><function>db2_fetch_row</function></member>
    <member><function>db2_prepare</function></member>
    <member><function>db2_result</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
