<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 4266e03897e77751a6cf7d15f9556c92124d8df3 Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: no -->
<refentry xml:id="function.parse-url" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>parse_url</refname>
  <refpurpose>Analiza una URL y devuelve sus componentes</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type class="union"><type>int</type><type>string</type><type>array</type><type>null</type><type>false</type></type><methodname>parse_url</methodname>
   <methodparam><type>string</type><parameter>url</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>component</parameter><initializer>-1</initializer></methodparam>
  </methodsynopsis>
  <para>
   Esta función analiza una URL y devuelve un array asociativo que contiene
   todos los elementos presentes en la misma.
   Los valores de los elementos del array <emphasis>NO ESTÁN</emphasis> decodificados de la URL.
  </para>
  <para>
   Esta función <emphasis role="strong">no está</emphasis>
   diseñada para validar la URL proporcionada, solo la divide en las partes enumeradas
   a continuación. Las URL parciales e inválidas también son aceptadas, la función
   <function>parse_url</function> hará todo lo posible para analizarlas correctamente.
  </para>
  <caution>
   <para>
    Esta función puede no proporcionar resultados correctos para URL relativas o inválidas y los resultados pueden no coincidir con
    el comportamiento estándar de los clientes HTTP.
    Si se deben analizar URL provenientes de la entrada del usuario,
    se requieren verificaciones adicionales, por ejemplo utilizando
    <function>filter_var</function> con el filtro
    <constant>FILTER_VALIDATE_URL</constant>.
   </para>
  </caution>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>url</parameter></term>
     <listitem>
      <para>
       La URL a analizar.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
   <variablelist>
    <varlistentry>
     <term><parameter>component</parameter></term>
     <listitem>
      <para>
       Puede ser una de las constantes entre <constant>PHP_URL_SCHEME</constant>,
       <constant>PHP_URL_HOST</constant>, <constant>PHP_URL_PORT</constant>,
       <constant>PHP_URL_USER</constant>, <constant>PHP_URL_PASS</constant>,
       <constant>PHP_URL_PATH</constant>, <constant>PHP_URL_QUERY</constant>
       o <constant>PHP_URL_FRAGMENT</constant> para recuperar únicamente
       una parte de la URL como string (excepto cuando
       se proporciona <constant>PHP_URL_PORT</constant>; en este caso, el valor devuelto
       será un &integer;).
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Para URL realmente mal formadas, <function>parse_url</function> puede devolver
   &false;.
  </para>
  <para>
   Si el parámetro <parameter>component</parameter> se omite, se devuelve un <type>array</type>
   asociativo. Al menos un elemento estará presente en el array. Estas
   son las claves potenciales de este array:
   <itemizedlist>
    <listitem>
     <simpara>
      <varname remap="structfield">scheme</varname> - por ejemplo <literal>http</literal>
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <varname remap="structfield">host</varname>
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <varname remap="structfield">port</varname>
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <varname remap="structfield">user</varname>
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <varname remap="structfield">pass</varname>
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <varname remap="structfield">path</varname>
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <varname remap="structfield">query</varname> - después del signo de interrogación "<literal>?</literal>"
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <varname remap="structfield">fragment</varname> - después del símbolo de almohadilla "<literal>#</literal>"
     </simpara>
    </listitem>
   </itemizedlist>
  </para>
  <para>
   Si el parámetro <parameter>component</parameter> está especificado, <function>parse_url</function>
   devuelve un <type>string</type> (o un &integer; en el caso de uso de la
   constante <constant>PHP_URL_PORT</constant>) en lugar de un <type>array</type>. Si el componente
   solicitado no existe en la URL, &null; será devuelto.
   A partir de PHP 8.0.0, <function>parse_url</function> distingue entre los
   fragmentos y consultas ausentes y vacíos:
  </para>
  <para>
   <informalexample>
    <screen>
<![CDATA[
http://example.com/foo → query = null, fragment = null
http://example.com/foo? → query = "",   fragment = null
http://example.com/foo# → query = null, fragment = ""
http://example.com/foo?# → query = "",   fragment = ""
]]>
    </screen>
   </informalexample>
  </para>
  <para>
   Anteriormente todos los casos resultaban en la consulta y el fragmento siendo &null;.
  </para>
  <para>
   Cabe señalar que los caracteres de control (ver <function>ctype_cntrl</function>)
   en los componentes son reemplazados por un guion bajo
   (<literal>_</literal>).
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <informaltable>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>&Version;</entry>
      <entry>&Description;</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>8.0.0</entry>
      <entry>
       <function>parse_url</function> distingue ahora entre los fragmentos
       y consultas ausentes y vacíos.
      </entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Ejemplo con <function>parse_url</function></title>
    <programlisting role="php">
<![CDATA[
<?php
$url = 'http://username:password@hostname:9090/path?arg=value#anchor';

var_dump(parse_url($url));
var_dump(parse_url($url, PHP_URL_SCHEME));
var_dump(parse_url($url, PHP_URL_USER));
var_dump(parse_url($url, PHP_URL_PASS));
var_dump(parse_url($url, PHP_URL_HOST));
var_dump(parse_url($url, PHP_URL_PORT));
var_dump(parse_url($url, PHP_URL_PATH));
var_dump(parse_url($url, PHP_URL_QUERY));
var_dump(parse_url($url, PHP_URL_FRAGMENT));
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
array(8) {
  ["scheme"]=>
  string(4) "http"
  ["host"]=>
  string(8) "hostname"
  ["port"]=>
  int(9090)
  ["user"]=>
  string(8) "username"
  ["pass"]=>
  string(8) "password"
  ["path"]=>
  string(5) "/path"
  ["query"]=>
  string(9) "arg=value"
  ["fragment"]=>
  string(6) "anchor"
}
string(4) "http"
string(8) "username"
string(8) "password"
string(8) "hostname"
int(9090)
string(5) "/path"
string(9) "arg=value"
string(6) "anchor"
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title>Ejemplo con la función <function>parse_url</function> sin esquema</title>
    <programlisting role="php">
<![CDATA[
<?php
$url = '//www.example.com/path?googleguy=googley';

// Antes de PHP 5.4.7, la ruta sería "//www.example.com/path"
var_dump(parse_url($url));
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
array(3) {
  ["host"]=>
  string(15) "www.example.com"
  ["path"]=>
  string(5) "/path"
  ["query"]=>
  string(17) "googleguy=googley"
}
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <note>
   <para>
    <function>parse_url</function> fue creada específicamente para analizar URL
    y no URI. Sin embargo, por razones de compatibilidad adyacente, PHP
    hace una excepción para el esquema <literal>file://</literal> donde los triples slashs
    (<literal>file:///</literal>...) están permitidos. Todos los demás esquemas son inválidos.
   </para>
  </note>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>pathinfo</function></member>
    <member><function>parse_str</function></member>
    <member><function>http_build_query</function></member>
    <member><function>dirname</function></member>
    <member><function>basename</function></member>
    <member><link xlink:href="&url.rfc;3986">RFC 3986</link></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
