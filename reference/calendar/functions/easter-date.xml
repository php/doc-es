<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 7706c4d3877d401e26e7f09b17f765337dd4405c Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: no -->
<refentry xml:id="function.easter-date" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>easter_date</refname>
  <refpurpose>Retorna el timestamp Unix para la medianoche local el día de Pascua de un año dado</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>int</type><methodname>easter_date</methodname>
   <methodparam choice="opt"><type class="union"><type>int</type><type>null</type></type><parameter>year</parameter><initializer>&null;</initializer></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>mode</parameter><initializer><constant>CAL_EASTER_DEFAULT</constant></initializer></methodparam>
  </methodsynopsis>
  <para>
   Retorna un timestamp UNIX para Pascua, a medianoche, para un año dado.
  </para>
  <para>
   La fecha de Pascua fue establecida por el concilio
   de Nicea, en 325 de nuestra era, como siendo el domingo
   después de la primera luna llena que sigue al equinoccio de
   primavera. El equinoccio de primavera es considerado
   como siendo siempre el 21 de marzo, lo cual reduce el
   problema al cálculo de la fecha de la luna llena que sigue, y el
   domingo siguiente. El algoritmo fue introducido hacia 532, por Dionysius
   Exiguus. Con el calendario Juliano, (para los años antes de 1753),
   un ciclo de 19 años es suficiente para conocer las fechas de las fases de la
   luna. Con el calendario Gregoriano, (a partir de los años
   1753, diseñado por Clavius y Lilius, luego introducido por el papa Gregorio XIII
   en octubre de 1582, y en Gran Bretaña y sus colonias en septiembre de 1752),
   dos factores de corrección fueron añadidos para hacer
   el ciclo más preciso.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>year</parameter></term>
     <listitem>
      <para>
       El año, debe ser un número comprendido entre 1970 y 2037 para los sistemas de 32 bits, o entre 1970 y 2 000 000 000 para los sistemas de 64 bits.
       Si se omite o es &null;, el valor por omisión será el año actual según la hora local.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>mode</parameter></term>
     <listitem>
      <para>
       Permite calcular la fecha de Pascua según el calendario Juliano
       cuando se define como <constant>CAL_EASTER_ALWAYS_JULIAN</constant>. Ver también
       <link linkend="calendar.constants">las constantes de calendario</link>.
       </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   La fecha para Pascua, en forma de timestamp unix.
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   Se genera una <classname>ValueError</classname> si el año es anterior a 1970 o posterior a 2037
   al ejecutarse en un sistema de 32 bits, o posterior a 2 000 000 000 en un sistema de 64 bits.
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <informaltable>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>&Version;</entry>
      <entry>&Description;</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>8.3.0</entry>
      <entry>
       En los sistemas de 64 bits, el argumento <parameter>year</parameter> ahora acepta valores en el rango de 1970 a
       2 000 000 000.
      </entry>
     </row>
     <row>
      <entry>8.0.0</entry>
      <entry>
       <parameter>year</parameter> ahora es nullable.
      </entry>
     </row>
     <row>
      <entry>8.0.0</entry>
      <entry>
       Ahora se genera una <classname>ValueError</classname> cuando
       <parameter>year</parameter> está fuera del rango permitido.
       Anteriormente, se generaba una advertencia <constant>E_WARNING</constant>
       y la función retornaba &false;.
      </entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Ejemplo con <function>easter_date</function></title>
    <programlisting role="php">
<![CDATA[
<?php

echo date("M-d-Y", easter_date(1999));        // Apr-04-1999
echo date("M-d-Y", easter_date(2000));        // Apr-23-2000
echo date("M-d-Y", easter_date(2001));        // Apr-15-2001

?>
]]>
    </programlisting>
   </example>
   <example>
    <title>Uso de <function>easter_date</function> con <classname>DateTime</classname></title>
    <programlisting role="php">
<![CDATA[
<?php

$timestamp = easter_date(2023);

$datetime = new \DateTime();
$datetime->setTimestamp($timestamp);

echo $datetime->format('M-d-Y'); // Apr-09-2023

?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <note>
   <para>
    La función <function>easter_date</function> se basa en las funciones
    de la biblioteca C time del sistema, en lugar de las funciones
    date y time internas de PHP. Además, la función <function>easter_date</function>
    utiliza la variable de entorno <literal>TZ</literal> para determinar
    la zona horaria a utilizar, en lugar de la
    <link linkend="ini.date.timezone">zona horaria por defecto</link> de PHP,
    lo cual puede llevar a un comportamiento no deseado al utilizar
    esta función con otras funciones date de PHP.
   </para>
   <para>
    Como solución alternativa, puede utilizarse la función
    <function>easter_days</function> con las clases
    <classname>DateTime</classname> y <classname>DateInterval</classname>
    para calcular el día de Pascua en la zona horaria de PHP, de la siguiente manera:
   </para>
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
function get_easter_datetime($year) {
    $base = new DateTime("$year-03-21");
    $days = easter_days($year);

    return $base->add(new DateInterval("P{$days}D"));
}

foreach (range(2012, 2015) as $year) {
    printf("Pascua, en %d, cae el %s\n",
           $year,
           get_easter_datetime($year)->format('d F'));
}
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Pascua, en 2012, cae el 08 Abril
Pascua, en 2013, cae el 31 Marzo
Pascua, en 2014, cae el 20 Abril
Pascua, en 2015, cae el 05 Abril
]]>
    </screen>
   </informalexample>
  </note>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member>
     <function>easter_days</function> para el cálculo de Pascua
     antes de 1970 y después de 2037
    </member>
   </simplelist>
  </para>
 </refsect1>
</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
