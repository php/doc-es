<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: f03806fcd8fe03a0501bd40b6e3939ff6589a1d2 Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: no -->
<refentry xml:id="phar.startbuffering" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>Phar::startBuffering</refname>
  <refpurpose>Inicia el almacenamiento en búfer de escrituras Phar, sin modificar el objeto Phar en el disco</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis role="Phar">
   <modifier>public</modifier> <type>void</type><methodname>Phar::startBuffering</methodname>
   <void/>
  </methodsynopsis>

  <para>
   Aunque técnicamente innecesario, el método <function>Phar::startBuffering</function>
   puede proporcionar un aumento de rendimiento durante la creación o modificación de un archivo
   Phar con un gran número de ficheros. Normalmente, cada vez que un fichero dentro del
   archivo Phar es creado o modificado, el archivo Phar completo se recrea incluyendo los
   cambios. De esta manera, el archivo siempre estará actualizado con respecto a las operaciones que
   se le aplican.
  </para>
  <para>
   Aunque esto pueda parecer innecesario durante la creación de un archivo Phar simple,
   adquiere sentido al escribir el archivo Phar completo de una sola vez.
   Asimismo, es frecuente necesitar realizar una serie de cambios y asegurarse
   de que todos son posibles antes de escribir en el disco, de manera similar a las transacciones
   de las bases de datos relacionales. Las funciones
   <function>Phar::startBuffering</function>/<function>Phar::stopBuffering</function> están disponibles
   con este propósito.
  </para>
  <para>
   El almacenamiento en búfer Phar se realiza por archivo, el búfer activo para el archivo Phar
   <literal>foo.phar</literal> no afecta a los cambios realizados en el archivo Phar
   <literal>bar.phar</literal>.
  </para>

 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  &no.function.parameters;
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.void;
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Un ejemplo con <function>Phar::startBuffering</function></title>
    <para>
    </para>
    <programlisting role="php">
<![CDATA[
<?php
// se asegura de que el phar no exista ya
@unlink('nouveau.phar');
try {
    $p = new Phar(dirname(__FILE__) . '/nouveau.phar', 0, 'nouveau.phar');
} catch (Exception $e) {
    echo 'No puede crear el phar:', $e;
}
echo 'El nuevo phar tiene ' . $p->count() . " entradas\n";
$p->startBuffering();
$p['fichier.txt'] = 'salut';
$p['fichier2.txt'] = 'jolie';
$p['fichier2.txt']->setCompressedGZ();
$p['fichier3.txt'] = 'môme';
$p['fichier3.txt']->setMetadata(42);
$p->setStub("<?php
function __autoload($class)
{
    include 'phar://monphar.phar/' . str_replace('_', '/', $class) . '.php';
}
Phar::mapPhar('monphar.phar');
include 'phar://monphar.phar/demarrage.php';
__HALT_COMPILER();");
$p->stopBuffering();
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>Phar::stopBuffering</function></member>
    <member><function>Phar::isBuffering</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
