<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 656d1610af1a960d87c8b7056e54d0d4c75fb123 Maintainer: seros Status: ready -->
<!-- Reviewed: no -->
<refentry xml:id="phar.setsignaturealgorithm" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>Phar::setSignatureAlgorithm</refname>
  <refpurpose>Establecer el algoritmo de firma para un phar y aplicarlo</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <type>void</type><methodname>Phar::setSignatureAlgorithm</methodname>
   <methodparam><type>int</type><parameter>sigtype</parameter></methodparam>
   <methodparam choice="opt"><type>string</type><parameter>privatekey</parameter></methodparam>
  </methodsynopsis>
  &phar.write;

  <para>
   Establece el algoritmo de firma para un phar y lo aplica. El
   algoritmo de firma debe ser una de las constantes <constant>Phar::MD5</constant>,
   <constant>Phar::SHA1</constant>, <constant>Phar::SHA256</constant>,
   <constant>Phar::SHA512</constant>, o <constant>Phar::OPENSSL</constant>.
  </para>
  <para>
   Observe que todos los archivos phar ejecutables tienen una firma creada
   automáticamente, <literal>SHA1</literal> por omisión. Los archivos de datos basados en tar o en zip
   (archivos creados con la clase <classname>PharData</classname> class) deben tener
   su signatura creada y establecerla explícitamente mediante
   <function>Phar::setSignatureAlgorithm</function>.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>sigtype</parameter></term>
     <listitem>
      <para>
       Una de las constantes <constant>Phar::MD5</constant>,
       <constant>Phar::SHA1</constant>, <constant>Phar::SHA256</constant>,
       <constant>Phar::SHA512</constant>, o <constant>Phar::OPENSSL</constant>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>privatekey</parameter></term>
     <listitem>
      <para>
       El contenido de una clave privada OpenSSL, como la extraída de un certificado o
       de un fichero de clave OpenSSL:
       <programlisting role="php">
<![CDATA[
<?php
$private = openssl_get_privatekey(file_get_contents('private.pem'));
$pkey = '';
openssl_pkey_export($private, $pkey);
$p->setSignatureAlgorithm(Phar::OPENSSL, $pkey);
?>
        ]]>
       </programlisting>
       Véase la <link linkend="phar.using">Introducción de phar</link> para instrucciones sobre
       la designación y ubicaión del fichero de clave pública.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>

 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.void;
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   Lanza una excepción de tipo <classname>UnexpectedValueException</classname> para muchos errores,
   y una excepción de tipo <classname>PharException</classname>
   si ocurrió algún problema al volcar los cambios al disco.
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>Phar::getSupportedSignatures</function></member>
    <member><function>Phar::getSignature</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
