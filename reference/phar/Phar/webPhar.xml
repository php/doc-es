<?xml version='1.0' encoding='utf-8'?>
<!-- EN-Revision: 5beaad9885973652023784f1a4656a5e497779fb Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: yes -->
<refentry xml:id="phar.webphar" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>Phar::webPhar</refname>
  <refpurpose>Redirige una solicitud desde un navegador web a un fichero interno en el archivo phar</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis role="Phar">
   <modifier>final</modifier> <modifier>public</modifier> <modifier>static</modifier> <type>void</type><methodname>Phar::webPhar</methodname>
   <methodparam choice="opt"><type class="union"><type>string</type><type>null</type></type><parameter>alias</parameter><initializer>&null;</initializer></methodparam>
   <methodparam choice="opt"><type class="union"><type>string</type><type>null</type></type><parameter>index</parameter><initializer>&null;</initializer></methodparam>
   <methodparam choice="opt"><type class="union"><type>string</type><type>null</type></type><parameter>fileNotFoundScript</parameter><initializer>&null;</initializer></methodparam>
   <methodparam choice="opt"><type>array</type><parameter>mimeTypes</parameter><initializer>[]</initializer></methodparam>
   <methodparam choice="opt"><type class="union"><type>callable</type><type>null</type></type><parameter>rewrite</parameter><initializer>&null;</initializer></methodparam>
  </methodsynopsis>
  <para>
   <function>Phar::webPhar</function> actúa como <function>Phar::mapPhar</function> para los phars orientados a web. Este método analiza
   <varname>$_SERVER['REQUEST_URI']</varname> y enruta las solicitudes de un navegador hacia un fichero
   interno del archivo.
   Esto simula un servidor web, enrutando solicitudes al fichero correcto,
   enviando los encabezados adecuados y analizando el fichero PHP como corresponde.
   Combinado con <function>Phar::mungServer</function> y <function>Phar::interceptFileFuncs</function>,
   cualquier aplicación web puede ser utilizada sin cambios a partir del archivo phar.
  </para>
  <para>
   <function>Phar::webPhar</function> debe ser llamado únicamente desde el contenedor de carga
   de un archivo phar (consultar <link linkend="phar.fileformat.stub">esto</link>
   para obtener más información sobre los contenedores).
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>alias</parameter></term>
     <listitem>
      <para>
       El alias que puede ser utilizado en la URL
       <literal>phar://</literal> para referirse
       al archivo, en lugar de su ruta completa.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>index</parameter></term>
     <listitem>
      <para>
       La ubicación dentro del archivo del índice de directorio.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>fileNotFoundScript</parameter></term>
     <listitem>
      <para>
       La ubicación del script a ejecutar cuando un fichero no es encontrado. Este
       script debe enviar los encabezados HTTP 404 correctos.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>mimeTypes</parameter></term>
     <listitem>
      <para>
       Un array que hace corresponder extensiones de fichero adicionales a tipos MIME.
       Si las correspondencias por defecto son suficientes, se debe pasar un array vacío.
       Por defecto, estas correspondencias son las siguientes:
       <programlisting role="php">
        <![CDATA[
<?php
$mimes = array(
    'phps' => Phar::PHPS, // paso a highlight_file()
    'c' => 'text/plain',
    'cc' => 'text/plain',
    'cpp' => 'text/plain',
    'c++' => 'text/plain',
    'dtd' => 'text/plain',
    'h' => 'text/plain',
    'log' => 'text/plain',
    'rng' => 'text/plain',
    'txt' => 'text/plain',
    'xsd' => 'text/plain',
    'php' => Phar::PHP, // analizar como PHP
    'inc' => Phar::PHP, // analizar como PHP
    'avi' => 'video/avi',
    'bmp' => 'image/bmp',
    'css' => 'text/css',
    'gif' => 'image/gif',
    'htm' => 'text/html',
    'html' => 'text/html',
    'htmls' => 'text/html',
    'ico' => 'image/x-ico',
    'jpe' => 'image/jpeg',
    'jpg' => 'image/jpeg',
    'jpeg' => 'image/jpeg',
    'js' => 'application/x-javascript',
    'midi' => 'audio/midi',
    'mid' => 'audio/midi',
    'mod' => 'audio/mod',
    'mov' => 'movie/quicktime',
    'mp3' => 'audio/mp3',
    'mpg' => 'video/mpeg',
    'mpeg' => 'video/mpeg',
    'pdf' => 'application/pdf',
    'png' => 'image/png',
    'swf' => 'application/shockwave-flash',
    'tif' => 'image/tiff',
    'tiff' => 'image/tiff',
    'wav' => 'audio/wav',
    'xbm' => 'image/xbm',
    'xml' => 'text/xml',
);
?>
        ]]>
       </programlisting>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>rewrite</parameter></term>
     <listitem>
      <para>
       La función de reescritura que se pasa toma como único argumento un string
       y debe devolver un string o false.
      </para>
      <para>
       Si se utiliza fast-cgi o cgi, el argumento pasado a la función es el valor de la
       variable <varname>$_SERVER['PATH_INFO']</varname>. De lo contrario, el argumento pasado a la función
       es el valor de la variable <varname>$_SERVER['REQUEST_URI']</varname>.
      </para>
      <para>
       Si se devuelve un string, será utilizado en la ruta interna del fichero.
       Si se devuelve false, entonces webPhar() enviará un código HTTP 403.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>

 </refsect1>
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.void;
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   Levanta una excepción <classname>PharException</classname> cuando el fichero interno no puede ser
   abierto o si la llamada se realiza fuera de un contenedor. Si se pasa un valor de array no válido en
   <parameter>mimeTypes</parameter> o si se pasa una función de devolución de llamada inválida al parámetro
   <parameter>rewrite</parameter>, entonces se levanta una excepción <classname>UnexpectedValueException</classname>.
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <informaltable>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>&Version;</entry>
      <entry>&Description;</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>8.0.0</entry>
      <entry>
       <parameter>fileNotFoundScript</parameter> y <parameter>rewrite</parameter>
       ahora son nullable.
      </entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Ejemplo con <function>Phar::webPhar</function></title>
    <para>
     En el ejemplo siguiente, el phar creado mostrará <literal>Hola mundo</literal>
     si alguien llama a <literal>/monphar.phar/index.php</literal> o
     <literal>/monphar.phar</literal>, y mostrará la fuente de
     <literal>index.phps</literal> si <literal>/monphar.phar/index.phps</literal> es llamado.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
// el archivo phar es creado:
try {
    $phar = new Phar('monphar.phar');
    $phar['index.php'] = '<?php echo "Hola mundo"; ?>';
    $phar['index.phps'] = '<?php echo "Hola mundo"; ?>';
    $phar->setStub('<?php
Phar::webPhar();
__HALT_COMPILER(); ?>');
} catch (Exception $e) {
    // se manejan los errores aquí
}
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>Phar::mungServer</function></member>
    <member><function>Phar::interceptFileFuncs</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
