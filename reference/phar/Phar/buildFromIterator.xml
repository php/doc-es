<?xml version='1.0' encoding='utf-8'?>
<!-- EN-Revision: f03806fcd8fe03a0501bd40b6e3939ff6589a1d2 Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: yes -->
<refentry xml:id="phar.buildfromiterator" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>Phar::buildFromIterator</refname>
  <refpurpose>Construye un archivo phar a partir de un iterador</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis role="Phar">
   <modifier>public</modifier> <type>array</type><methodname>Phar::buildFromIterator</methodname>
   <methodparam><type>Traversable</type><parameter>iterator</parameter></methodparam>
   <methodparam choice="opt"><type class="union"><type>string</type><type>null</type></type><parameter>baseDirectory</parameter><initializer>&null;</initializer></methodparam>
  </methodsynopsis>
  &phar.write;
  <para>
   Rellena un archivo phar a partir de un iterador. Dos estilos de iterador
   son soportados: los iteradores que hacen corresponder el nombre de archivo
   dentro del phar con el nombre de un archivo en el disco, y los iteradores
   como <classname>DirectoryIterator</classname> que devuelven objetos
   <classname>SplFileInfo</classname>. Para los iteradores que devuelven
   objetos <classname>SplFileInfo</classname>, el segundo parámetro es
   obligatorio.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>iterator</parameter></term>
     <listitem>
      <para>
       Un iterador que asocia un archivo con una posición, o bien
       devuelve objetos <classname>SplFileInfo</classname>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>baseDirectory</parameter></term>
     <listitem>
      <para>
       Para los iteradores que devuelven objetos
       <classname>SplFileInfo</classname>, la porción de ruta absoluta
       de cada archivo que debe ser eliminada al añadir al
       archivo phar.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   <function>Phar::buildFromIterator</function> devuelve un array
   asociativo que asocia la representación interna del archivo a un
   camino absoluto en el sistema.
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   Este método emite una excepción <classname>UnexpectedValueException</classname>
   cuando el iterador devuelve valores falsos, tales como una clave
   entera en lugar de una cadena; una excepción
   <classname>BadMethodCallException</classname> cuando un iterador
   basado en <classname>SplFileInfo</classname> es pasado sin parámetro
   <parameter>baseDirectory</parameter>, o una excepción
   <classname>PharException</classname> si ha habido errores al
   guardar el archivo phar.
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <informaltable>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>&Version;</entry>
      <entry>&Description;</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>8.1.0</entry>
      <entry>
       <methodname>Phar::buildFromIterator</methodname> ya no devuelve &false; ahora.
      </entry>
     </row>
     <row>
      <entry>8.0.0</entry>
      <entry>
       <parameter>baseDirectory</parameter> ahora es nullable.
      </entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
   <example>
    <title>Ejemplo con <function>Phar::buildFromIterator</function> y <classname>SplFileInfo</classname></title>
    <para>
     Para la mayoría de archivos phar, el archivo refleja la estructura
     de un directorio, y el segundo estilo es el más útil. Por ejemplo,
     para crear un archivo phar que contenga los archivos de la estructura
     del directorio:
    </para>
    <para>
     <screen>
<![CDATA[
/ruta/hacia/proyecto/
                 config/
                        dist.xml
                        debug.xml
                 lib/
                     file1.php
                     file2.php
                 src/
                     processthing.php
                 www/
                     index.php
                 cli/
                     index.php
]]>
   </screen>
  </para>
  <para>
   Este código puede ser utilizado para añadir al archivo "proyecto.phar":
  </para>
  <para>
   <programlisting role="php">
<![CDATA[
<?php
// crea con el alias "proyecto.phar"
$phar = new Phar('proyecto.phar', 0, 'proyecto.phar');
$phar->buildFromIterator(
    new RecursiveIteratorIterator(
     new RecursiveDirectoryIterator('/ruta/hacia/proyecto')),
    '/ruta/hacia/proyecto');
$phar->setStub($phar->createDefaultStub('cli/index.php', 'www/index.php'));
?>
]]>
   </programlisting>
  </para>
  <para>
   El archivo proyecto.phar puede ser utilizado inmediatamente.
   <function>Phar::buildFromIterator</function> no establece parámetros
   tales como la compresión o los metadatos; esto
   puede ser hecho después de crear el archivo phar.
  </para>
  <para>
   Es interesante notar que <function>Phar::buildFromIterator</function>
   también puede ser utilizado para copiar los elementos de un archivo phar
   existente, ya que el objeto Phar hereda de <classname>DirectoryIterator</classname>:
  </para>
  <para>
   <programlisting role="php">
<![CDATA[
<?php
// crea con el alias "proyecto.phar"
$phar = new Phar('proyecto.phar', 0, 'proyecto.phar');
$phar->buildFromIterator(
    new RecursiveIteratorIterator(
     new Phar('/ruta/hacia/otrophar.phar')),
    'phar:///ruta/hacia/otrophar.phar/ruta/hacia/proyecto');
$phar->setStub($phar->createDefaultWebStub('cli/index.php', 'www/index.php'));
?>
]]>
   </programlisting>
  </para>
  </example>
  <example>
   <title>Ejemplo con <function>Phar::buildFromIterator</function> y otros iteradores</title>
  <para>
   La segunda forma de iterador puede ser utilizada con cualquier
   iterador que devuelva una correspondencia clave => valor,
   tales como <classname>ArrayIterator</classname>:
  </para>
  <para>
   <programlisting role="php">
<![CDATA[
<?php
// crea con el alias "proyecto.phar"
$phar = new Phar('proyecto.phar', 0, 'proyecto.phar');
$phar->buildFromIterator(
    new ArrayIterator(
     array(
        'interna/fichero.php' => dirname(__FILE__) . '/unfichero.php',
        'otro/fichero.jpg' => fopen('/ruta/hacia/grande.jpg', 'rb'),
     )));
$phar->setStub($phar->createDefaultWebStub('cli/index.php', 'www/index.php'));
?>
]]>
   </programlisting>
  </para>
  </example>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>Phar::buildFromDirectory</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
