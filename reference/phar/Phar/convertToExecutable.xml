<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: befe29ff6f206fa631ba654e82bbf8186e9b3939 Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: no -->
<refentry xml:id="phar.converttoexecutable" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>Phar::convertToExecutable</refname>
  <refpurpose>Convierte un archivo phar a otro formato de archivo de archivo phar ejecutable</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis role="Phar">
   <modifier>public</modifier> <type class="union"><type>Phar</type><type>null</type></type><methodname>Phar::convertToExecutable</methodname>
   <methodparam choice="opt"><type class="union"><type>int</type><type>null</type></type><parameter>format</parameter><initializer>&null;</initializer></methodparam>
   <methodparam choice="opt"><type class="union"><type>int</type><type>null</type></type><parameter>compression</parameter><initializer>&null;</initializer></methodparam>
   <methodparam choice="opt"><type class="union"><type>string</type><type>null</type></type><parameter>extension</parameter><initializer>&null;</initializer></methodparam>
  </methodsynopsis>
  &phar.write;
  <para>
   Este método se utiliza para convertir un archivo phar a otro formato de archivo. Por ejemplo,
   puede ser utilizado para crear un archivo phar basado en tar a partir de un archivo phar basado en zip
   o a partir de un archivo phar ejecutable basado en el formato de archivo phar. Asimismo,
   puede ser utilizado para aplicar una compresión global a un archivo basado en tar o en phar.
  </para>
  <para>
   Si no se especifica ningún cambio, este método lanza una excepción <classname>BadMethodCallException</classname>.
  </para>
  <para>
   En caso de éxito, el método crea un nuevo archivo en el disco y devuelve un objeto <classname>Phar</classname>.
   El archivo antiguo no es eliminado del disco, lo cual debe hacerse manualmente al final del procedimiento.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>format</parameter></term>
     <listitem>
      <para>
       Debe ser uno de los formatos <literal>Phar::PHAR</literal>, <literal>Phar::TAR</literal>,
       o <literal>Phar::ZIP</literal>. Si este argumento es &null;, el formato de archivo actual será
       conservado.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>compression</parameter></term>
     <listitem>
      <para>
       Debe ser <literal>Phar::NONE</literal> para ninguna compresión global,
       <literal>Phar::GZ</literal> para una compresión basada en zlib y
       <literal>Phar::BZ2</literal> para una compresión basada en bzip2.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>extension</parameter></term>
     <listitem>
      <para>
       Este argumento se utiliza para sobrescribir la extensión por defecto de un archivo convertido.
       Cabe señalar que todos los archivos phar basados en zip o en tar deben contener
       <literal>.phar</literal> en su extensión para ser tratados como un archivo phar.
      </para>
      <para>
       Si se convierte a un archivo basado en phar, las extensiones por defecto son
       <literal>.phar</literal>, <literal>.phar.gz</literal>, o <literal>.phar.bz2</literal>
       según la compresión especificada. Para los archivos phar basados en tar, las extensiones
       por defecto son <literal>.phar.tar</literal>, <literal>.phar.tar.gz</literal>,
       y <literal>.phar.tar.bz2</literal>. Para los archivos phar basados en zip, la extensión por
       defecto es <literal>.phar.zip</literal>.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>

 </refsect1>
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   El método devuelve un objeto <classname>Phar</classname> en caso de éxito,
   o &null; en caso de fallo.
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   Este método lanza una excepción <classname>BadMethodCallException</classname> si no es
   capaz de comprimir, si se ha especificado un método de compresión desconocido o si el archivo solicitado
   ha sido almacenado en búfer con <function>Phar::startBuffering</function> sin ser concluido con
   <function>Phar::stopBuffering</function>, lanza una excepción <classname>UnexpectedValueException</classname>
   si el soporte de escritura ha sido desactivado y lanza una excepción <classname>PharException</classname> si
   se ha encontrado algún problema durante la fase de creación del archivo.
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <informaltable>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>&Version;</entry>
      <entry>&Description;</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>8.0.0</entry>
      <entry>
       <parameter>format</parameter>, <parameter>compression</parameter>,
       y <parameter>extension</parameter> ahora son nullable.
      </entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Un ejemplo con <function>Phar::convertToExecutable</function></title>
    <para>
     Utilicemos Phar::convertToExecutable() :
    </para>
    <programlisting role="php">
<![CDATA[
<?php
try {
    $tarphar = new Phar('monphar.phar.tar');
    // se convierte al formato de archivo phar
    // note que monphar.phar.tar *no* es borrado
    $phar = $tarphar->convertToExecutable(Phar::PHAR); // crea monphar.phar
    $phar->setStub($phar->createDefaultStub('cli.php', 'web/index.php'));
    // crea monphar.phar.tgz
    $compressed = $phar->convertToExecutable(Phar::TAR, Phar::GZ, '.phar.tgz');
} catch (Exception $e) {
    // se manejan los errores aquí
}
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>Phar::convertToData</function></member>
    <member><function>PharData::convertToExecutable</function></member>
    <member><function>PharData::convertToData</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
