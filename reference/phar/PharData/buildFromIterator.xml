<?xml version='1.0' encoding='utf-8'?>
<!-- EN-Revision: f03806fcd8fe03a0501bd40b6e3939ff6589a1d2 Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: yes -->
<refentry xml:id="phardata.buildfromiterator" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>PharData::buildFromIterator</refname>
  <refpurpose>Construye un archivo tar o zip a partir de un iterador</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis role="PharData">
   <modifier>public</modifier> <type>array</type><methodname>PharData::buildFromIterator</methodname>
   <methodparam><type>Traversable</type><parameter>iterator</parameter></methodparam>
   <methodparam choice="opt"><type class="union"><type>string</type><type>null</type></type><parameter>baseDirectory</parameter><initializer>&null;</initializer></methodparam>
  </methodsynopsis>
  <para>
   Rellena un archivo tar o zip a partir de un iterador. Dos estilos de iteradores son soportados,
   los iteradores que hacen corresponder la ruta de archivo dentro del archivo con la ruta en el disco
   y los iteradores como DirectoryIterator que devuelven objetos
   SplFileInfo. Para los iteradores que devuelven objetos SplFileInfo, el segundo argumento es requerido.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>iterator</parameter></term>
     <listitem>
      <para>
       Cualquier iterador que haga corresponder de forma asociativa un archivo tar/zip o
       que devuelva objetos SplFileInfo
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>baseDirectory</parameter></term>
     <listitem>
      <para>
       Para los iteradores que devuelven objetos SplFileInfo, la parte del camino completo
       hacia el archivo a eliminar al añadir al archivo tar/zip
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>

 </refsect1>
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   <function>PharData::buildFromIterator</function> devuelve un array asociativo
   que hace corresponder una ruta de archivo interna con una ruta completa hacia
   el archivo en el sistema de archivos.
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   Este método devuelve una excepción <classname>UnexpectedValueException</classname> cuando
   el iterador devuelve valores incorrectos, como una clave entera en lugar de una cadena,
   una excepción <classname>BadMethodCallException</classname> cuando se pasa un iterador basado en
   SplFileInfo sin el argumento <parameter>baseDirectory</parameter>, o una
   excepción <classname>PharException</classname> si se han encontrado errores al
   guardar el archivo phar.
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <informaltable>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>&Version;</entry>
      <entry>&Description;</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>8.1.0</entry>
      <entry>
       <methodname>PharData::buildFromIterator</methodname> ya no devuelve &false; ahora.
      </entry>
     </row>
     <row>
      <entry>8.0.0</entry>
      <entry>
       <parameter>baseDirectory</parameter> ahora es nullable.
      </entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title>Ejemplo con <function>PharData::buildFromIterator</function> y <classname>SplFileInfo</classname></title>
   <para>
    Para la mayoría de los archivos tar/zip, el archivo reflejará la estructura
    de directorio actual y el segundo estilo es el más útil. Por
    ejemplo, para crear un archivo tar/zip que contenga los archivos
    con la estructura de directorio a continuación:
   </para>
   <para>
    <screen>
<![CDATA[
/chemin/vers/projet/
                 config/
                        dist.xml
                        debug.xml
                 lib/
                     fichier1.php
                     fichier2.php
                 src/
                     processthing.php
                 www/
                     index.php
                 cli/
                     index.php
]]>
    </screen>
   </para>
   <para>
    Este código puede ser utilizado para añadir archivos a
    el archivo &quot;projet.tar&quot; tar:
   </para>
   <para>
    <programlisting role="php">
<![CDATA[
<?php
$phar = new PharData('projet.tar');
$phar->buildFromIterator(
    new RecursiveIteratorIterator(
     new RecursiveDirectoryIterator('/chemin/vers/projet')),
    '/chemin/vers/projet');
?>
]]>
    </programlisting>
   </para>
   <para>
    El archivo <literal>projet.tar</literal> puede entonces ser borrado
    inmediatamente. <function>PharData::buildFromIterator</function>
    no establece parámetros como la compresión, las metadatos,
    lo cual puede ser hecho después de haber creado el archivo tar/zip.
   </para>
   <para>
    Se debe notar que <function>Phar::buildFromIterator</function> también
    puede ser utilizado para copiar el contenido de un archivo phar, tar o zip
    existente, ya que el objeto <classname>PharData</classname> es derivado
    de <classname>DirectoryIterator</classname>:
   </para>
   <para>
    <programlisting role="php">
<![CDATA[
<?php
$phar = new PharData('projet.tar');
$phar->buildFromIterator(
    new RecursiveIteratorIterator(
     new Phar('/chemin/vers/unautrephar.phar')),
    'phar:///chemin/vers/unautrephar.phar/chemin/vers/projet');
$phar->setStub($phar->createDefaultStub('cli/index.php', 'www/index.php'));
?>
]]>
    </programlisting>
   </para>
  </example>
  <example>
   <title>Ejemplo con <function>PharData::buildFromIterator</function> y otros iteradores</title>
   <para>
    La segunda forma de iterador puede ser utilizada con cualquier iterador que devuelva
    una asociación clave => valor, tal como <classname>ArrayIterator</classname>:
   </para>
   <para>
    <programlisting role="php">
<![CDATA[
<?php
$phar = new PharData('projet.tar');
$phar->buildFromIterator(
    new ArrayIterator(
     array(
        'interne/fichier.php' => dirname(__FILE__) . '/unfichier.php',
        'unautre/fichier.jpg' => fopen('/chemin/vers/grosfichier.jpg', 'rb'),
     )));
?>
]]>
    </programlisting>
   </para>
  </example>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>Phar::buildFromIterator</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
