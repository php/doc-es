<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: af4410a7e15898c3dbe83d6ea38246745ed9c6fb Maintainer: seros Status: ready -->
<!-- Reviewed: no -->
<refentry xml:id="phardata.converttodata" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>PharData::convertToData</refname>
  <refpurpose>Convertir un archivo phar en un fichero tar o zip no ejecutable</refpurpose>
 </refnamediv>


 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>PharData</type><methodname>PharData::convertToData</methodname>
   <methodparam choice="opt"><type>int</type><parameter>format</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>compression</parameter></methodparam>
   <methodparam choice="opt"><type>string</type><parameter>extension</parameter></methodparam>
  </methodsynopsis>

  <para>
   Este método se usa para convertir un archivo tar o zip no ejecutable a otro
   formato no ejecutable.
  </para>
  <para>
   Si no se especifica ningún cambio, este método lanza una excepción de tipo <classname>BadMethodCallException</classname>
   Este método debería usarse para convertir un archivo tar a formato zip o viceversa. Aunque
   es posible cambiar la compresión de un archivo tar simplemente usando este método,
   es mejor utilizad el método <function>PharData::compress</function> para una consistencia
   lógica.
  </para>
  <para>
   En caso de éxito, el metodo crea un nuevo archivo en disco y devuelve un objeto de la clase
   <classname>PharData</classname>. El archivo antiguo no se elimina del disco, y debería hacerse manualmente después
   de que el proceso haya finalizado.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>format</parameter></term>
     <listitem>
      <para>
       Este parámetro debería ser <constant>Phar::TAR</constant>
       o <constant>Phar::ZIP</constant>. Si se establece a &null;, se conservará el
       formato de fichero existente.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>compression</parameter></term>
     <listitem>
      <para>
       Este parámetro debería ser <constant>Phar::NONE</constant> para no comprimir el archivo
       completo, <constant>Phar::GZ</constant> para la compresión basada en zlib, y
       <constant>Phar::BZ2</constant> para la compresión basada en bzip.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>extension</parameter></term>
     <listitem>
      <para>
       Este parámetro se utiliza para sobrescribir la extensión de fichero predeterminada de un
       archivo convertido. Observe que <literal>.phar</literal> no puede ser usado
       en ningún lugar del nombre de fichero de un archivo tar o zip no ejecutable.
      </para>
      <para>
       Si se convierte a un archivo basado en tar, las
       extensiones predeterminadas son <literal>.tar</literal>, <literal>.tar.gz</literal>,
       y <literal>.tar.bz2</literal> dependiendo de la compresión especificada.
       Para archivos basados en zip, la
       extensión predetermianda es <literal>.zip</literal>.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>

 </refsect1>
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   El método devuelve un objeto <classname>PharData</classname> en caso de éxito, y lanza una
   excepción en caso de error.
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   Este método lanza una excepción de tipo <classname>BadMethodCallException</classname> cuando no se
   puede comprimir, se ha especificado un método de compresión desconocido, el archivo
   solicitado está almacenado en buffer con <function>Phar::startBuffering</function> y
   no se ha cerrado con <function>Phar::stopBuffering</function>,
   y una excepción de tipo <classname>PharException</classname> si se encontró algún problema
   durante el proceso de la creación de phar.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Un ejemplo de <function>PharData::convertToData</function></title>
    <para>
     Utilizar PharData::convertToData():
    </para>
    <programlisting role="php">
<![CDATA[
<?php
try {
    $tarphar = new PharData('miphar.tar');
    // observe que miphar.phar.tar *no* está desvinculado.
    // convertirlo a un formato de fichero tar no ejecutable,
    // se crea miphar.zip
    $zip = $tarphar->convertToData(Phar::ZIP);
    // crear miphar.tbz
    $tgz = $tarphar->convertToData(Phar::TAR, Phar::BZ2, '.tbz');
    // crear miphar.phar.tgz
    $phar = $tarphar->convertToData(Phar::PHAR); // lanza una excepción
} catch (Exception $e) {
    // manejar el error aquí
}
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>Phar::convertToExecutable</function></member>
    <member><function>Phar::convertToData</function></member>
    <member><function>PharData::convertToExecutable</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
