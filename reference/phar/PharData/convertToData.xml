<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: f03806fcd8fe03a0501bd40b6e3939ff6589a1d2 Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: no -->
<refentry xml:id="phardata.converttodata" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>PharData::convertToData</refname>
  <refpurpose>Convierte un archivo phar en un archivo tar o zip no ejecutable</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis role="PharData">
   <modifier>public</modifier> <type class="union"><type>PharData</type><type>null</type></type><methodname>PharData::convertToData</methodname>
   <methodparam choice="opt"><type class="union"><type>int</type><type>null</type></type><parameter>format</parameter><initializer>&null;</initializer></methodparam>
   <methodparam choice="opt"><type class="union"><type>int</type><type>null</type></type><parameter>compression</parameter><initializer>&null;</initializer></methodparam>
   <methodparam choice="opt"><type class="union"><type>string</type><type>null</type></type><parameter>extension</parameter><initializer>&null;</initializer></methodparam>
  </methodsynopsis>

  <para>
   Este método se utiliza para convertir un archivo tar o zip no ejecutable en
   otro formato no ejecutable.
  </para>
  <para>
   Si no se solicita ningún cambio, este método, este método lanza una excepción
   <classname>BadMethodCallException</classname>.
   Este método debe utilizarse para convertir un archivo tar al formato zip y viceversa.
   Aunque es posible cambiar la compresión de un archivo tar con este método, es
   preferible utilizar el método <function>PharData::compress</function> para mantener la coherencia a nivel de lógica.
  </para>
  <para>
   En caso de éxito, este método crea un nuevo archivo en el disco y devuelve un objeto
   <classname>PharData</classname>. El archivo antiguo no se borra del disco, lo cual debe
   hacerse manualmente una vez finalizado el procesamiento.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>format</parameter></term>
     <listitem>
      <para>
       El formato debe ser <literal>Phar::TAR</literal> o
       <literal>Phar::ZIP</literal>. Si es &null;, se conservará el formato de archivo actual.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>compression</parameter></term>
     <listitem>
      <para>
       La compresión debe ser <literal>Phar::NONE</literal> para evitar la compresión del archivo
       completo, <literal>Phar::GZ</literal> para la compresión basada en zlib, y
       <literal>Phar::BZ2</literal> para la compresión basada en bzip.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>extension</parameter></term>
     <listitem>
      <para>
       Este parámetro se utiliza para sobrescribir la extensión de archivo por defecto del archivo convertido. Tenga en cuenta
       que <literal>.phar</literal> no puede utilizarse en ninguna parte del nombre de archivo de un archivo tar o zip no ejecutable.
      </para>
      <para>
       En caso de conversión a un archivo phar basado en tar, las extensiones por defecto son
       <literal>.tar</literal>, <literal>.tar.gz</literal>
       y <literal>.tar.bz2</literal> según la compresión especificada.
       Para los archivos basados en zip, la extensión por defecto es <literal>.zip</literal>.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>

 </refsect1>
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Este método devuelve un objeto <classname>PharData</classname> en caso de éxito,
   o &null; en caso de fallo.
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   Este método lanza una excepción <classname>BadMethodCallException</classname>
   cuando no es capaz de comprimir, cuando se ha especificado un método de compresión desconocido, cuando el archivo solicitado está en búfer con
   <function>Phar::startBuffering</function> y no se ha finalizado con
   <function>Phar::stopBuffering</function>, y lanza una excepción
   <classname>PharException</classname> si se produce algún problema durante
   la creación del phar.
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <informaltable>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>&Version;</entry>
      <entry>&Description;</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>8.0.0</entry>
      <entry>
       <parameter>format</parameter>, <parameter>compression</parameter>, y
       <parameter>extension</parameter> ahora son nullable.
      </entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Un ejemplo con <function>PharData::convertToData</function></title>
    <para>
     Utilicemos PharData::convertToData():
    </para>
    <programlisting role="php">
<![CDATA[
<?php
try {
    $tarphar = new PharData('monphar.tar');
    // note que monphar.tar no se *borra*
    // al convertirlo al formato tar no ejecutable
    // se crea monphar.zip
    $zip = $tarphar->convertToData(Phar::ZIP);
    // se crea monphar.tbz
    $tgz = $zip->convertToData(Phar::TAR, Phar::BZ2, '.tbz');
    // se crea monphar.phar.tgz
    $phar = $tarphar->convertToData(Phar::PHAR); // lanza una excepción
} catch (Exception $e) {
    // los errores se manejan aquí
}
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>Phar::convertToExecutable</function></member>
    <member><function>Phar::convertToData</function></member>
    <member><function>PharData::convertToExecutable</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
