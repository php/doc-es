<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 855bfee2f3db70d7dbb4c60c7c4a4efa567f1c60 Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: yes -->
<refentry xml:id="sqlite3stmt.bindparam" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>SQLite3Stmt::bindParam</refname>
  <refpurpose>Asocia un parámetro a una variable de declaración</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis role="SQLite3Stmt">
   <modifier>public</modifier> <type>bool</type><methodname>SQLite3Stmt::bindParam</methodname>
   <methodparam><type class="union"><type>string</type><type>int</type></type><parameter>param</parameter></methodparam>
   <methodparam><type>mixed</type><parameter role="reference">var</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>type</parameter><initializer><constant>SQLITE3_TEXT</constant></initializer></methodparam>
  </methodsynopsis>
  <para>
   Asocia un parámetro a una variable de declaración.
  </para>
  <caution>
   <para>
    Antes de PHP 7.2.14 y 7.3.0, respectivamente,
    <methodname>SQLite3Stmt::reset</methodname> debe ser llamado después del primer
    llamado a <methodname>SQLite3Stmt::execute</methodname> si el valor asociado
    debe ser actualizado correctamente en los llamados siguientes a
    <methodname>SQLite3Stmt::execute</methodname>.
    Si <methodname>SQLite3Stmt::reset</methodname> no es llamado, los valores
    asociados no serán modificados, incluso si el valor asignado a la variable pasada a
    <methodname>SQLite3Stmt::bindParam</methodname> ha sido modificado, o
    <methodname>SQLite3Stmt::bindParam</methodname> ha sido llamado nuevamente.
   </para>
  </caution>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>param</parameter></term>
     <listitem>
      <para>
       Puede ser un &string; (para parámetros nombrados) o un &integer;
       (para parámetros posicionales) que identifica la variable de declaración a
       la cual el valor debe ser asociado.
       Si un parámetro nombrado no comienza con un carácter "dos puntos"
       (<literal>:</literal>) o un arroba (<literal>@</literal>), "dos puntos"
       (<literal>:</literal>) serán automáticamente prefijados.
       Los parámetros posicionales comienzan con <literal>1</literal>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>var</parameter></term>
     <listitem>
      <para>
       El parámetro a asociar a la variable de declaración.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>type</parameter></term>
     <listitem>
      <para>
       El tipo de datos del parámetro a asociar.
       <itemizedlist>
        <listitem>
         <para>
          <constant>SQLITE3_INTEGER</constant> : El valor es un entero firmado,
          almacenado en 1, 2, 3, 4, 6, o 8 bytes, dependiendo del tamaño del valor.
         </para>
        </listitem>
        <listitem>
         <para>
          <constant>SQLITE3_FLOAT</constant> : El valor es un número de punto flotante,
          almacenado en 8 bytes.
         </para>
        </listitem>
        <listitem>
         <para>
          <constant>SQLITE3_TEXT</constant> : El valor es texto, almacenado
          utilizando la codificación de la base de datos
          (UTF-8, UTF-16BE o UTF-16-LE).
         </para>
        </listitem>
        <listitem>
         <para>
          <constant>SQLITE3_BLOB</constant> : El valor es un BLOB, almacenado
          exactamente de la forma en que fue proporcionado.
         </para>
        </listitem>
        <listitem>
         <para>
          <constant>SQLITE3_NULL</constant> : El valor es la valor NULL.
         </para>
        </listitem>
       </itemizedlist>
      </para>
      <para>
       A partir de PHP 7.0.7, si <parameter>type</parameter> es omitido, es
       automáticamente detectado desde el tipo de <parameter>var</parameter> :
       &boolean; y &integer; son tratados como <constant>SQLITE3_INTEGER</constant>,
       &float; como <constant>SQLITE3_FLOAT</constant>,
       &null; como <constant>SQLITE3_NULL</constant>
       y todos los demás como <constant>SQLITE3_TEXT</constant>.
       Anteriormente, si <parameter>type</parameter> era omitido, era por omisión
       <constant>SQLITE3_TEXT</constant>.
      </para>
      <note>
       <para>
        Si <parameter>var</parameter> es &null;, siempre fue tratado como
        <constant>SQLITE3_NULL</constant>, independientemente del
        <parameter>type</parameter> proporcionado.
       </para>
      </note>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Retorna &true; si el parámetro es asociado a la variable de declaración, &false; si
   ocurre un error.
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <informaltable>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>&Version;</entry>
      <entry>&Description;</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>7.4.0</entry>
      <entry>
       <parameter>param</parameter> ahora soporta la notación
       <literal>@param</literal>.
      </entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Uso de <function>SQLite3Stmt::bindParam</function></title>
    <para>
     Este ejemplo muestra cómo una declaración preparada única con un solo
     parámetro asociado puede ser utilizada para insertar múltiples filas con
     valores diferentes.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
$db = new SQLite3(':memory:');
$db->exec("CREATE TABLE foo (bar TEXT)");

$stmt = $db->prepare("INSERT INTO foo VALUES (:bar)");
$stmt->bindParam(':bar', $bar, SQLITE3_TEXT);

$bar = 'baz';
$stmt->execute();

$bar = 42;
$stmt->execute();

$res = $db->query("SELECT * FROM foo");
while (($row = $res->fetchArray(SQLITE3_ASSOC))) {
    var_dump($row);
}
?>
]]>
    </programlisting>
    &example.outputs;
    <screen role="php">
<![CDATA[
array(1) {
  ["bar"]=>
  string(3) "baz"
}
array(1) {
  ["bar"]=>
  string(2) "42"
}
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <simplelist>
   <member><methodname>SQLite3Stmt::bindValue</methodname></member>
   <member><methodname>SQLite3::prepare</methodname></member>
  </simplelist>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
