<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 4d02fe98ddc684a0d82a3921ef189a71b98f4f04 Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: no -->
<refentry xml:id="function.getopt" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>getopt</refname>
  <refpurpose>Lee las opciones pasadas en la línea de comandos</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type class="union"><type>array</type><type>false</type></type><methodname>getopt</methodname>
   <methodparam><type>string</type><parameter>short_options</parameter></methodparam>
   <methodparam choice="opt"><type>array</type><parameter>long_options</parameter><initializer>[]</initializer></methodparam>
   <methodparam choice="opt"><type>int</type><parameter role="reference">rest_index</parameter><initializer>&null;</initializer></methodparam>
  </methodsynopsis>
  <para>
   <function>getopt</function> lee las opciones pasadas en la línea de comandos.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>short_options</parameter></term>
     <listitem>
      <simpara>
       Cada carácter en esta cadena será utilizado como caracteres
       opcionales y deberá coincidir con las opciones pasadas, comenzando
       por un guión simple (<literal>-</literal>).
      </simpara>
      <simpara>
       Por ejemplo, una cadena opcional <literal>"x"</literal> coincidirá
       con la opción <literal>-x</literal>.
      </simpara>
      <simpara>
       Solo se permiten a-z, A-Z y 0-9.
      </simpara>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>long_options</parameter></term>
     <listitem>
      <simpara>
       Un array de opciones. Cada elemento de este array será utilizado como
       opción y deberá coincidir con las opciones pasadas, comenzando por un
       guión doble (<literal>--</literal>).
      </simpara>
      <simpara>
       Por ejemplo, un elemento <literal>longopts</literal> <literal>"opt"</literal>
       coincidirá con la opción <literal>--opt</literal>.
      </simpara>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>rest_index</parameter></term>
     <listitem>
      <simpara>
       Si el parámetro <parameter>rest_index</parameter> está presente, entonces el índice
       donde se detuvo el análisis de los argumentos será escrito en esta variable.
      </simpara>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
  <para>
   El parámetro <parameter>short_options</parameter> puede contener los siguientes elementos:
   <simplelist>
    <member>Caracteres individuales (no aceptan valor)</member>
    <member>Caracteres seguidos por un dos-puntos (el parámetro requiere un valor)</member>
    <member>Caracteres seguidos por dos dos-puntos (valor opcional)</member>
   </simplelist>
   Los valores opcionales son los primeros argumentos después de la cadena. Si
   un valor es requerido, no importa si el valor está seguido de un espacio o
   no. Ver la nota.
   <note>
    <simpara>
     Los valores opcionales no aceptan el espacio como separador.
    </simpara>
   </note>
  </para>
  <para>
   El array de valores <parameter>long_options</parameter> puede contener:
   <simplelist>
    <member>String (parámetro no acepta ningún valor)</member>
    <member>String seguido de un dos-puntos (parámetro requiere un valor)</member>
    <member>String seguido de dos dos-puntos (valor opcional)</member>
   </simplelist>
  </para>
  <note>
   <para>
    El formato de los parámetros <parameter>short_options</parameter> y
    <parameter>long_options</parameter> es idéntico; la única diferencia es
    que <parameter>long_options</parameter> toma un array en opción (donde cada elemento
    es una opción) mientras que <parameter>short_options</parameter> toma una cadena
    (donde cada carácter es una opción).
   </para>
  </note>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Esta función devuelve un array de opciones/argumentos, &return.falseforfailure;.
  </para>
  <note>
   <para>
    El análisis de las opciones se detendrá cuando se encuentre la primera
    opción incorrecta, y todo lo que siga será ignorado.
   </para>
  </note>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>7.1.0</entry>
       <entry>
        Se añadió el parámetro <parameter>rest_index</parameter>.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example xml:id="getopt.examples-1">
    <title>Ejemplo con <function>getopt</function>: los fundamentos</title>
    <programlisting role="php">
<![CDATA[
<?php
// Script example.php
$options = getopt("f:hp:");
var_dump($options);
?>
]]>
    </programlisting>
    <programlisting role="shell">
<![CDATA[
shell> php example.php -fvalue -h
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
array(2) {
  ["f"]=>
  string(5) "value"
  ["h"]=>
  bool(false)
}
]]>
    </screen>
   </example>
  </para>
  <para>
   <example xml:id="getopt.examples-2">
    <title>Segundo ejemplo con <function>getopt</function>: Introducción a las opciones largas</title>
    <programlisting role="php">
<![CDATA[
<?php
// Script example.php
$shortopts  = "";
$shortopts .= "f:";  // Valor requerido
$shortopts .= "v::"; // Valor opcional
$shortopts .= "abc"; // Estas opciones no aceptan valor

$longopts  = array(
    "required:",     // Valor requerido
    "optional::",    // Valor opcional
    "option",        // Ningún valor
    "opt",           // Ningún valor
);
$options = getopt($shortopts, $longopts);
var_dump($options);
?>
]]>
    </programlisting>
    <programlisting role="shell">
<![CDATA[
shell> php example.php -f "value for f" -v -a --required value --optional="optional value" --option
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
array(6) {
  ["f"]=>
  string(11) "value for f"
  ["v"]=>
  bool(false)
  ["a"]=>
  bool(false)
  ["required"]=>
  string(5) "value"
  ["optional"]=>
  string(14) "optional value"
  ["option"]=>
  bool(false)
}
]]>
    </screen>
   </example>
  </para>
  <para>
   <example xml:id="getopt.examples-3">
    <title>Tercer ejemplo con <function>getopt</function>: Pasar múltiples opciones</title>
    <programlisting role="php">
<![CDATA[
<?php
// Script example.php
$options = getopt("abc");
var_dump($options);
?>
]]>
    </programlisting>
    <programlisting role="shell">
<![CDATA[
shell> php example.php -aaac
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
array(2) {
  ["a"]=>
  array(3) {
    [0]=>
    bool(false)
    [1]=>
    bool(false)
    [2]=>
    bool(false)
  }
  ["c"]=>
  bool(false)
}
]]>
    </screen>
   </example>
  </para>
  <para>
   <example xml:id="getopt.examples-4">
    <title>Ejemplo de <function>getopt</function>: Utilizando <parameter>rest_index</parameter></title>
    <programlisting role="php">
<![CDATA[
<?php
// Script example.php
$rest_index = null;
$opts = getopt('a:b:', [], $rest_index);
$pos_args = array_slice($argv, $rest_index);
var_dump($pos_args);
]]>
    </programlisting>
    <programlisting role="shell">
<![CDATA[
shell> php example.php -a 1 -b 2 -- test
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
array(1) {
  [0]=>
  string(4) "test"
}
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><link linkend="reserved.variables.argv"><varname>$argv</varname></link></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
