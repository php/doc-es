<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 67ddbaff3cebd1defc9a4ff1588fb101c747a07b Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: no -->

<set xml:id="set.mysqlinfo" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Plugins y drivers MySQL</title>
 <titleabbrev>MySQL</titleabbrev>

 <info xml:id="mysqlinfo.info">
  <abstract>
   <para>
    PHP ofrece varios drivers y plugins MySQL para acceder
    y gestionar MySQL.
   </para>
   <para>
    Las diferencias y las funcionalidades de las extensiones MySQL
    se describen en el resumen de esta sección.
   </para>
   <para>
    Las extensiones listadas soportan el protocolo MySQL.
    Algunos ejemplos de servidores de bases de datos compatibles son
    <link xlink:href="&url.mariadb;">MariaDB Server</link>,
    <link xlink:href="&url.mysql;">MySQL Server</link>,
    <link xlink:href="&url.perconaserver;">Percona Server para MySQL</link>,
    y
    <link xlink:href="&url.tidb;">TiDB</link>.
   </para>
  </abstract>
 </info>

 <book xml:id="mysql">
  <title>Visión general de los drivers PHP MySQL</title>

  <preface xml:id="mysqlinfo.intro">
   <title>Introducción</title>
    <para>
     Existen varias APIs PHP para acceder a una base de datos MySQL.
     Los usuarios pueden elegir entre las extensiones
     <link linkend="book.mysqli">mysqli</link> o
     <link linkend="ref.pdo-mysql">PDO_MySQL</link>.
    </para>
    <para>
     Esta guía explica la <link linkend="mysqlinfo.terminology">terminología</link>
     utilizada para describir cada una de ellas, proporciona información
     sobre <link linkend="mysqlinfo.api.choosing">la elección de la API</link>
     a utilizar, así como información que ayuda a elegir la <link linkend="mysqlinfo.library.choosing">biblioteca
     MySQL a utilizar</link> con la API.
    </para>
  </preface>

  <chapter xml:id="mysqlinfo.terminology" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
   <title>Visión general de la terminología</title>
   <para>
    Esta sección proporciona una introducción a las opciones disponibles
    al desarrollar una aplicación PHP que debe interactuar con
    una base de datos MySQL.
   </para>

   <para>
    <emphasis role="bold">¿Qué es una API?</emphasis>
   </para>

   <para>
    Una interfaz de programación de aplicaciones, o API, define las clases,
    los métodos, las funciones y las variables que su aplicación
    necesita para realizar las tareas deseadas. En el caso de las aplicaciones
    PHP que necesitan comunicarse con bases de datos, las APIs
    necesarias suelen exponerse a través de extensiones PHP.
   </para>

   <para>
    Las APIs pueden ser procedimentales u orientadas a objetos. Con una API
    procedimental, se llaman funciones para realizar las tareas,
    con una API orientada a objetos, se instancian las clases, luego se
    llaman los métodos en los objetos resultantes. La segunda interfaz
    es generalmente preferida ya que es más moderna y permite
    organizar mejor el código fuente.
   </para>

   <para>
    Al escribir aplicaciones PHP que necesitan conectarse
    a un servidor MySQL, hay varias opciones de API disponibles.
    Este documento abordará lo que está disponible, y cómo elegir
    la mejor solución para su aplicación.
   </para>

   <para>
    <emphasis role="bold">¿Qué es un conector?</emphasis>
   </para>

   <para>
    En la documentación de MySQL, el término <emphasis>conector</emphasis>
    se refiere a la parte del programa que permite a su aplicación
    conectarse al servidor de base de datos MySQL. MySQL proporciona
    conectores para muchos lenguajes, incluyendo PHP.
   </para>

   <para>
    Si su aplicación PHP necesita comunicarse con un servidor
    de base de datos, debe escribir su código PHP para realizar
    tareas como conectarse al servidor de base de datos,
    consultar la base de datos y otras tareas relacionadas
    con la base de datos. El programa es requerido para proporcionar la API
    a utilizar por su aplicación PHP, pero también para gestionar
    la comunicación entre su aplicación y el servidor de base
    de datos, utilizando bibliotecas intermedias si es necesario. Este programa
    suele denominarse conector,
    ya que permite a su aplicación <emphasis>conectarse</emphasis>
    al servidor de base de datos.
   </para>

   <para>
    <emphasis role="bold">¿Qué es un driver?</emphasis>
   </para>

   <para>
    Un driver es una parte de programa cuyo objetivo es comunicarse
    con un tipo específico de servidor de base de datos. El driver
    también puede llamar a una biblioteca, como la biblioteca cliente MySQL o el driver nativo MySQL. Estas bibliotecas implementan
    el protocolo de bajo nivel utilizado para comunicarse con el servidor
    de base de datos MySQL.
   </para>

   <para>
    Por ejemplo, la capa de abstracción de base de datos
    <link linkend="mysqli.overview.pdo">PHP Data Objects (PDO)</link> puede
    utilizar uno de los drivers específicos de base de datos. Uno de estos drivers
    disponibles es el driver PDO MYSQL, que proporciona una interfaz
    con el servidor MySQL.
   </para>

   <para>
    A veces, las personas utilizan los términos conector y driver
    de manera intercambiable, lo que puede causar confusión. En la documentación
    de MySQL, el término <quote>driver</quote> se reserva al programa que
    proporciona la parte específica de la base de datos de un conector.
   </para>

   <para>
    <emphasis role="bold">¿Qué es una extensión?</emphasis>
   </para>

   <para>
    En la documentación de PHP, se encuentra otro término -
    <emphasis>extensión</emphasis>. El código PHP está compuesto
    por un núcleo, con extensiones opcionales que permiten
    extender las funcionalidades del núcleo. Las extensiones PHP relacionadas
    con bases de datos, como la extensión <literal>mysqli</literal>
    se implementan utilizando el framework de extensiones PHP.
   </para>

   <para>
    Típicamente, una extensión expone una API al programador PHP, permitiéndole
    algunas facilidades durante la programación. Sin embargo,
    algunas extensiones que utilizan el framework de extensión PHP
    no exponen ninguna API al programador PHP.
   </para>

   <para>
    La extensión driver PDO MySQL, por ejemplo, no expone ninguna API
    al programador PHP, pero proporciona una interfaz a la capa PDO.
   </para>

   <para>
    Los términos API y extensión no deben considerarse como significando
    lo mismo, ya que una extensión no expone necesariamente una API al
    programador.
   </para>
  </chapter>

  <chapter xml:id="mysqlinfo.api.choosing" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
   <title>Elegir una API</title>
   <para>
    PHP ofrece diferentes APIs para conectarse a MySQL. A continuación, se
    encuentran las APIs proporcionadas por las extensiones mysqli y PDO.
    Cada ejemplo de código crea una conexión a un servidor MySQL que se ejecuta en
    el dominio "example.com", utilizando el nombre de usuario "user", la contraseña "password". Y se ejecuta una consulta para saludar al usuario.
   </para>
   <para>
    <example>
     <title>Comparación de las APIs MySQL</title>
     <programlisting role="php">
<![CDATA[
<?php
// mysqli
$mysqli = new mysqli("example.com", "user", "password", "database");
$result = $mysqli->query("SELECT '¡Hola, querido usuario de MySQL!' AS _message FROM DUAL");
$row = $result->fetch_assoc();
echo htmlentities($row['_message']);

// PDO
$pdo = new PDO('mysql:host=example.com;dbname=database', 'user', 'password');
$statement = $pdo->query("SELECT '¡Hola, querido usuario de MySQL!' AS _message FROM DUAL");
$row = $statement->fetch(PDO::FETCH_ASSOC);
echo htmlentities($row['_message']);
]]>
     </programlisting>
    </example>
   </para>
   <para>
    <emphasis role="bold">Comparación de funcionalidades</emphasis>
   </para>
   <para>
    El rendimiento global de las dos extensiones puede considerarse idéntico.
    Sin embargo, el rendimiento de la extensión constituye solo una fracción
    del tiempo total de ejecución de una solicitud web PHP.
    A menudo, el impacto es inferior al 0.1%.
   </para>
   <informaltable xml:id="mysqlinfo.api.choosing.changelog">
    <tgroup cols="3">
     <thead>
      <row>
       <entry></entry>
       <entry>ext/mysqli</entry>
       <entry>PDO_MySQL</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>Introducida en la versión de PHP</entry>
       <entry>5.0</entry>
       <entry>5.1</entry>
      </row>
      <row>
       <entry>Incluida con PHP 7.x y 8.x</entry>
       <entry>Sí</entry>
       <entry>Sí</entry>
      </row>
      <row>
       <entry>Estado de desarrollo</entry>
       <entry>Activo</entry>
       <entry>Activo</entry>
      </row>
      <row>
       <entry>Ciclo de vida</entry>
       <entry>Activo</entry>
       <entry>Activo</entry>
      </row>
      <row>
       <entry>Recomendado para nuevos proyectos</entry>
       <entry>Sí</entry>
       <entry>Sí</entry>
      </row>
      <row>
       <entry>Interfaz orientada a objetos</entry>
       <entry>Sí</entry>
       <entry>Sí</entry>
      </row>
      <row>
       <entry>Interfaz procedimental</entry>
       <entry>Sí</entry>
       <entry>No</entry>
      </row>
      <row>
       <entry>La API soporta consultas no bloqueantes, asíncronas con mysqlnd</entry>
       <entry>Sí</entry>
       <entry>No</entry>
      </row>
      <row>
       <entry>Conexiones persistentes disponibles</entry>
       <entry>Sí</entry>
       <entry>Sí</entry>
      </row>
      <row>
       <entry>La API soporta juegos de caracteres</entry>
       <entry>Sí</entry>
       <entry>Sí</entry>
      </row>
      <row>
       <entry>La API soporta consultas preparadas del lado del servidor</entry>
       <entry>Sí</entry>
       <entry>Sí</entry>
      </row>
      <row>
       <entry>La API soporta consultas preparadas del lado del cliente</entry>
       <entry>No</entry>
       <entry>Sí</entry>
      </row>
      <row>
       <entry>La API soporta procedimientos almacenados</entry>
       <entry>Sí</entry>
       <entry>Sí</entry>
      </row>
      <row>
       <entry>La API soporta consultas múltiples</entry>
       <entry>Sí</entry>
       <entry>La mayoría</entry>
      </row>
      <row>
       <entry>La API soporta transacciones</entry>
       <entry>Sí</entry>
       <entry>Sí</entry>
      </row>
      <row>
       <entry>Las transacciones pueden controlarse con SQL</entry>
       <entry>Sí</entry>
       <entry>Sí</entry>
      </row>
      <row>
       <entry>Soporta todas las funcionalidades de MySQL 5.1+</entry>
       <entry>Sí</entry>
       <entry>La mayoría</entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </chapter>

  <chapter xml:id="mysqlinfo.library.choosing" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
   <title>Elegir una biblioteca</title>
   <para>
    Las extensiones PHP mysqli y PDO_MySQL son envolventes ligeras de una
    biblioteca cliente C. Las extensiones pueden utilizar la biblioteca
    <link linkend="book.mysqlnd">mysqlnd</link>, o la biblioteca <literal>libmysqlclient</literal>.
    La elección de la biblioteca se realiza en el momento de la compilación.
   </para>
   <para>
    La biblioteca mysqlnd forma parte de la distribución de PHP.
    Ofrece funcionalidades como conexiones perezosas,
    caché de consultas, que no están disponibles con libmysqlclient,
    por lo que se recomienda utilizar la biblioteca interna mysqlnd.
    Ver la <link linkend="book.mysqlnd">documentación de mysqlnd</link>
    para obtener más información, así como una lista de las funcionalidades que ofrece.
   </para>
   <para>
    <example>
     <title>Comando de configuración para el uso de mysqlnd o libmysqlclient</title>
     <programlisting role="shell">
<![CDATA[
// Recomendado, compilación con mysqlnd
$ ./configure --with-mysqli=mysqlnd --with-pdo-mysql=mysqlnd

// Alternativamente recomendado, compilación con mysqlnd
$ ./configure --with-mysqli --with-pdo-mysql

// No recomendado, compilación con libmysqlclient
$ ./configure --with-mysqli=/path/to/mysql_config --with-pdo-mysql=/path/to/mysql_config
]]>
     </programlisting>
    </example>
   </para>
   <para>
    <example>
     <title>Comparación de las instrucciones preparadas</title>
     <programlisting role="php">
<![CDATA[
<?php
// mysqli
$mysqli = new mysqli("example.com", "usuario", "contraseña", "base de datos");
$statement = $mysqli->prepare("SELECT District FROM City WHERE Name=?");
$statement->execute(["Amersfoort"]);
$result = $statement->get_result();
$row = $result->fetch_assoc();
echo htmlentities($row['District']);

// PDO
$pdo = new PDO('mysql:host=example.com;dbname=base de datos', 'usuario', 'contraseña');
$statement = $pdo->prepare("SELECT District FROM City WHERE Name=?");
$statement->execute(["Amersfoort"]);
$row = $statement->fetch(PDO::FETCH_ASSOC);
echo htmlentities($row['District']);
]]>
     </programlisting>
    </example>
   </para>
   <para>
    <emphasis role="bold">Comparación de funcionalidades de las bibliotecas</emphasis>
   </para>
   <para>
    Se recomienda utilizar la biblioteca <link linkend="book.mysqlnd">mysqlnd</link>
    en lugar de la biblioteca cliente servidor MySQL (libmysqlclient). Ambas bibliotecas
    son soportadas y mejoradas continuamente.
   </para>
   <informaltable xml:id="mysqlinfo.library.choosing.changelog">
    <tgroup cols="3">
     <thead>
      <row>
       <entry></entry>
       <entry>Driver nativo MySQL (<link linkend="book.mysqlnd">mysqlnd</link>)</entry>
       <entry>Biblioteca cliente servidor MySQL (<literal>libmysqlclient</literal>)</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>Forma parte de la distribución de PHP</entry>
       <entry>Sí</entry>
       <entry>No</entry>
      </row>
      <row>
       <entry>Introducido en versión de PHP</entry>
       <entry>5.3.0</entry>
       <entry>N/A</entry>
      </row>
      <row>
       <entry>Licencia</entry>
       <entry>Licencia PHP 3.01</entry>
       <entry>Doble licencia</entry>
      </row>
      <row>
       <entry>Estado de desarrollo</entry>
       <entry>Activo</entry>
       <entry>Activo</entry>
      </row>
      <row>
       <entry>Ciclo de vida</entry>
       <entry>Sin fin anunciado</entry>
       <entry>Sin fin anunciado</entry>
      </row>
      <row>
       <entry>Compilado por defecto (para todas las extensiones MySQL)</entry>
       <entry>Sí</entry>
       <entry>No</entry>
      </row>
      <row>
       <entry>Soporte del protocolo de compresión</entry>
       <entry>Sí</entry>
       <entry>Sí</entry>
      </row>
      <row>
       <entry>Soporte de SSL</entry>
       <entry>Sí</entry>
       <entry>Sí</entry>
      </row>
      <row>
       <entry>Soporte de pipes nombrados</entry>
       <entry>Sí</entry>
       <entry>Sí</entry>
      </row>
      <row>
       <entry>Consultas no bloqueantes, asíncronas</entry>
       <entry>Sí</entry>
       <entry>No</entry>
      </row>
      <row>
       <entry>Estadísticas de rendimiento</entry>
       <entry>Sí</entry>
       <entry>No</entry>
      </row>
      <row>
       <entry>LOAD LOCAL INFILE respeta la <link linkend="ini.open-basedir">directiva open_basedir</link></entry>
       <entry>Sí</entry>
       <entry>No</entry>
      </row>
      <row>
       <entry>Uso del sistema de gestión de memoria nativo de PHP
        (es decir, sigue los límites de memoria de PHP)</entry>
       <entry>Sí</entry>
       <entry>No</entry>
      </row>
      <row>
       <entry>Devuelve las columnas numéricas en forma de double (COM_QUERY)</entry>
       <entry>Sí</entry>
       <entry>No</entry>
      </row>
      <row>
       <entry>Devuelve las columnas numéricas en forma de string (COM_QUERY)</entry>
       <entry>Sí</entry>
       <entry>Sí</entry>
      </row>
      <row>
       <entry>API del plugin</entry>
       <entry>Sí</entry>
       <entry>Limitada</entry>
      </row>
      <row>
       <entry>Reconexión automática</entry>
       <entry>No</entry>
       <entry>Opcional</entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </chapter>

  &reference.mysqlinfo.concepts;

 </book>

 &reference.mysqli.book;
 &reference.mysql-xdevapi.book;
 &reference.mysql.book;
 &reference.mysqlnd.book;

</set>
