<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 7100979e254970cef72c6f91b32352e7c7898635 Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: no -->

<refentry xml:id="function.json-last-error" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>json_last_error</refname>
  <refpurpose>Devuelve el último error JSON</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>int</type><methodname>json_last_error</methodname>
   <void />
  </methodsynopsis>
  <para>
   Devuelve el último error, si ha ocurrido, durante la última
   operación de validación/codificación/decodificación JSON, que no haya especificado
   <constant>JSON_THROW_ON_ERROR</constant>.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  &no.function.parameters;
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Devuelve una de las siguientes constantes:
  </para>
  <table>
   <title>Códigos de error JSON</title>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>Constante</entry>
      <entry>Significado</entry>
      <entry>Disponibilidad</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry><constant>JSON_ERROR_NONE</constant></entry>
      <entry>No ha ocurrido ningún error</entry>
      <entry></entry>
     </row>
     <row>
      <entry><constant>JSON_ERROR_DEPTH</constant></entry>
      <entry>Se ha alcanzado la profundidad máxima de la pila</entry>
      <entry></entry>
     </row>
     <row>
      <entry><constant>JSON_ERROR_STATE_MISMATCH</constant></entry>
      <entry>JSON inválido o mal formado</entry>
      <entry></entry>
     </row>
     <row>
      <entry><constant>JSON_ERROR_CTRL_CHAR</constant></entry>
      <entry>Error durante el control de caracteres; probablemente un codificación incorrecta</entry>
      <entry></entry>
     </row>
     <row>
      <entry><constant>JSON_ERROR_SYNTAX</constant></entry>
      <entry>Error de sintaxis</entry>
      <entry></entry>
     </row>
     <row>
      <entry><constant>JSON_ERROR_UTF8</constant></entry>
      <entry>Caracteres UTF-8 malformados, posiblemente mal codificados</entry>
      <entry></entry>
     </row>
     <row>
      <entry><constant>JSON_ERROR_RECURSION</constant></entry>
      <entry>Una o más referencias recursivas están presentes
       en el valor a codificar</entry>
      <entry></entry>
     </row>
     <row>
      <entry><constant>JSON_ERROR_INF_OR_NAN</constant></entry>
      <entry>
       Una o más valores
       <link linkend="language.types.float.nan"><constant>NAN</constant></link>
       o <link linkend="function.is-infinite"><constant>INF</constant></link>
       están presentes en el valor a codificar.
      </entry>
      <entry></entry>
     </row>
     <row>
      <entry><constant>JSON_ERROR_UNSUPPORTED_TYPE</constant></entry>
      <entry>Se ha proporcionado un valor de un tipo que no puede ser codificado</entry>
      <entry></entry>
     </row>
     <row>
      <entry><constant>JSON_ERROR_INVALID_PROPERTY_NAME</constant></entry>
      <entry>Se ha proporcionado un nombre de propiedad que no puede ser codificado</entry>
      <entry></entry>
     </row>
     <row>
      <entry><constant>JSON_ERROR_UTF16</constant></entry>
      <entry>Caracteres UTF-16 mal formados, probablemente mal codificados</entry>
      <entry></entry>
     </row>
    </tbody>
   </tgroup>
  </table>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Ejemplo con <function>json_last_error</function></title>
    <programlisting role="php">
<![CDATA[
<?php
// Una cadena JSON válida
$json[] = '{"Organisation": "Équipe de Documentation PHP"}';

// Una cadena json inválida que va a generar un error de sintaxis,
// aquí, uso de ' en lugar de "
$json[] = "{'Organisation': 'Équipe de Documentation PHP'}";

foreach ($json as $string) {
    echo 'Decodificación: ' . $string;
    json_decode($string);

    switch (json_last_error()) {
        case JSON_ERROR_NONE:
            echo ' - Sin errores';
        break;
        case JSON_ERROR_DEPTH:
            echo ' - Profundidad máxima alcanzada';
        break;
        case JSON_ERROR_STATE_MISMATCH:
            echo ' - Inadecuación de modos o underflow';
        break;
        case JSON_ERROR_CTRL_CHAR:
            echo ' - Error durante el control de caracteres';
        break;
        case JSON_ERROR_SYNTAX:
            echo ' - Error de sintaxis; JSON malformado';
        break;
        case JSON_ERROR_UTF8:
            echo ' - Caracteres UTF-8 malformados, probablemente un error de codificación';
        break;
        default:
            echo ' - Error desconocido';
        break;
    }

    echo PHP_EOL;
}
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Decodificación: {"Organisation": "Équipe de Documentation PHP"} - Sin errores
Decodificación: {'Organisation': 'Équipe de Documentation PHP'} - Error de sintaxis; JSON malformado
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title><function>json_last_error</function> con <function>json_encode</function></title>
    <programlisting role="php">
<![CDATA[
<?php
// Una secuencia UTF8 inválida
$text = "\xB1\x31";

$json  = json_encode($text);
$error = json_last_error();

var_dump($json, $error === JSON_ERROR_UTF8);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
string(4) "null"
bool(true)
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title><function>json_last_error</function> y <constant>JSON_THROW_ON_ERROR</constant></title>
    <programlisting role="php">
<![CDATA[
<?php
// Una secuencia UTF8 inválida que causa JSON_ERROR_UTF8
json_encode("\xB1\x31");

// Esto no produce un error JSON
json_encode('okay', JSON_THROW_ON_ERROR);

// El estado de error global no ha sido modificado por el json_encode() anterior
var_dump(json_last_error() === JSON_ERROR_UTF8);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
bool(true)
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>json_last_error_msg</function></member>
    <member><function>json_decode</function></member>
    <member><function>json_encode</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
