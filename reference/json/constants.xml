<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 40e4bf862f9c23ffe871a68baebf31f753d4293b Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: no -->

<appendix xml:id="json.constants" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 &reftitle.constants;
 &extension.constants;
 <para>
  Las constantes siguientes indican el tipo de error devuelto por
  <function>json_last_error</function> o almacenado como <varname>code</varname>
  de una <classname>JsonException</classname>.
 </para>
 <variablelist>
  <varlistentry xml:id="constant.json-error-none">
   <term>
    <constant>JSON_ERROR_NONE</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     No se ha producido ningún error.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.json-error-depth">
   <term>
    <constant>JSON_ERROR_DEPTH</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Se ha alcanzado la profundidad máxima de la pila.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.json-error-state-mismatch">
   <term>
    <constant>JSON_ERROR_STATE_MISMATCH</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Ocurre con un underflow o con una inadaptación de los modos.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.json-error-ctrl-char">
   <term>
    <constant>JSON_ERROR_CTRL_CHAR</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Error al controlar los caracteres, probablemente codificados incorrectamente.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.json-error-syntax">
   <term>
    <constant>JSON_ERROR_SYNTAX</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Error de sintaxis.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.json-error-utf8">
   <term>
    <constant>JSON_ERROR_UTF8</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Caracteres UTF-8 mal formados, probablemente codificados incorrectamente.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.json-error-recursion">
   <term>
    <constant>JSON_ERROR_RECURSION</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     El objeto o el array pasado a la función <function>json_encode</function>
     incluye referencias recursivas y no pueden ser codificadas.
     Si se ha proporcionado la opción <constant>JSON_PARTIAL_OUTPUT_ON_ERROR</constant>,
     &null; será codificado en lugar de la referencia recursiva.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.json-error-inf-or-nan">
   <term>
    <constant>JSON_ERROR_INF_OR_NAN</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     El valor pasado a la función <function>json_encode</function> incluye
     <link linkend="language.types.float.nan"><constant>NAN</constant></link>,
     o <link linkend="function.is-infinite"><constant>INF</constant></link>.
     Si se ha proporcionado la opción <constant>JSON_PARTIAL_OUTPUT_ON_ERROR</constant>,
     <literal>0</literal> será codificado en lugar de estos números especiales.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.json-error-unsupported-type">
   <term>
    <constant>JSON_ERROR_UNSUPPORTED_TYPE</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Se ha proporcionado un valor de un tipo no soportado a la función
     <function>json_encode</function>, como por ejemplo una &resource;.
     Si se ha proporcionado la opción <constant>JSON_PARTIAL_OUTPUT_ON_ERROR</constant>,
     &null; será codificado en lugar del valor no soportado.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.json-error-invalid-property-name">
   <term>
    <constant>JSON_ERROR_INVALID_PROPERTY_NAME</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Una clave que comienza con el carácter \u0000 estaba presente en la
     cadena de caracteres pasada a <function>json_decode</function>
     durante la decodificación de un objeto JSON en un objeto PHP.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.json-error-utf16">
   <term>
    <constant>JSON_ERROR_UTF16</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Sustituto UTF-16 simple no apareado en el escape unicode contenido
     en la cadena de caracteres JSON pasada a <function>json_decode</function>.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.json-error-non-backed-enum">
   <term>
    <constant>JSON_ERROR_NON_BACKED_ENUM</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     El valor pasado a <function>json_encode</function>
     incluye una enumeración no soportada que no puede ser serializada.
     Disponible a partir de PHP 8.1.0.
    </simpara>
   </listitem>
  </varlistentry>
 </variablelist>

 <para>
  Las constantes siguientes pueden ser combinadas para formar las opciones de
  <function>json_decode</function>.
 </para>
 <variablelist>
  <varlistentry xml:id="constant.json-bigint-as-string">
   <term>
    <constant>JSON_BIGINT_AS_STRING</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Decodifica los enteros grandes como una cadena de caracteres.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.json-object-as-array">
   <term>
    <constant>JSON_OBJECT_AS_ARRAY</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Decodifica un objeto JSON en array PHP. Esta opción puede ser añadida
     automáticamente llamando a <function>json_decode</function> con el
     segundo argumento igual a &true;.
    </simpara>
   </listitem>
  </varlistentry>
 </variablelist>

 <para>
  Las constantes siguientes pueden ser combinadas para formar las opciones de
  <function>json_encode</function>.
 </para>
 <variablelist>
  <varlistentry xml:id="constant.json-hex-tag">
   <term>
    <constant>JSON_HEX_TAG</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Todos los caracteres &lt; y &gt; son convertidos en secuencias
     \u003C y \u003E.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.json-hex-amp">
   <term>
    <constant>JSON_HEX_AMP</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Todos los caracteres &amp; son convertidos en \u0026.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.json-hex-apos">
   <term>
    <constant>JSON_HEX_APOS</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Todos los apóstrofes ' son convertidos en \u0027.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.json-hex-quot">
   <term>
    <constant>JSON_HEX_QUOT</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Todas las comillas dobles " son convertidas en \u0022.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.json-force-object">
   <term>
    <constant>JSON_FORCE_OBJECT</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Produce un objeto en lugar de un array, cuando se utiliza un array
     no asociativo. Esto es especialmente útil cuando el destinatario del resultado espera un objeto,
     y el array está vacío.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.json-numeric-check">
   <term>
    <constant>JSON_NUMERIC_CHECK</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Codifica las cadenas numéricas como números.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.json-pretty-print">
   <term>
    <constant>JSON_PRETTY_PRINT</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Utiliza espacios en los datos devueltos para
     formatearlos.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.json-unescaped-slashes">
   <term>
    <constant>JSON_UNESCAPED_SLASHES</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     No escapar los caracteres <literal>/</literal>.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.json-unescaped-unicode">
   <term>
    <constant>JSON_UNESCAPED_UNICODE</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Codifica los caracteres multioctetos Unicode literalmente (el comportamiento
     por defecto es escaparles con \uXXXX).
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.json-partial-output-on-error">
   <term>
    <constant>JSON_PARTIAL_OUTPUT_ON_ERROR</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Sustituye ciertos valores no codificables en lugar de fallar.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.json-preserve-zero-fraction">
   <term>
    <constant>JSON_PRESERVE_ZERO_FRACTION</constant>
    (<type>int</type>)
  </term>
  <listitem>
   <simpara>
    Asegura que los valores de tipo &float; siempre sean codificados como
    valor flotante.
   </simpara>
  </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.json-unescaped-line-terminators">
   <term>
    <constant>JSON_UNESCAPED_LINE_TERMINATORS</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Los terminadores de línea son conservados sin escapar cuando
     <constant>JSON_UNESCAPED_UNICODE</constant> es proporcionado. Utiliza el mismo
     comportamiento como si fuera antes de PHP 7.1 sin esta constante.
     Disponible a partir de PHP 7.1.0.
    </simpara>
   </listitem>
  </varlistentry>
 </variablelist>

 <para>
  Las constantes siguientes pueden ser combinadas para formar las opciones de
  <function>json_decode</function> y <function>json_encode</function>.
 </para>
 <variablelist>
  <varlistentry xml:id="constant.json-invalid-utf8-ignore">
   <term>
    <constant>JSON_INVALID_UTF8_IGNORE</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Ignora los caracteres UTF-8 inválidos.
     Disponible a partir de PHP 7.2.0.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.json-invalid-utf8-substitute">
   <term>
    <constant>JSON_INVALID_UTF8_SUBSTITUTE</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Convierte los caracteres UTF-8 inválidos en \0xfffd
     (Carácter Unicode 'REPLACEMENT CHARACTER').
     Disponible a partir de PHP 7.2.0.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.json-throw-on-error">
   <term>
    <constant>JSON_THROW_ON_ERROR</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Emite una <classname>JsonException</classname> si ocurre un error
     en lugar de establecer el estado de error global que es recuperado mediante
     <function>json_last_error</function> y <function>json_last_error_msg</function>.
     <constant>JSON_PARTIAL_OUTPUT_ON_ERROR</constant> tiene prioridad sobre
     <constant>JSON_THROW_ON_ERROR</constant>.
     Disponible a partir de PHP 7.3.0.
    </simpara>
   </listitem>
  </varlistentry>
 </variablelist>

</appendix>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
