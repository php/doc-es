<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 0904e1f4db189dfd2873a126bf72fe34fa9c50f8 Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: no -->

<book xml:id="book.hash" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <?phpdoc extension-membership="core" ?>
 <title>HASH</title>
 <titleabbrev>Hash</titleabbrev>

 <!-- {{{ preface -->
 <preface xml:id="intro.hash">
  &reftitle.intro;
  <para>
   Esta extensión proporciona funciones que pueden ser utilizadas para el tratamiento directo o
   incremental de mensajes de longitud arbitraria utilizando una variedad de algoritmos de hachado,
   incluyendo la generación de valores <acronym>HMAC</acronym> y derivaciones de claves
   incluyendo <acronym>HKDF</acronym> y <acronym>PBKDF2</acronym>.
  </para>
  <para>
   Existen grosso modo tres categorías de algoritmos de hachado, y una lista completa de
   los algoritmos puede ser encontrada en la documentación para <function>hash_algos</function>.

   <itemizedlist>
    <listitem>
     <simpara>
      Algoritmos de suma de control (tales como <literal>"crc32b"</literal> o <literal>"adler32"</literal>) :
      Estos son utilizados para calcular sumas de control, útiles en situaciones tales como
      la detección de errores de transmisión. Son frecuentemente muy rápidos. Estos
      algoritmos generan frecuentemente valores fácilmente "adivinables" o pueden ser manipulados
      para crear colisiones, por lo que son totalmente inadecuados para un uso criptográfico.
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      Algoritmos no criptográficos (como la familia xxHash) :
      Estos son frecuentemente utilizados para calcular valores de hachado para tablas de hachado,
      ya que están diseñados para producir una buena distribución sobre entradas de string arbitrarias.
      Son también generalmente rápidos, pero también inadecuados para un uso criptográfico.
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      Algoritmos criptográficos (como la familia SHA-2) :
      Estos están diseñados para producir valores de hachado representativos de sus
      entradas pero que no puedan ser adivinados ni sujetos a colisiones. El rendimiento es a menudo
      una preocupación secundaria, pero el hardware moderno soporta frecuentemente un manejo especial
      para estos algoritmos que PHP intenta utilizar cuando está disponible.
     </simpara>
     <simpara>
      El Centro de Recursos para la Seguridad Informática del <acronym>NIST</acronym> tiene
      <link xlink:href="&url.hash.nist-hash-functions;">una explicación de los algoritmos
      actualmente aprobados por los Estándares Federales de Procesamiento de Información de los Estados Unidos</link>.
     </simpara>
     <caution>
      <para>
       Algunos de los primeros algoritmos criptográficos, tales como <literal>"md4"</literal>,
       <literal>"md5"</literal>, y <literal>"sha1"</literal>, se han demostrado
       ser sujetos a ataques por colisión y generalmente se recomienda no utilizarlos más
       para aplicaciones criptográficas.
      </para>
     </caution>
    </listitem>
   </itemizedlist>
  </para>

  <para>
   Ver también la <link linkend="faq.passwords">FAQ sobre el hachado seguro de contraseñas</link>
   para información sobre las mejores prácticas de utilización de las funciones de hachado en la gestión
   de contraseñas.
  </para>

 </preface>
 <!-- }}} -->

 &reference.hash.setup;
 &reference.hash.constants;
 &reference.hash.hashcontext;
 &reference.hash.reference;

</book>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
