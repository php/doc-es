<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 539a9823a805ac29cab7fa4baf3ae3a28116a2f5 Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: no -->
<refentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>hash_pbkdf2</refname>
  <refpurpose>Genera una clave PBKDF2 derivada de la contraseña proporcionada</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>string</type><methodname>hash_pbkdf2</methodname>
   <methodparam><type>string</type><parameter>algo</parameter></methodparam>
   <methodparam><modifier role="attribute">#[\SensitiveParameter]</modifier><type>string</type><parameter>password</parameter></methodparam>
   <methodparam><type>string</type><parameter>salt</parameter></methodparam>
   <methodparam><type>int</type><parameter>iterations</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>length</parameter><initializer>0</initializer></methodparam>
   <methodparam choice="opt"><type>bool</type><parameter>binary</parameter><initializer>&false;</initializer></methodparam>
   <methodparam choice="opt"><type>array</type><parameter>options</parameter><initializer>[]</initializer></methodparam>
  </methodsynopsis>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>algo</parameter></term>
     <listitem>
      <para>
       Nombre del algoritmo de hash seleccionado (por ejemplo: <literal>"sha256"</literal>).
       Para una lista de los algoritmos soportados ver <function>hash_hmac_algos</function>.
       <note>
        <para>
         Las funciones de hash no criptográficas no están permitidas.
        </para>
       </note>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>password</parameter></term>
     <listitem>
      <para>
       La contraseña a utilizar para la derivación.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>salt</parameter></term>
     <listitem>
      <para>
       El salt a utilizar para la derivación. Este valor debe
       ser generado aleatoriamente.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>iterations</parameter></term>
     <listitem>
      <para>
       El número de iteraciones internas para efectuar la
       derivación.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>length</parameter></term>
     <listitem>
      <para>
       La longitud de la cadena de salida. Si el parámetro
       <parameter>binary</parameter> vale &true;, este parámetro
       corresponderá a la longitud, en bytes, de la clave derivada; si
       el parámetro <parameter>binary</parameter> vale &false;,
       corresponderá al doble de la longitud, en bytes, de la clave
       derivada (ya que cada byte de la clave es devuelto sobre
       dos hexits).
      </para>
      <para>
       Si <literal>0</literal> es pasado, la salida completa del algoritmo
       elegido será utilizada.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>binary</parameter></term>
     <listitem>
      <para>
       Cuando está definido a &true;, la función mostrará los datos
       binarios brutos. Si vale &false;, la visualización se hará
       en minúsculas.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>options</parameter></term>
     <listitem>
      <para>
       Un array de opciones para los diferentes algoritmos de hash.
       Actualmente, solo la clave <literal>"seed"</literal> es
       soportada por las variantes MurmurHash.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues"><!-- {{{ -->
  &reftitle.returnvalues;
  <para>
   Devuelve una cadena que contiene la clave derivada en minúsculas,
   a menos que el parámetro <parameter>binary</parameter> esté
   posicionado a &true; en cuyo caso, la representación binaria bruta
   de la clave derivada será devuelta.
  </para>
 </refsect1><!-- }}} -->

 <refsect1 role="errors"><!-- {{{ -->
  &reftitle.errors;
  <para>
   Una excepción <classname>ValueError</classname> si
   el algoritmo no es conocido, si el parámetro <parameter>iterations</parameter>
   es inferior o igual a <literal>0</literal>, si la longitud
   <parameter>length</parameter> es inferior o igual a <literal>0</literal>
   o si el <parameter>salt</parameter> es demasiado largo
   (mayor que <constant>INT_MAX</constant><literal> - 4</literal>).
  </para>
 </refsect1><!-- }}} -->

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>7.2.0</entry>
       <entry>
        El uso de funciones de hash no criptográficas (adler32,
        crc32, crc32b, fnv132, fnv1a32, fnv164, fnv1a64, joaat) ha sido desactivado.
       </entry>
      </row>
      <row>
      <entry>8.0.0</entry>
       <entry>
        Levanta una excepción <classname>ValueError</classname> ahora en
        caso de error.
        Anteriormente, &false; era devuelto y un mensaje
        <constant>E_WARNING</constant> era emitido.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Ejemplo con <function>hash_pbkdf2</function></title>
    <programlisting role="php">
<![CDATA[
<?php
$password = "password";
$iterations = 600000;

// Genera un salt criptográficamente seguro aleatorio usando la función random_bytes(),
$salt = random_bytes(16);

$hash = hash_pbkdf2("sha256", $password, $salt, $iterations, 20);
var_dump($hash);

// Para binario bruto, $length debe ser dividido por dos para resultados equivalentes
$hash = hash_pbkdf2("sha256", $password, $salt, $iterations, 10, true);
var_dump(bin2hex($hash));
?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
string(20) "120fb6cffcf8b32c43e7"
string(20) "120fb6cffcf8b32c43e7"
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <caution>
   <para>
    El método PBKDF2 puede ser utilizado para hashear contraseñas
    para el almacenamiento. Sin embargo, debe tenerse en cuenta que
    la función <function>password_hash</function> o la función
    <function>crypt</function> con la constante <constant>CRYPT_BLOWFISH</constant>
    es mejor para este uso.
   </para>
  </caution>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>password_hash</function></member>
    <member><function>hash_hkdf</function></member>
    <member><function>sodium_crypto_pwhash</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
 Local variables:
 mode: sgml
 sgml-omittag:t
 sgml-shorttag:t
 sgml-minimize-attributes:nil
 sgml-always-quote-attributes:t
 sgml-indent-step:1
 sgml-indent-data:t
 indent-tabs-mode:nil
 sgml-parent-document:nil
 sgml-default-dtd-file:"~/.phpdoc/manual.ced"
 sgml-exposed-tags:nil
 sgml-local-catalogs:nil
 sgml-local-ecat-files:nil
 End:
 vim600: syn=xml fen fdm=syntax fdl=2 si
 vim: et tw=78 syn=sgml
 vi: ts=1 sw=1
 -->
