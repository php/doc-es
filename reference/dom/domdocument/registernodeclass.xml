<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 0e2dfef689e3b40b8a826a0f64ba741863ee8c2a Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: no -->
<refentry xml:id="domdocument.registernodeclass" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>DOMDocument::registerNodeClass</refname>
  <refpurpose>Registra la clase extendida utilizada para crear un tipo de nodo base</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis role="DOMDocument">
   <modifier>public</modifier> <type>true</type><methodname>DOMDocument::registerNodeClass</methodname>
   <methodparam><type>string</type><parameter>baseClass</parameter></methodparam>
   <methodparam><type class="union"><type>string</type><type>null</type></type><parameter>extendedClass</parameter></methodparam>
  </methodsynopsis>

  <para>
   Este método permite registrar su propia clase DOM extendida para ser utilizada
   posteriormente en la extensión DOM de PHP.
  </para>
  <para>
   Este método no forma parte del estándar DOM.
  </para>
  <caution>
   <simpara>
    Los constructores de los objetos de las clases de nodos registrados no son llamados.
   </simpara>
  </caution>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>baseClass</parameter></term>
     <listitem>
      <para>
       La clase DOM que se desea extender. Puede encontrarse una lista
       de estas clases en la <link linkend="book.dom">introducción del capítulo</link>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>extendedClass</parameter></term>
     <listitem>
      <para>
       El nombre de su clase extendida. Si se proporciona el valor &null;, todas
       las clases registradas previamente que extienden
       <parameter>baseClass</parameter> serán eliminadas.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.true.always;
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <informaltable>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>&Version;</entry>
      <entry>&Description;</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>8.4.0</entry>
      <entry>
       <methodname>DOMDocument::registerNodeClass</methodname>
       ahora tiene un tipo de retorno provisional de tipo <type>true</type>.
      </entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Añadir un nuevo método a DOMElement</title>
    <programlisting role="php">
<![CDATA[
<?php

class myElement extends DOMElement {
   function appendElement($name) {
      return $this->appendChild(new myElement($name));
   }
}

class myDocument extends DOMDocument {
   function setRoot($name) {
      return $this->appendChild(new myElement($name));
   }
}

$doc = new myDocument();
$doc->registerNodeClass('DOMElement', 'myElement');

// A partir de aquí, la adición de un elemento a otro se realiza en una sola llamada !
$root = $doc->setRoot('root');
$child = $root->appendElement('child');
$child->setAttribute('foo', 'bar');

echo $doc->saveXML();

?>
]]>
    </programlisting>
    &example.outputs;
    <screen role="xml">
<![CDATA[
<?xml version="1.0"?>
<root><child foo="bar"/></root>
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title>Recuperación de elementos en forma de clase personalizada</title>
    <programlisting role="php">
<![CDATA[
<?php
class myElement extends DOMElement {
    public function __toString() {
        return $this->nodeValue;
    }
}

$doc = new DOMDocument;
$doc->loadXML("<root><element><child>Texto en un hijo</child></element></root>");
$doc->registerNodeClass("DOMElement", "myElement");

$element = $doc->getElementsByTagName("child")->item(0);
var_dump(get_class($element));

// Y utilizamos las ventajas del método __toString..
echo $element;
?>
]]>
    </programlisting>
    &example.outputs;
    <screen role="xml">
<![CDATA[
string(9) "myElement"
Texto en un hijo
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title>Recuperación del propietario del documento</title>
    <para>
     Al instanciar un <classname>DOMDocument</classname>
     personalizado, la propiedad <varname>ownerDocument</varname> se refiere
     a la clase instanciada. Sin embargo, si todas las referencias a esta clase
     son eliminadas, será destruida y una nueva instancia de
     <classname>DOMDocument</classname> será creada en su lugar. Por esta razón,
     puede utilizarse el método <function>DOMDocument::registerNodeClass</function>
     con <classname>DOMDocument</classname>
    </para>
    <programlisting role="php">
<![CDATA[
<?php
class MyDOMDocument extends DOMDocument {
}

class MyOtherDOMDocument extends DOMDocument {
}

// Creación de un documento MyDOMDocument con algunos fragmentos XML
$doc = new MyDOMDocument;
$doc->loadXML("<root><element><child>texto en un hijo</child></element></root>");

$child = $doc->getElementsByTagName("child")->item(0);

// El propietario actual del nodo es MyDOMDocument
var_dump(get_class($child->ownerDocument));
// MyDOMDocument es destruido
unset($doc);
// Y una nueva instancia de DOMDocument es creada
var_dump(get_class($child->ownerDocument));

// Importación de un nodo desde MyDOMDocument
$newdoc = new MyOtherDOMDocument;
$child = $newdoc->importNode($child);

// Registra un DOMDocument personalizado
$newdoc->registerNodeClass("DOMDocument", "MyOtherDOMDocument");

var_dump(get_class($child->ownerDocument));
unset($doc);
// Un nuevo MyOtherDOMDocument es creado
var_dump(get_class($child->ownerDocument));
?>
]]>
    </programlisting>
    &example.outputs;
    <screen role="xml">
<![CDATA[
string(13) "MyDOMDocument"
string(11) "DOMDocument"
string(18) "MyOtherDOMDocument"
string(18) "MyOtherDOMDocument"
]]>
    </screen>
   </example>
  </para>
  <para>
   <example xml:id="domdocument.registernodeclass.example.transient">
    <title>Los objetos personalizados son efímeros</title>
    <caution>
     <simpara>
      Los objetos de la clase de nodos registrada son efímeros, es decir, son
      destruidos cuando ya no son referenciados desde el código PHP, y
      recreados cuando son recuperados nuevamente. Esto implica que los valores
      de propiedades personalizadas se perderán después de la recreación.
     </simpara>
    </caution>
    <programlisting role="php">
<![CDATA[
<?php
class MyDOMElement extends DOMElement
{
    public $myProp = 'default value';
}

$doc = new DOMDocument();
$doc->registerNodeClass('DOMElement', 'MyDOMElement');

$node = $doc->createElement('a');
$node->myProp = 'modified value';
$doc->appendChild($node);

echo $doc->childNodes[0]->myProp, PHP_EOL;
unset($node);
echo $doc->childNodes[0]->myProp, PHP_EOL;
?>]]>
    </programlisting>
    &example.outputs;
    <screen role="xml">
<![CDATA[
modified value
default value
]]>
    </screen>
   </example>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
