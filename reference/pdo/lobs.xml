<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: eae19eb5fe0f5bebcbce382ea7a505cedeb5a883 Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: yes -->

<chapter xml:id="pdo.lobs" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Los objetos grandes (LOB)</title>
 <para>
  En algún momento de su aplicación, podría ser necesario almacenar
  grandes cantidades de datos en la base de datos. « Grande » significa
  típicamente datos de aproximadamente 4 ko o más, aunque algunas bases de datos
  pueden manejar más de 32 ko antes de que los datos se consideren « grandes ». Los objetos
  grandes pueden ser de naturaleza textual o binaria. PDO permite trabajar
  con este tipo de grandes datos utilizando el código tipo
  <constant>PDO::PARAM_LOB</constant> en las llamadas a las funciones
  <methodname>PDOStatement::bindParam</methodname> o
  <methodname>PDOStatement::bindColumn</methodname>.
  <constant>PDO::PARAM_LOB</constant> solicita a PDO que transforme los datos
  en un flujo que pueda ser manipulado utilizando
  la <link linkend="ref.stream">API PHP de flujos</link>.
 </para>
 <para>
  <example>
   <title>Mostrar una imagen desde una base de datos</title>
   <para>
    Este ejemplo vincula un LOB en una variable llamada $lob y lo envía
    al navegador utilizando la función <function>fpassthru</function>.
    Dado que un LOB se representa como un flujo, las funciones como
    <function>fgets</function>, <function>fread</function> y
    <function>stream_get_contents</function> pueden ser utilizadas en este flujo.
   </para>
   <programlisting role="php">
<![CDATA[
<?php
$db = new PDO('odbc:SAMPLE', 'db2inst1', 'ibmdb2');
$stmt = $db->prepare("select contenttype, imagedata from images where id=?");
$stmt->execute(array($_GET['id']));
$stmt->bindColumn(1, $type, PDO::PARAM_STR, 256);
$stmt->bindColumn(2, $lob, PDO::PARAM_LOB);
$stmt->fetch(PDO::FETCH_BOUND);

header("Content-Type: $type");
fpassthru($lob);
?>
]]>
   </programlisting>
  </example>
 </para>
 <para>
  <example>
   <title>Insertar una imagen en una base de datos</title>
   <para>
    Este ejemplo abre un fichero y pasa el puntero de fichero a PDO
    para insertarlo como LOB. PDO hará lo posible por recuperar
    el contenido del fichero e insertarlo en la base de datos de la
    manera más eficiente posible.
   </para>
   <programlisting role="php">
<![CDATA[
<?php
$db = new PDO('odbc:SAMPLE', 'db2inst1', 'ibmdb2');
$stmt = $db->prepare("insert into images (id, contenttype, imagedata) values (?, ?, ?)");
$id = get_new_id(); // función para asignar un nuevo ID

// asumamos que obtenemos un fichero desde un formulario
// puede encontrar más detalles en la documentación de PHP

$fp = fopen($_FILES['file']['tmp_name'], 'rb');

$stmt->bindParam(1, $id);
$stmt->bindParam(2, $_FILES['file']['type']);
$stmt->bindParam(3, $fp, PDO::PARAM_LOB);

$db->beginTransaction();
$stmt->execute();
$db->commit();
?>
]]>
   </programlisting>
  </example>
 </para>
 <para>
  <example>
   <title>Insertar una imagen en una base de datos Oracle</title>
   <para>
    Oracle requiere una sintaxis ligeramente diferente para insertar un LOB
    desde un fichero. Asimismo, es esencial realizar la inserción
    dentro de una transacción, de lo contrario, el nuevo LOB será insertado
    con una longitud de cero:
   </para>
   <programlisting role="php">
<![CDATA[
<?php
$db = new PDO('oci:', 'scott', 'tiger');
$stmt = $db->prepare("insert into images (id, contenttype, imagedata) " .
"VALUES (?, ?, EMPTY_BLOB()) RETURNING imagedata INTO ?");
$id = get_new_id(); // función para asignar un nuevo ID

// asumamos que obtenemos un fichero desde un formulario
// puede encontrar más detalles en la documentación de PHP

$fp = fopen($_FILES['file']['tmp_name'], 'rb');

$stmt->bindParam(1, $id);
$stmt->bindParam(2, $_FILES['file']['type']);
$stmt->bindParam(3, $fp, PDO::PARAM_LOB);

$db->beginTransaction();
$stmt->execute();
$db->commit();
?>
]]>
   </programlisting>
  </example>
 </para>
</chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
