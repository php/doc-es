<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: d861a1bcea24f05e52e4938c1ecdf9d70326d7aa Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: yes -->

<chapter xml:id="pdo.connections" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Conexiones y gestor de conexión</title>
 <para>
  Las conexiones se establecen creando instancias de la clase base de PDO.
  No importa qué controlador se desee utilizar; siempre se utiliza el nombre
  de la clase PDO. El constructor acepta argumentos para especificar
  la fuente de la base de datos (conocida como DSN) y opcionalmente,
  el nombre de usuario y la contraseña (si los hay).
 </para>
 <para>
  <example>
   <title>Conexión a MySQL</title>
   <programlisting role="php">
<![CDATA[
<?php
$dbh = new PDO('mysql:host=localhost;dbname=test', $user, $pass);
?>
]]>
   </programlisting>
  </example>
 </para>
 <para>
  Si existen errores de conexión, se lanza un objeto <literal>PDOException</literal>.
  Este error puede ser capturado si se desea gestionar la excepción, o bien
  puede ser tratado por el gestor global de excepciones definido
  mediante la función <function>set_exception_handler</function>.
 </para>
 <para>
  <example>
   <title>Gestión de errores de conexión</title>
   <programlisting role="php">
<![CDATA[
<?php
try {
    $dbh = new PDO('mysql:host=localhost;dbname=test', $user, $pass);
} catch (PDOException $e) {
    // intentar reintentar la conexión después de un cierto tiempo, por ejemplo
}
]]>
   </programlisting>
  </example>
 </para>
 <warning>
  <para>
   Al igual que todas las demás <link linkend="language.exceptions">excepciones</link>,
   <classname>PDOException</classname> puede ser capturada ya sea explícitamente, mediante
   una instrucción &catch;, o implícitamente a través de <function>set_exception_handler</function>.
   De lo contrario, se producirá el comportamiento por defecto de convertir una excepción no capturada en una
   <constant>E_FATAL_ERROR</constant>.
   El error fatal contendrá un backtrace que podría revelar detalles sobre la conexión.
   Por lo tanto, la opción &php.ini; <link linkend="ini.display-errors"><literal>display_errors</literal></link>
   debe estar configurada a <literal>0</literal> en un servidor de producción.
  </para>
 </warning>
 <para>
  Cuando la conexión a la base de datos tiene éxito, se devuelve una instancia de la clase
  PDO al script. La conexión permanece activa mientras el objeto PDO lo esté. Para cerrar la conexión,
  se debe destruir el objeto asegurándose de que todas sus referencias sean eliminadas. Esto puede hacerse
  asignando &null; a la variable que gestiona el objeto. Si no se hace explícitamente, PHP cerrará
  automáticamente la conexión cuando el script llegue al final.
 </para>
 <note>
  <simpara>
   Si aún existen otras referencias a esta instancia PDO (por ejemplo,
   desde una instancia PDOStatement u otras variables que referencian
   la misma instancia PDO), estas también deben ser eliminadas (por
   ejemplo, asignando &null; a la variable que referencia el PDOStatement).
  </simpara>
 </note>
 <para>
  <example>
   <title>Cierre de una conexión</title>
   <programlisting role="php">
<![CDATA[
<?php
$dbh = new PDO('mysql:host=localhost;dbname=test', $user, $pass);
// usar la conexión aquí
$sth = $dbh->query('SELECT * FROM foo');

// y ahora, cerrarla !
$sth = null;
$dbh = null;
?>
]]>
   </programlisting>
  </example>
 </para>
 <para>
  Muchas aplicaciones web utilizan conexiones persistentes a los servidores
  de base de datos. Las conexiones persistentes no se cierran al final del
  script, sino que se almacenan en caché y se reutilizan cuando otro script solicita una conexión
  utilizando los mismos parámetros. La caché de conexiones persistentes
  permite evitar establecer una nueva conexión cada vez que un
  script necesita acceder a una base de datos, lo que hace que la aplicación web sea más rápida.
 </para>
 <para>
  <example>
   <title>Conexiones persistentes</title>
   <programlisting role="php">
<![CDATA[
<?php
$dbh = new PDO('mysql:host=localhost;dbname=test', $user, $pass, array(
    PDO::ATTR_PERSISTENT => true
));
?>
]]>
   </programlisting>
  </example>
 </para>
 <para>
  El valor de la opción <constant>PDO::ATTR_PERSISTENT</constant> se convierte
  en &boolean; (activar/desactivar conexiones persistentes), a menos que sea
  una &string; no numérica, en cuyo caso esto permite el uso de
  varios grupos de conexiones persistentes.
  Esto es útil si las conexiones diferentes utilizan parámetros
  incompatibles, por ejemplo, valores diferentes de
  <constant>PDO::MYSQL_ATTR_USE_BUFFERED_QUERY</constant>.
 </para>
 <note>
  <para>
   Si se desea utilizar conexiones persistentes, se debe
   utilizar el valor <constant>PDO::ATTR_PERSISTENT</constant> en el
   array de opciones del controlador pasado al constructor PDO. Si se
   establece este atributo con el método <methodname>PDO::setAttribute</methodname>
   después de la instanciación del objeto, el controlador no utilizará las
   conexiones persistentes.
  </para>
 </note>
 <note>
  <para>
   Si se utiliza el controlador PDO ODBC y si su librería ODBC soporta
   el pool de conexiones ODBC (tanto unixODBC como Windows lo soportan;
   puede ser más), entonces se recomienda no utilizar las conexiones persistentes
   PDO, sino dejar que el pool de conexiones ODBC almacene en caché las conexiones.
   El pool de conexiones ODBC es compartido con otros módulos en el proceso;
   si PDO almacena en caché la conexión, entonces esta conexión nunca será devuelta
   por el pool de conexiones ODBC, lo que hace que se creen múltiples conexiones para
   otros módulos.
  </para>
 </note>
</chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
