<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 661e6858acade9f5a08fc8f9c07b605f42f4a700 Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: no -->
<refentry xml:id="pdo.begintransaction" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>PDO::beginTransaction</refname>
  <refpurpose>
   Inicia una transacción
  </refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis role="PDO">
   <modifier>public</modifier> <type>bool</type><methodname>PDO::beginTransaction</methodname>
   <void/>
  </methodsynopsis>
  <para>
   <methodname>PDO::beginTransaction</methodname> desactiva el modo
   <literal>autocommit</literal>. Cuando el autocommit está desactivado,
   las modificaciones realizadas en la base de datos mediante las instancias
   de los objetos PDO no se aplican hasta que se finaliza la transacción
   llamando a la función <methodname>PDO::commit</methodname>.
   La llamada a <methodname>PDO::rollBack</methodname> anulará todas las modificaciones
   realizadas en la base de datos y restablecerá la conexión en modo autocommit.
  </para>
  <para>
   Algunas bases de datos, incluyendo MySQL, ejecutarán automáticamente un COMMIT
   cuando se ejecute una consulta de definición de lenguaje de base de datos (DDL) como
   DROP TABLE o CREATE TABLE dentro de una transacción. Este COMMIT implícito
   impedirá anular otras modificaciones realizadas en esta transacción.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  &no.function.parameters;
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.success;
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   Se lanza la excepción <classname>PDOException</classname> si ya se ha iniciado una transacción o si el controlador no soporta transacciones.
  </para>
  &pdo.errors.exception-not-errmode;
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Anular una transacción</title>
    <para>
     El siguiente ejemplo inicia una transacción y ejecuta dos consultas
     que modifican la base de datos antes de anular las modificaciones. En MySQL,
     sin embargo, la consulta DROP TABLE validará automáticamente la transacción,
     por lo que ninguna de las modificaciones de la transacción será anulada.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
/* Inicia una transacción, desactivando el auto-commit */
$dbh->beginTransaction();

/* Modificación del esquema de la base de datos y de los datos */
$sth = $dbh->exec("DROP TABLE fruit");
$sth = $dbh->exec("UPDATE dessert
SET name = 'hamburger'");

/* Se detecta un error y se anulan las modificaciones */
$dbh->rollBack();

/* La conexión a la base de datos está ahora de vuelta en modo auto-commit */
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><methodname>PDO::commit</methodname></member>
    <member><methodname>PDO::rollBack</methodname></member>
    <member><link linkend="pdo.transactions">Transacciones y auto-commit</link></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
