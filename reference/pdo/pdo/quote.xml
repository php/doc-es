<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 661e6858acade9f5a08fc8f9c07b605f42f4a700 Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: yes -->
<refentry xml:id="pdo.quote" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>PDO::quote</refname>
  <refpurpose>
   Protege una cadena para usarla en una consulta SQL PDO
  </refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis role="PDO">
   <modifier>public</modifier> <type class="union"><type>string</type><type>false</type></type><methodname>PDO::quote</methodname>
   <methodparam><type>string</type><parameter>string</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>type</parameter><initializer>PDO::PARAM_STR</initializer></methodparam>
  </methodsynopsis>

  <para>
   <methodname>PDO::quote</methodname> coloca comillas simples alrededor
   de una cadena de entrada, si es necesario y protege los caracteres especiales presentes en la
   cadena de entrada, utilizando el estilo de protección apropiado al controlador actual.
  </para>
  <para>
   Si se utiliza esta función para construir consultas SQL, se
   <emphasis>recomienda encarecidamente</emphasis> usar
   <methodname>PDO::prepare</methodname> para preparar las consultas SQL con
   parámetros vinculados en lugar de usar <methodname>PDO::quote</methodname> para
   interpretar las entradas del usuario en la consulta SQL. Las consultas preparadas
   con parámetros vinculados no solo son más portables, flexibles y seguras, sino también
   más rápidas de ejecutar que interpretar las consultas, ya que los lados cliente y servidor pueden
   almacenar en caché una versión compilada de la consulta.
  </para>
  <para>
   No todos los controladores PDO implementan este método (como PDO_ODBC). Utilice
   consultas preparadas en su lugar.
  </para>
  <caution>
   <title>Seguridad: el juego de caracteres por defecto</title>
   <para>
    El juego de caracteres debe ser definido ya sea a nivel
    del servidor, o durante la conexión a la base de
    datos (dependiendo del driver utilizado) para que afecte
    al método <methodname>PDO::quote</methodname>.
    Ver la <link linkend="pdo.drivers">documentación
    específica del driver</link> para más información.
   </para>
  </caution>
 </refsect1>
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>string</parameter></term>
      <listitem>
       <para>
        La cadena a proteger.
       </para>
      </listitem>
     </varlistentry>
    <varlistentry>
     <term><parameter>type</parameter></term>
      <listitem>
       <para>
        El tipo de datos para los drivers que tienen estilos particulares
        de protección.
        Proporciona una pista al tipo de dato para los controladores que tienen un estilo
        de escape diferente. Por ejemplo <constant>PDO_PARAM_LOB</constant>
        indica al controlador que escape datos binarios.
       </para>
      </listitem>
     </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Devuelve una cadena protegida, que es teóricamente segura para usar
   en una consulta SQL. Devuelve &false; si el controlador no soporta
   este tipo de protecciones.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Protección de una cadena normal</title>
    <programlisting role="php">
<![CDATA[
<?php
$conn = new PDO('sqlite:/home/lynn/music.sql3');

/* Cadena simple */
$string = 'Nice';
print "Cadena no escapada : $string\n";
print "Cadena escapada : " . $conn->quote($string) . "\n";
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Cadena no escapada : Nice
Cadena escapada: 'Nice'
]]>
    </screen>
   </example>
   <example>
    <title>Protección de una cadena peligrosa</title>
    <programlisting role="php">
<![CDATA[
<?php
$conn = new PDO('sqlite:/home/lynn/music.sql3');

/* Cadena peligrosa */
$string = 'Cadena \' particular';
print "Cadena no escapada : $string\n";
print "Cadena escapada :" . $conn->quote($string) . "\n";
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Cadena no escapada : Cadena ' particular
Cadena escapada : 'Cadena '' particular'
]]>
    </screen>
   </example>
   <example>
    <title>Protección de una cadena compleja</title>
    <programlisting role="php">
<![CDATA[
<?php
$conn = new PDO('sqlite:/home/lynn/music.sql3');

/* Cadena compleja */
$string = "Co'mpl''exe \"ch'\"aîne";
print "Cadena no escapada : $string\n";
print "Cadena escapada : " . $conn->quote($string) . "\n";
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Cadena no escapada: Co'mpl''exe "ch'"aîne
Cadena escapada: 'Co''mpl''''exe "ch''"aîne'
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><methodname>PDO::prepare</methodname></member>
    <member><methodname>PDOStatement::execute</methodname></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
