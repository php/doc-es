<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 082ddc19f53e6e254010de1a1fbbe485ff744ec1 Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: no -->
<refentry xml:id="pdo.prepare" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>PDO::prepare</refname>
  <refpurpose>
   Prepara una consulta para su ejecución y devuelve un objeto
  </refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis role="PDO">
   <modifier>public</modifier> <type class="union"><type>PDOStatement</type><type>false</type></type><methodname>PDO::prepare</methodname>
   <methodparam><type>string</type><parameter>query</parameter></methodparam>
   <methodparam choice="opt"><type>array</type><parameter>options</parameter><initializer>[]</initializer></methodparam>
  </methodsynopsis>

  <para>
   Prepara una consulta SQL para ser ejecutada por el método
   <methodname>PDOStatement::execute</methodname>. El modelo de declaración puede contener
   cero o más parámetros nombrados (<literal>:nombre</literal>) o marcadores
   (<literal>?</literal>) para los cuales los valores reales serán sustituidos
   cuando la consulta sea ejecutada.
   El uso tanto de parámetros nombrados como de marcadores es
   imposible en un modelo de declaración; solo uno u otro estilo de parámetro.
   Utilícese estos parámetros para ligar las entradas del usuario, no se incluyan
   directamente en la consulta.
  </para>
  <para>
   Debe incluirse un marcador con un nombre único para cada valor que
   se desee pasar en la consulta al llamar a
   <methodname>PDOStatement::execute</methodname>. No puede utilizarse
   un marcador con dos nombres idénticos en una consulta preparada, a menos que
   el modo de emulación esté activo.
  </para>
<note>
   <para>
    Los marcadores de parámetros pueden representar únicamente un literal de
    datos completo.
    Ni una parte de literal, ni una palabra clave, ni un identificador, ni cualquier otra
    consulta arbitraria pueden ser ligados utilizando los parámetros.
    Por ejemplo, no puede asociarse múltiples valores a un solo marcador de nombre entrante, en la cláusula IN() de una consulta SQL.
   </para>
  </note>
  <para>
   Llamar a <methodname>PDO::prepare</methodname> y
   <methodname>PDOStatement::execute</methodname> para las consultas
   que deben ser ejecutadas varias veces con diferentes valores de
   parámetros optimiza el rendimiento de la aplicación permitiendo al controlador negociar
   del lado del cliente y/o servidor con la caché de consultas
   y las meta-informaciones. Además, llamar a <methodname>PDO::prepare</methodname> y
   <methodname>PDOStatement::execute</methodname> ayuda a prevenir ataques por
   inyección SQL eliminando la necesidad de proteger los parámetros manualmente.
  </para>
  <para>
   PDO emula las consultas preparadas / los parámetros ligados para los controladores
   que no los soportan nativamente, y puede también reescribir los
   parámetros nombrados o los marcadores en algo más
   apropiado, si el controlador soporta un estilo y no el otro.
  </para>
  <note>
   <simpara>
    El analizador utilizado para las declaraciones preparadas
    emuladas y para reescribir los parámetros nombrados o del estilo de punto
    de interrogación soporta el escape antislash no estándar para las comillas simples y dobles. Esto significa que las comillas finales que
    son precedidas por un antislash no serán reconocidas como tales, lo que puede
    resultar en una mala detección de los parámetros causando que la declaración
    preparada falle al ser ejecutada. Un contorno es no utilizar las consultas emuladas para tales consultas SQL, y evitar reescribir los parámetros utilizando un estilo de parámetro que es
    soportado nativamente por el controlador.
   </simpara>
  </note>
  <para>
   A partir de PHP 7.4.0, los puntos de interrogación pueden ser escapados duplicándolos.
   Esto significa que la cadena <literal>??</literal> será traducida en <literal>?</literal>
   al enviar la consulta a la base de datos.
  </para>
 </refsect1>
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>query</parameter></term>
     <listitem>
      <para>
       Debe ser un modelo de consulta SQL válido para el servidor de base de datos objetivo.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>options</parameter></term>
     <listitem>
      <para>
       Este array contiene una o más parejas clave=&gt;valor para definir
       los valores de los atributos para el objeto <classname>PDOStatement</classname>
       que esta método devuelve. Puede utilizarse esto para definir el valor
       <literal>PDO::ATTR_CURSOR</literal> a
       <literal>PDO::CURSOR_SCROLL</literal> para solicitar un cursor desplazable.
       Algunos controladores tienen opciones específicas que pueden ser definidas
       en el momento de la preparación.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Si el servidor de base de datos prepara con éxito esta consulta,
   <methodname>PDO::prepare</methodname> devuelve un objeto <classname>PDOStatement</classname>.
   Si el servidor de base de datos no logra preparar la consulta,
   <methodname>PDO::prepare</methodname> devuelve &false; o emite una excepción
   <classname>PDOException</classname> (siguiendo el
   <link linkend="pdo.error-handling">gestor de errores</link>).
  </para>
  <note>
   <para>
    La emulación de consultas preparadas no comunica con el servidor de base
    de datos. También, la función <methodname>PDO::prepare</methodname> no verifica
    la consulta.
   </para>
  </note>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  &pdo.errors;
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Modelo de declaración SQL con parámetros nombrados</title>
    <programlisting role="php">
<![CDATA[
<?php
/* Ejecuta una consulta preparada pasando un array de valores */
$sql = 'SELECT nombre, color, calorias
    FROM fruta
WHERE calorias < :calorias AND color = :color';
$sth = $dbh->prepare($sql, [PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY]);
$sth->execute(['calorias' => 150, 'color' => 'red']);
$red = $sth->fetchAll();
/* Las claves del array pueden ser prefijadas con dos puntos ":" también (opcional) */
$sth->execute([':calorias' => 175, ':color' => 'yellow']);
$yellow = $sth->fetchAll();
?>
]]>
    </programlisting>
   </example>
   <example>
    <title>Modelo de declaración SQL con marcadores</title>
    <programlisting role="php">
<![CDATA[
<?php
/* Ejecuta una consulta preparada pasando un array de valores */
$sth = $dbh->prepare('SELECT nombre, color, calorias
    FROM fruta
    WHERE calorias < ? AND color = ?');
$sth->execute([150, 'rojo']);
$red = $sth->fetchAll();
$sth->execute([175, 'amarillo']);
$yellow = $sth->fetchAll();
?>
]]>
    </programlisting>
   </example>
   <example>
    <title>Modelo de declaración SQL con un punto de interrogación escapado</title>
    <programlisting role="php">
<![CDATA[
<?php
/* nota: esto solo es válido para bases de datos PostgreSQL */
$sth = $dbh->prepare('SELECT * FROM issues WHERE tag::jsonb ?? ?');
$sth->execute(['feature']);
$featureIssues = $sth->fetchAll();
$sth->execute(['performance']);
$performanceIssues = $sth->fetchAll();
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><methodname>PDO::exec</methodname></member>
    <member><methodname>PDO::query</methodname></member>
    <member><methodname>PDOStatement::execute</methodname></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
