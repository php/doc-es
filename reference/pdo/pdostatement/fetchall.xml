<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 44bcc82c7d1a0dea5578093833d3172c0c742f5a Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: no -->
<refentry xml:id="pdostatement.fetchall" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>PDOStatement::fetchAll</refname>
  <refpurpose>
   Recupera las líneas restantes de un conjunto de resultados
  </refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis role="PDOStatement">
   <modifier>public</modifier> <type>array</type><methodname>PDOStatement::fetchAll</methodname>
   <methodparam choice="opt"><type>int</type><parameter>mode</parameter><initializer>PDO::FETCH_DEFAULT</initializer></methodparam>
  </methodsynopsis>

  <methodsynopsis role="PDOStatement">
   <modifier>public</modifier> <type>array</type><methodname>PDOStatement::fetchAll</methodname>
   <methodparam><type>int</type><parameter>mode</parameter><initializer>PDO::FETCH_COLUMN</initializer></methodparam>
   <methodparam><type>int</type><parameter>column</parameter></methodparam>
  </methodsynopsis>

  <methodsynopsis role="PDOStatement">
   <modifier>public</modifier> <type>array</type><methodname>PDOStatement::fetchAll</methodname>
   <methodparam><type>int</type><parameter>mode</parameter><initializer>PDO::FETCH_CLASS</initializer></methodparam>
   <methodparam><type>string</type><parameter>class</parameter></methodparam>
   <methodparam><type class="union"><type>array</type><type>null</type></type><parameter>constructorArgs</parameter></methodparam>
  </methodsynopsis>

  <methodsynopsis role="PDOStatement">
   <modifier>public</modifier> <type>array</type><methodname>PDOStatement::fetchAll</methodname>
   <methodparam><type>int</type><parameter>mode</parameter><initializer>PDO::FETCH_FUNC</initializer></methodparam>
   <methodparam><type>callable</type><parameter>callback</parameter></methodparam>
  </methodsynopsis>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>mode</parameter></term>
     <listitem>
      <para>
       Controla el contenido del array retornado como se documenta en la función
       <methodname>PDOStatement::fetch</methodname>.
       Valor por omisión: <constant>PDO::ATTR_DEFAULT_FETCH_MODE</constant>
       (que toma su valor por omisión de <constant>PDO::FETCH_BOTH</constant>).
      </para>
      <para>
       Para retornar un array que contenga todos los valores de una sola columna
       desde el conjunto de resultados, se especifica <constant>PDO::FETCH_COLUMN</constant>.
       Puede especificarse qué columna se desea con el argumento
       <parameter>column</parameter>.
      </para>
      <para>
       Para indexar el array resultante por el valor de una cierta columna (en lugar de por números
       consecutivos), se coloca el nombre de esta columna en primer lugar en la lista de columnas en SQL, y
       se utiliza <constant>PDO::FETCH_UNIQUE</constant>. Esta columna debe contener únicamente valores únicos, de lo contrario se perderán algunos datos.
      </para>
      <para>
       Para agrupar los resultados en forma de un array de tres dimensiones indexado por los valores
       de una columna especificada, se coloca el nombre de esta columna en primer lugar en la lista de columnas
       en SQL y se utiliza <constant>PDO::FETCH_GROUP</constant>.
      </para>
      <para>
       Para agrupar los resultados en forma de un array de dos dimensiones,
       se utiliza un OU a nivel de bits con <constant>PDO::FETCH_GROUP</constant> y
       <constant>PDO::FETCH_COLUMN</constant>.
       Los resultados serán agrupados por la primera columna, el valor del elemento del array
       siendo una lista de entradas correspondientes de la segunda columna.
      </para>
     </listitem>
    </varlistentry>
    </variablelist>
    Los argumentos siguientes son dinámicos y dependen del modo de recuperación.
    No pueden ser utilizados con argumentos nombrados.
   <variablelist>
    <varlistentry>
     <term><parameter>column</parameter></term>
     <listitem>
      <para>
       Utilizado con <constant>PDO::FETCH_COLUMN</constant>.
       Retorna la columna indicada indexada a 0.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>class</parameter></term>
     <listitem>
      <para>
       Utilizado con <constant>PDO::FETCH_CLASS</constant>. Retorna instancias de la clase
       especificada, haciendo corresponder las columnas de cada línea a propiedades nombradas en la clase.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>constructorArgs</parameter></term>
     <listitem>
      <para>
       Argumentos del constructor personalizado de la clase cuando el argumento <parameter>mode</parameter>
       es <constant>PDO::FETCH_CLASS</constant>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>callback</parameter></term>
     <listitem>
      <para>
       Utilizado con <constant>PDO::FETCH_FUNC</constant>. Retorna los resultados de la llamada de la
       función especificada, utilizando las columnas de cada línea como argumentos en la llamada.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   <methodname>PDOStatement::fetchAll</methodname> retorna un array que contiene
   todas las líneas del conjunto de registros. El array representa cada línea
   como un array de valores de las columnas, o un objeto con propiedades
   correspondientes a cada nombre de columna.
   Un array vacío es retornado si no hay resultados.
  </para>
  <para>
   El uso de este método para recuperar grandes conjuntos de resultados
   puede aumentar el uso de recursos del sistema, pero también estos recursos.
   En lugar de recuperar todas las datos y manipularlas con PHP,
   se utiliza el servidor de base de datos para manipular los conjuntos de resultados.
   Por ejemplo, se utilizan las cláusulas <literal>WHERE</literal> y
   <literal>ORDER BY</literal> en las consultas SQL para restringir los resultados
   antes de recuperarlos y procesarlos con PHP.
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  &pdo.errors;
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <informaltable>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>&Version;</entry>
      <entry>&Description;</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>8.0.0</entry>
      <entry>
       Este método retorna ahora siempre un &array;,
       anteriormente &false; podía ser retornado en caso de fallo.
      </entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Recuperación de todas las líneas de un conjunto de resultados</title>
    <programlisting role="php">
<![CDATA[
<?php
$sth = $dbh->prepare("SELECT nom, couleur FROM fruit");
$sth->execute();

/* Recuperación de todas las líneas de un conjunto de resultados */
print "Recuperación de todas las líneas de un conjunto de resultados :\n";
$result = $sth->fetchAll();
print_r($result);
?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
Recuperación de todas las líneas de un conjunto de resultados :
Array
(
    [0] => Array
        (
            [nom] => apple
            [0] => apple
            [couleur] => red
            [1] => red
        )

    [1] => Array
        (
            [nom] => pear
            [0] => pear
            [couleur] => green
            [1] => green
        )

    [2] => Array
        (
            [nom] => watermelon
            [0] => watermelon
            [couleur] => pink
            [1] => pink
        )

)
]]>
    </screen>
   </example>
   <example>
    <title>Recuperación de todos los valores de una sola columna desde un conjunto de resultados</title>
    <para>
     El siguiente ejemplo muestra cómo retornar todos los valores
     de una sola columna desde un conjunto de resultados, incluso si la consulta SQL
     retorna varias columnas por líneas.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
$sth = $dbh->prepare("SELECT name, colour FROM fruit");
$sth->execute();

/* Recuperación de todos los valores de la primera columna */
$result = $sth->fetchAll(PDO::FETCH_COLUMN, 0);
var_dump($result);
?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
Array(3)
(
    [0] =>
    string(5) => apple
    [1] =>
    string(4) => pear
    [2] =>
    string(10) => watermelon
)
]]>
    </screen>
   </example>
   <example>
    <title>Agrupar todos los valores de una sola columna</title>
    <para>
     El siguiente ejemplo muestra cómo retornar un array asociativo
     agrupado por los valores de la columna especificada de un conjunto de resultados.
     El array contiene tres claves: los valores <literal>apple</literal>
     y <literal>pear</literal> son retornados en forma de arrays
     que contienen dos colores diferentes, mientras que
     <literal>watermelon</literal> es retornado en forma de un array
     que contiene únicamente un solo color.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
$insert = $dbh->prepare("INSERT INTO fruit(name, colour) VALUES (?, ?)");
$insert->execute(array('apple', 'green'));
$insert->execute(array('pear', 'yellow'));

$sth = $dbh->prepare("SELECT name, colour FROM fruit");
$sth->execute();

/* Agrupar los valores de la primera columna */
var_dump($sth->fetchAll(PDO::FETCH_COLUMN|PDO::FETCH_GROUP));
?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
array(3) {
  ["apple"]=>
    array(2) {
      [0]=>
        string(5) "green"
      [1]=>
        string(3) "red"
    }
  ["pear"]=>
    array(2) {
      [0]=>
        string(5) "green"
      [1]=>
        string(6) "yellow"
    }
  ["watermelon"]=>
    array(1) {
      [0]=>
        string(5) "pink"
    }
}

]]>
    </screen>
   </example>
   <example><title>Instanciar una clase para cada resultado</title>
    <para>
     El siguiente ejemplo muestra el comportamiento de
     <constant>PDO::FETCH_CLASS</constant>.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
class fruit {
    public $name;
    public $colour;
}

$sth = $dbh->prepare("SELECT name, colour FROM fruit");
$sth->execute();

$result = $sth->fetchAll(PDO::FETCH_CLASS, "fruit");
var_dump($result);
?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
array(3) {
  [0]=>
  object(fruit)#1 (2) {
    ["name"]=>
    string(5) "apple"
    ["colour"]=>
    string(5) "green"
  }
  [1]=>
  object(fruit)#2 (2) {
    ["name"]=>
    string(4) "pear"
    ["colour"]=>
    string(6) "yellow"
  }
  [2]=>
  object(fruit)#3 (2) {
    ["name"]=>
    string(10) "watermelon"
    ["colour"]=>
    string(4) "pink"
  }
  [3]=>
  object(fruit)#4 (2) {
    ["name"]=>
    string(5) "apple"
    ["colour"]=>
    string(3) "red"
  }
  [4]=>
  object(fruit)#5 (2) {
    ["name"]=>
    string(4) "pear"
    ["colour"]=>
    string(5) "green"
  }
}
]]>
    </screen>
   </example>
   <example><title>Llamada de una función para cada resultado</title>
    <para>
     El siguiente ejemplo muestra el comportamiento de
     <constant>PDO::FETCH_FUNC</constant>.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
function fruit($name, $colour) {
    return "{$name}: {$colour}";
}

$sth = $dbh->prepare("SELECT name, colour FROM fruit");
$sth->execute();

$result = $sth->fetchAll(PDO::FETCH_FUNC, "fruit");
var_dump($result);
?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
array(3) {
  [0]=>
  string(12) "apple: green"
  [1]=>
  string(12) "pear: yellow"
  [2]=>
  string(16) "watermelon: pink"
  [3]=>
  string(10) "apple: red"
  [4]=>
  string(11) "pear: green"
}
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><methodname>PDO::query</methodname></member>
    <member><methodname>PDOStatement::fetch</methodname></member>
    <member><methodname>PDOStatement::fetchColumn</methodname></member>
    <member><methodname>PDO::prepare</methodname></member>
    <member><methodname>PDOStatement::setFetchMode</methodname></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
