<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: a8863b0123dc5348c91e67198b995222878a7e65 Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: no -->
<refentry xml:id="pdostatement.fetch" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>PDOStatement::fetch</refname>
  <refpurpose>
   Recupera la siguiente línea de un conjunto de resultados PDO
  </refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis role="PDOStatement">
   <modifier>public</modifier> <type>mixed</type><methodname>PDOStatement::fetch</methodname>
   <methodparam choice="opt"><type>int</type><parameter>mode</parameter><initializer>PDO::FETCH_DEFAULT</initializer></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>cursorOrientation</parameter><initializer>PDO::FETCH_ORI_NEXT</initializer></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>cursorOffset</parameter><initializer>0</initializer></methodparam>
  </methodsynopsis>

  <para>
   Recupera una línea desde un conjunto de resultados asociado al objeto
   <literal>PDOStatement</literal>. El argumento
   <parameter>mode</parameter> determina la forma en que PDO devuelve
   la línea.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>mode</parameter></term>
     <listitem>
      <para>
       Controla cómo se devolverá la siguiente línea al llamante. Este valor
       debe ser una de las constantes <literal>PDO::FETCH_*</literal>,
       y por omisión, vale la constante <literal>PDO::ATTR_DEFAULT_FETCH_MODE</literal>
       (que por omisión vale la constante <literal>PDO::FETCH_BOTH</literal>).
       <itemizedlist>
        <listitem><para>
         <literal>PDO::FETCH_ASSOC</literal>: devuelve un array indexado por el nombre
         de la columna como se devuelve en el conjunto de resultados
         </para></listitem>
        <listitem><para>
         <literal>PDO::FETCH_BOTH</literal> (por omisión): devuelve un array indexado
         por los nombres de columnas y también por los números de columnas,
         comenzando en el índice 0, como se devuelve en el conjunto de resultados
         </para></listitem>
        <listitem><para>
         <literal>PDO::FETCH_BOUND</literal>: devuelve &true; y asigna los valores
         de las columnas de su conjunto de resultados en las variables PHP a las que
         están vinculadas con el método
         <methodname>PDOStatement::bindColumn</methodname>
         </para></listitem>
        <listitem><para>
         <literal>PDO::FETCH_CLASS</literal>: devuelve una nueva instancia
         de la clase solicitada. El objeto se inicializa mapeando las columnas del conjunto de resultados a
         las propiedades de la clase. Este proceso ocurre antes de que se llame al
         constructor, permitiendo la población de las propiedades, independientemente de su
         visibilidad o de su marca como <literal>readonly</literal>. Si
         una propiedad no existe en la clase, se invocará el método mágico
         <link linkend="object.set">__set()</link>
         si existe; de lo contrario, se creará una propiedad pública dinámica.
         Sin embargo, cuando <constant>PDO::FETCH_PROPS_LATE</constant>
         también está especificado, el constructor se llama <emphasis>antes</emphasis> de
         que las propiedades sean pobladas.
         </para></listitem>
        <listitem><para>
         <literal>PDO::FETCH_INTO</literal> : actualiza una instancia existente
         de la clase solicitada, vinculando las columnas del conjunto de resultados a los nombres de las propiedades
         de la clase
         </para></listitem>
        <listitem><para>
         <literal>PDO::FETCH_LAZY</literal> : combina
         <literal>PDO::FETCH_BOTH</literal> y <literal>PDO::FETCH_OBJ</literal>,
         y devuelve un objeto <classname>PDORow</classname>
         que crea los nombres de propiedad del objeto a medida que se acceden.
         </para></listitem>
        <listitem><para>
         <literal>PDO::FETCH_NAMED</literal> : devuelve un array de la misma
         forma que <literal>PDO::FETCH_ASSOC</literal>, excepto que si hay
         múltiples columnas con los mismos nombres, el valor apuntado por esta clave
         será un array de todas las valores de la línea que tiene ese nombre como columna
         </para></listitem>
        <listitem><para>
         <literal>PDO::FETCH_NUM</literal> : devuelve un array indexado por el
         número de la columna como se devuelve en su conjunto de resultados,
         comenzando en 0
         </para></listitem>
        <listitem><para>
         <literal>PDO::FETCH_OBJ</literal> : devuelve un objeto anónimo con los
         nombres de propiedades que corresponden a los nombres de las columnas devueltas en el
         conjunto de resultados
         </para></listitem>
        <listitem><para>
         <literal>PDO::FETCH_PROPS_LATE</literal> : cuando se usa con
         <literal>PDO::FETCH_CLASS</literal>, el constructor de la clase es
         llamado antes de que las propiedades sean asignadas a partir de los
         valores de columna respectivos.
         </para></listitem>
       </itemizedlist>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>cursorOrientation</parameter></term>
     <listitem>
      <para>
       Para un objeto PDOStatement que representa un cursor desplazable,
       este valor determina qué línea se devolverá al llamante.
       Este valor debe ser una de las constantes
       <literal>PDO::FETCH_ORI_*</literal>, y por omisión, vale
       <literal>PDO::FETCH_ORI_NEXT</literal>. Para solicitar un cursor
       desplazable para su objeto PDOStatement, debe definir
       el atributo <literal>PDO::ATTR_CURSOR</literal> a <literal>PDO::CURSOR_SCROLL</literal>
       cuando prepare la consulta SQL con la función
       <methodname>PDO::prepare</methodname>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>cursorOffset</parameter></term>
     <listitem>
      <para>
       Para un objeto PDOStatement que representa un cursor desplazable para
       el cual el argumento <parameter>cursorOrientation</parameter> está definido
       a <literal>PDO::FETCH_ORI_ABS</literal>, este valor especifica
       el número absoluto de la línea en el conjunto de resultados que debe ser
       recuperada.
      </para>
      <para>
       Para un objeto PDOStatement que representa un cursor desplazable para
       el cual el argumento <parameter>cursorOrientation</parameter> está definido
       a <literal>PDO::FETCH_ORI_REL</literal>, este valor especifica la línea
       a recuperar relativamente a la posición del cursor antes de la llamada a la función
       <methodname>PDOStatement::fetch</methodname>.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   El valor devuelto por esta función en caso de éxito depende del tipo recuperado.
   En todos los casos, &false; se devuelve si ocurre un error o si no hay más líneas.
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  &pdo.errors;
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Recuperación de líneas utilizando diferentes métodos</title>
    <programlisting role="php">
<![CDATA[
<?php
$sth = $dbh->prepare("SELECT nom, couleur FROM fruit");
$sth->execute();

/* estilos PDOStatement::fetch */
print "PDO::FETCH_ASSOC: ";
print "Devuelve la siguiente línea como un array indexado por el nombre de las columnas\n";
$result = $sth->fetch(PDO::FETCH_ASSOC);
print_r($result);
print "\n";

print "PDO::FETCH_BOTH: ";
print "Devuelve la siguiente línea como un array indexado por el nombre y el número de la columna\n";
$result = $sth->fetch(PDO::FETCH_BOTH);
print_r($result);
print "\n";

print "PDO::FETCH_LAZY: ";
print "Devuelve la siguiente línea como objeto PDORow con los nombres de columnas como propiedades\n";
$result = $sth->fetch(PDO::FETCH_LAZY);
print_r($result);
print "\n";

print "PDO::FETCH_OBJ: ";
print "Devuelve la siguiente línea como objeto anónimo con los nombres de columnas como propiedades\n";
$result = $sth->fetch(PDO::FETCH_OBJ);
print $result->name;
print "\n";
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
PDO::FETCH_ASSOC: Devuelve la siguiente línea como un array indexado por el nombre de las columnas
Array
(
    [nom] => apple
    [couleur] => red
)

PDO::FETCH_BOTH: Devuelve la siguiente línea como un array indexado por el nombre y el número de la columna
Array
(
    [nom] => banana
    [0] => banana
    [couleur] => yellow
    [1] => yellow
)

PDO::FETCH_LAZY: Devuelve la siguiente línea como objeto PDORow con los nombres de columnas como propiedades PDORow Object
(
    [nom] => orange
    [couleur] => orange
)

PDO::FETCH_OBJ: Devuelve la siguiente línea como objeto anónimo con los nombres de columnas como propiedades kiwi
]]>
    </screen>
   </example>
   <example>
    <title>Recuperación de líneas con un cursor desplazable</title>
    <programlisting role="php">
<![CDATA[
<?php
function readDataForwards($dbh) {
    $sql = 'SELECT hand, won, bet FROM mynumbers ORDER BY BET';
    $stmt = $dbh->prepare($sql, array(PDO::ATTR_CURSOR => PDO::CURSOR_SCROLL));
    $stmt->execute();
    while ($row = $stmt->fetch(PDO::FETCH_NUM, PDO::FETCH_ORI_NEXT)) {
        $data = $row[0] . "\t" . $row[1] . "\t" . $row[2] . "\n";
        print $data;
    }
}
function readDataBackwards($dbh) {
    $sql = 'SELECT hand, won, bet FROM mynumbers ORDER BY bet';
    $stmt = $dbh->prepare($sql, array(PDO::ATTR_CURSOR => PDO::CURSOR_SCROLL));
    $stmt->execute();
    $row = $stmt->fetch(PDO::FETCH_NUM, PDO::FETCH_ORI_LAST);
    do {
        $data = $row[0] . "\t" . $row[1] . "\t" . $row[2] . "\n";
        print $data;
    } while ($row = $stmt->fetch(PDO::FETCH_NUM, PDO::FETCH_ORI_PRIOR));
}

print "Lectura hacia adelante :\n";
readDataForwards($conn);

print "Lectura hacia atrás :\n";
readDataBackwards($conn);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Lectura hacia adelante :
21    10    5
16    0     5
19    20    10

Lectura hacia atrás :
19    20    10
16    0     5
21    10    5
]]>
    </screen>
   </example>

   <example><title>Orden de construcción</title>
    <simpara>
     Cuando los objetos son recuperados mediante <constant>PDO::FETCH_CLASS</constant>,
     las propiedades del objeto se asignan primero, luego se llama al constructor
     de la clase. Sin embargo, cuando <constant>PDO::FETCH_PROPS_LATE</constant> también está especificado,
     este orden se invierte, es decir, el constructor se llama primero, luego
     las propiedades son asignadas.
    </simpara>
    <programlisting role="php">
<![CDATA[
<?php
class Person
{
    private $name;

    public function __construct()
    {
        $this->tell();
    }

    public function tell()
    {
        if (isset($this->name)) {
            echo "Soy {$this->name}.\n";
        } else {
            echo "Aún no tengo nombre.\n";
        }
    }
}

$sth = $dbh->query("SELECT * FROM people");
$sth->setFetchMode(PDO::FETCH_CLASS, 'Person');
$person = $sth->fetch();
$person->tell();
$sth->setFetchMode(PDO::FETCH_CLASS|PDO::FETCH_PROPS_LATE, 'Person');
$person = $sth->fetch();
$person->tell();
?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
Soy Alice.
Soy Alice.
Aún no tengo nombre.
Soy Bob.
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><methodname>PDO::prepare</methodname></member>
    <member><methodname>PDOStatement::execute</methodname></member>
    <member><methodname>PDOStatement::fetchAll</methodname></member>
    <member><methodname>PDOStatement::fetchColumn</methodname></member>
    <member><methodname>PDOStatement::fetchObject</methodname></member>
    <member><methodname>PDOStatement::setFetchMode</methodname></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
