<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: e440c79af15cf829549736b2a292b5f8f6887142 Maintainer: seros Status: ready -->
<!-- Reviewed: yes Maintainer: seros -->
<refentry xml:id="pdostatement.fetch" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>PDOStatement::fetch</refname>
  <refpurpose>
   Obtiene la siguiente fila de un conjunto de resultados
  </refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <type>mixed</type><methodname>PDOStatement::fetch</methodname>
   <methodparam choice="opt"><type>int</type><parameter>mode</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>cursorOrientation</parameter><initializer>PDO::FETCH_ORI_NEXT</initializer></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>cursorOffset</parameter><initializer>0</initializer></methodparam>
  </methodsynopsis>

  <para>
   Obtiene una fila de un conjunto de resultados asociado al objeto PDOStatement. El
   parámetro <parameter>mode</parameter> determina cómo PDO devuelve
   la fila.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>mode</parameter></term>
     <listitem>
      <para>
       Controla cómo se devolverá la siguiente fila al llamador. Este valor
       debe ser una de las constantes <constant>PDO::FETCH_*</constant>,
       estando predeterminado <constant>PDO::ATTR_DEFAULT_FETCH_MODE</constant>
       (el cual por defecto es <constant>PDO::FETCH_BOTH</constant>).
       <itemizedlist>
        <listitem><para>
         <constant>PDO::FETCH_ASSOC</constant>: devuelve un array indexado por los nombres de las
         columnas del conjunto de resultados.
         </para></listitem>
        <listitem><para>
         <constant>PDO::FETCH_BOTH</constant> (predeterminado): devuelve un array indexado tanto
         por nombre de columna, como numéricamente con índice de base 0 tal como fue devuelto en el
         conjunto de resultados.
         </para></listitem>
        <listitem><para>
         <constant>PDO::FETCH_BOUND</constant>: devuelve &true; y asigna los
         valores de las columnas del conjunto de resultados a las variables de PHP a las que
         fueron vinculadas con el método <function>PDOStatement::bindColumn</function>.
         </para></listitem>
        <listitem><para>
         <constant>PDO::FETCH_CLASS</constant>: devuelve una nueva instancia de la
         clase solicitada, haciendo corresponder las columnas del conjunto de resultados con los
         nombres de las propiedades de la clase, y llamando al constructor después, a menos
         que también se proporcione <constant>PDO::FETCH_PROPS_LATE</constant>.
         Si <parameter>mode</parameter>
         incluye PDO::FETCH_CLASSTYPE (por ejemplo, <literal>PDO::FETCH_CLASS |
         PDO::FETCH_CLASSTYPE</literal>), entonces el nombre de la clase
         se determina a partir del valor de la primera columna.
         </para></listitem>
        <listitem><para>
         <constant>PDO::FETCH_INTO</constant>: actualiza una instancia existente
         de la clase solicitada, haciendo coincidir el nombre de las columnas con los
         nombres de las propiedades de la clase.
         </para></listitem>
        <listitem><para>
         <constant>PDO::FETCH_LAZY</constant>: combina
         <constant>PDO::FETCH_BOTH</constant> y <constant>PDO::FETCH_OBJ</constant>,
         creando los nombres de la variables del objeto tal como se accedieron.
         </para></listitem>
        <listitem><para>
         <constant>PDO::FETCH_NAMED</constant>: devuelve un array con la misma
         forma que <constant>PDO::FETCH_ASSOC</constant>, excepto que si hubiera
         múltiples columnas con el mismo nombre, el valor al que hace referencia dicha
         clave será un array con todos los valores de la fila de tuviera ese
         nombre de columna.
         </para></listitem>
        <listitem><para>
         <constant>PDO::FETCH_NUM</constant>: devuelve un array indexado por el
         número de columna tal como fue devuelto en el conjunto de resultados, comenzando por
         la columna 0.
         </para></listitem>
        <listitem><para>
         <constant>PDO::FETCH_OBJ</constant>: devuelve un objeto anónimo con
         nombres de propiedades que se corresponden a los nombres de las columnas devueltas
         en el conjunto de resultados.
         </para></listitem>
        <listitem><para>
         <constant>PDO::FETCH_PROPS_LATE</constant>: cuando se usa con
         <constant>PDO::FETCH_CLASS</constant>, se llama al constructor de la
         clase antes de que las proiedades sean asignadas desde los valores de la
         columna respectiva.
         </para></listitem>
       </itemizedlist>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>cursorOrientation</parameter></term>
     <listitem>
      <para>
       Para un objeto PDOStatement que represente un cursor desplazable, este
       valor determina qué columna será devuelta por el llamador. Este valor
       debe ser una de las constantes <constant>PDO::FETCH_ORI_*</constant>,
       siendo la predeterminada <constant>PDO::FETCH_ORI_NEXT</constant>. Para solicitar un
       cursor desplazable para el objeto PDOStatement, se debe establecer el
       atributo <constant>PDO::ATTR_CURSOR</constant> a
       <constant>PDO::CURSOR_SCROLL</constant> cuando se prepare la sentencia SQL
       con <function>PDO::prepare</function>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>cursorOffset</parameter></term>
     <listitem>
      <para>
       Para un objeto PDOStatement que represente un cursor desplazable para el cual
       el parámetro <literal>cursorOrientation</literal> está establecido a
       <constant>PDO::FETCH_ORI_ABS</constant>, este valor especifica el número
       absoluto de la fila del conjunto de resultados que se desea obtener.
      </para>
      <para>
       Para un objeto PDOStatement que represente un cursor desplazable para el cual
       el parámetro <literal>cursorOrientation</literal> está establecido a
       <constant>PDO::FETCH_ORI_REL</constant>, este valor especifica la
       fila a obtener relativa a la posición del cursor antes de que
       se llame a <function>PDOStatement::fetch</function>.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   El valor de retorno de esta función en caso de éxito depende del tipo de obtención. En
   todos los casos, se devuelve &false; en caso de error o si no existen más filas por devolver.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example><title>Obtención de filas usando diferentes tipos de obtención</title>
    <programlisting role="php">
<![CDATA[
<?php
$gsent = $gbd->prepare("SELECT name, colour FROM fruit");
$gsent->execute();

/* Prueba de tipos de PDOStatement::fetch */
print("PDO::FETCH_ASSOC: ");
print("Devolver la siguiente fila como un array indexado por nombre de colunmna\n");
$result = $gsent->fetch(PDO::FETCH_ASSOC);
print_r($result);
print("\n");

print("PDO::FETCH_BOTH: ");
print("Devolver la siguiente fila como un array indexado por nombre y número de columna\n");
$result = $gsent->fetch(PDO::FETCH_BOTH);
print_r($result);
print("\n");

print("PDO::FETCH_LAZY: ");
print("Devolver la siguiente fila como un objeto anónimo con nombres de columna como propiedades\n");
$result = $gsent->fetch(PDO::FETCH_LAZY);
print_r($result);
print("\n");

print("PDO::FETCH_OBJ: ");
print("Devolver la siguiente fila como un objeto anónimo con nombres de columna como propiedades\n");
$result = $gsent->fetch(PDO::FETCH_OBJ);
print $result->name;
print("\n");
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
PDO::FETCH_ASSOC: Devolver la siguiente fila como un array indexado por nombre de colunmna
Array
(
    [name] => apple
    [colour] => red
)

PDO::FETCH_BOTH: Devolver la siguiente fila como un array indexado por nombre y número de columna
Array
(
    [name] => banana
    [0] => banana
    [colour] => yellow
    [1] => yellow
)

PDO::FETCH_LAZY: Devolver la siguiente fila como un objeto anónimo con nombres de columna como propiedades
PDORow Object
(
    [name] => orange
    [colour] => orange
)

PDO::FETCH_OBJ: Devolver la siguiente fila como un objeto anónimo con nombres de columna como propiedades
kiwi
]]>
    </screen>
   </example>
   <example><title>Obtener filas con un cursor desplazable</title>
    <programlisting role="php">
<![CDATA[
<?php
function leerDatosHaciaAdelante($gbd) {
  $sql = 'SELECT hand, won, bet FROM mynumbers ORDER BY BET';
  try {
    $sentencia = $gbd->prepare($sql, array(PDO::ATTR_CURSOR => PDO::CURSOR_SCROLL));
    $sentencia->execute();
    while ($fila = $sentencia->fetch(PDO::FETCH_NUM, PDO::FETCH_ORI_NEXT)) {
      $datos = $fila[0] . "\t" . $fila[1] . "\t" . $fila[2] . "\n";
      print $datos;
    }
    $sentencia = null;
  }
  catch (PDOException $e) {
    print $e->getMessage();
  }
}
function leerDatosHaciaAtrás($gbd) {
  $sql = 'SELECT hand, won, bet FROM mynumbers ORDER BY bet';
  try {
    $sentencia = $gbd->prepare($sql, array(PDO::ATTR_CURSOR => PDO::CURSOR_SCROLL));
    $sentencia->execute();
    $fila = $sentencia->fetch(PDO::FETCH_NUM, PDO::FETCH_ORI_LAST);
    do {
      $datos = $fila[0] . "\t" . $fila[1] . "\t" . $fila[2] . "\n";
      print $datos;
    } while ($fila = $sentencia->fetch(PDO::FETCH_NUM, PDO::FETCH_ORI_PRIOR));
    $sentencia = null;
  }
  catch (PDOException $e) {
    print $e->getMessage();
  }
}

print "Leyendo hacia adelante:\n";
leerDatosHaciaAdelante($conexión);

print "Leyendo hacia atrás:\n";
leerDatosHaciaAtrás($conexión);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Reading forwards:
21    10    5
16    0     5
19    20    10

Reading backwards:
19    20    10
16    0     5
21    10    5
]]>
    </screen>
   </example>

   <example><title>Orden de construcción</title>
    <simpara>
     Cuando los objetos se obtienen mediante <constant>PDO::FETCH_CLASS</constant>, las
     propiedades del objeto se asignan primero, y luego se invoca al constructor de la
     clase. Si también se proporciona <constant>PDO::FETCH_PROPS_LATE</constant>, este
     orden se invierte, es decir, primero se llama al constructor y luego se
     asignan las propiedades.
    </simpara>
    <programlisting role="php">
<![CDATA[
<?php
class Persona
{
    private $name;

    public function __construct()
    {
        $this->decir();
    }

    public function decir()
    {
        if (isset($this->name)) {
            echo "Soy {$this->name}.\n";
        } else {
            echo "Aún no tengo nombre.\n";
        }
    }
}

$sth = $dbh->query("SELECT * FROM people");
$sth->setFetchMode(PDO::FETCH_CLASS, 'Persona');
$persona = $sth->fetch();
$persona->decir();
$sth->setFetchMode(PDO::FETCH_CLASS|PDO::FETCH_PROPS_LATE, 'Persona');
$persona = $sth->fetch();
$persona->decir();
?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
Soy Alice.
Soy Alice.
Aún no tengo nombre.
Soy Bob.
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>PDO::prepare</function></member>
    <member><function>PDOStatement::execute</function></member>
    <member><function>PDOStatement::fetchAll</function></member>
    <member><function>PDOStatement::fetchColumn</function></member>
    <member><function>PDOStatement::fetchObject</function></member>
    <member><function>PDOStatement::setFetchMode</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
