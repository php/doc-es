<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 661e6858acade9f5a08fc8f9c07b605f42f4a700 Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: no -->
<refentry xml:id="pdostatement.nextrowset" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>PDOStatement::nextRowset</refname>
  <refpurpose>
   Avance al siguiente conjunto de resultados de un manejador de conjuntos de resultados múltiples
  </refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis role="PDOStatement">
   <modifier>public</modifier> <type>bool</type><methodname>PDOStatement::nextRowset</methodname>
   <void/>
  </methodsynopsis>

  <para>
   Algunas bases de datos soportan procedimientos almacenados que retornan
   más de un conjunto de resultados (también conocido como juegos de resultados).
   <methodname>PDOStatement::nextRowset</methodname> permite
   acceder al segundo y siguientes conjuntos de resultados asociados con el objeto
   PDOStatement. Cada conjunto de resultados tiene diferentes juegos de columnas
   desde el conjunto de resultados.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  &no.function.parameters;
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.success;
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Recuperación de múltiples conjuntos de resultados retornados por un procedimiento almacenado</title>
    <para>
     El siguiente ejemplo muestra cómo llamar a un procedimiento almacenado,
     <literal>MULTIPLE_ROWSETS</literal>, que retorna tres conjuntos de resultados.
     Un ciclo <link linkend="control-structures.do.while">do-while</link>
     es utilizado para recorrer el método
     <methodname>PDOStatement::nextRowset</methodname>, que retorna &false; y
     termina el ciclo cuando no hay más conjuntos de resultados disponibles.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
$sql = 'CALL multiple_rowsets()';
$stmt = $conn->query($sql);
$i = 1;
do {
    $rowset = $stmt->fetchAll(PDO::FETCH_NUM);
    if ($rowset) {
        printResultSet($rowset, $i);
    }
    $i++;
} while ($stmt->nextRowset());

function printResultSet(&$rowset, $i) {
    print "Conjunto de resultados $i:\n";
    foreach ($rowset as $row) {
        foreach ($row as $col) {
            print $col . "\t";
        }
        print "\n";
    }
    print "\n";
}
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Conjunto de resultados 1:
apple    red
banana   yellow

Conjunto de resultados 2:
orange   orange    150
banana   yellow    175

Conjunto de resultados 3:
lime     green
apple    red
banana   yellow
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><methodname>PDOStatement::columnCount</methodname></member>
    <member><methodname>PDOStatement::execute</methodname></member>
    <member><methodname>PDOStatement::getColumnMeta</methodname></member>
    <member><methodname>PDO::query</methodname></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
