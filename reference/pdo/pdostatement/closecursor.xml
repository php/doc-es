<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 082ddc19f53e6e254010de1a1fbbe485ff744ec1 Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: no -->
<refentry xml:id="pdostatement.closecursor" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>PDOStatement::closeCursor</refname>
  <refpurpose>
   Cierra el cursor, permitiendo que la consulta pueda ser ejecutada de nuevo
  </refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis role="PDOStatement">
   <modifier>public</modifier> <type>bool</type><methodname>PDOStatement::closeCursor</methodname>
   <void/>
  </methodsynopsis>

  <para>
   <methodname>PDOStatement::closeCursor</methodname> libera la conexión
   al servidor, permitiendo así que otras consultas SQL puedan ser ejecutadas, pero
   deja la consulta en un estado que permite su ejecución posterior.
  </para>
  <para>
   Este método es útil para los drivers de bases de datos que no soportan
   la ejecución de objetos PDOStatement cuando un objeto PDOStatement ejecutado
   previamente aún tiene filas no recuperadas. Si su driver de base de datos sufre
   de esta limitación, el problema se manifestará por sí mismo en un error fuera de secuencia.
  </para>
  <para>
   <methodname>PDOStatement::closeCursor</methodname> se implementa bien
   como un método específico del driver con máxima eficiencia, o como una solución genérica
   si no se ha instalado ninguna función específica del driver.
   Semánticamente, la función genérica PDO equivale
   a escribir el siguiente código en su script PHP:
   <programlisting role="php">
<![CDATA[
<?php
do {
    while ($stmt->fetch())
        ;
    if (!$stmt->nextRowset())
        break;
} while (true);
?>
]]>
   </programlisting>
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  &no.function.parameters;
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.success;
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  &pdo.errors;
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Ejemplo con <methodname>PDOStatement::closeCursor</methodname></title>
    <para>
     En el siguiente ejemplo, el objeto PDOStatement <varname>$stmt</varname>
     devuelve múltiples filas, pero la aplicación recupera únicamente
     la primera fila, dejando el objeto PDOStatement en un estado donde aún quedan
     filas no recuperadas. Para asegurar que la aplicación funcione
     con todos los drivers de bases de datos, el autor inserta una llamada a la función
     <methodname>PDOStatement::closeCursor</methodname> en
     <varname>$stmt</varname> antes de la ejecución del objeto PDOStatement
     <varname>$otherStmt</varname>.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
/* Creación de un objeto PDOStatement */
$stmt = $dbh->prepare('SELECT foo FROM bar');

/* Creación de un segundo objeto PDOStatement */
$otherStmt = $dbh->prepare('SELECT foobaz FROM foobar');

/* Ejecución de la primera consulta */
$stmt->execute();

/* Recuperación de la primera fila únicamente desde el resultado */
$stmt->fetch();

/* La siguiente llamada a closeCursor() puede ser requerida por algunos drivers */
$stmt->closeCursor();

/* Ahora, podemos ejecutar la segunda consulta */
$otherStmt->execute();
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><methodname>PDOStatement::execute</methodname></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
