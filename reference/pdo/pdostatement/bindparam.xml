<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 14af302c9c0e561fa6f9cdd956268758ba9a89c5 Maintainer: alejandrorodas Status: ready -->
<!-- Reviewed: yes Maintainer: seros -->
<refentry xml:id="pdostatement.bindparam" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>PDOStatement::bindParam</refname>
  <refpurpose>
   Vincula un parámetro al nombre de variable especificado
  </refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <type>bool</type><methodname>PDOStatement::bindParam</methodname>
   <methodparam><type>mixed</type><parameter>parameter</parameter></methodparam>
   <methodparam><type>mixed</type><parameter role="reference">variable</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>data_type</parameter><initializer>PDO::PARAM_STR</initializer></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>length</parameter></methodparam>
   <methodparam choice="opt"><type>mixed</type><parameter>driver_options</parameter></methodparam>
  </methodsynopsis>
  <para>
   Vincula una variable de PHP a un parámetro de sustitución con nombre o de signo de interrogación
   correspondiente de la sentencia SQL que fue usada para preparar la sentencia. A diferencia de
   <function>PDOStatement::bindValue</function>, la variable es vinculada como
   una referencia y solamente será evaluada en el momento en el que
   se llame a <function>PDOStatement::execute</function>.
  </para>
  <para>
   Muchos parámetros son de entrada, es decir, que son usados en un modo
   de sólo lectura para construir la consulta. Algunos controladores admiten la
   invocación de procedimientos almacenados que devuelven datos como parámetros de salida,
   y algunos también como parámetros de entrada/salida, donde se envían datos y son
   actualizados al recibirlos.
  </para>

 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>parameter</parameter></term>
     <listitem>
      <para>
       El identificador del parámetro. Para sentencias preparadas que usen parámetros de
       sustición con nombre, esto será un nombre de parámetro con la forma
       <varname>:nombre</varname>. Para sentencias preparadas que usen parámetros de
       sustición de signos de interrogación, esto será la posición índice-1 del
       parámetro.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>variable</parameter></term>
     <listitem>
      <para>
       Nombre de la variable de PHP a vincular al parámetro de la sentencia SQL.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>data_type</parameter></term>
     <listitem>
      <para>
       El tipo de datos explícito para el parámetro, usando las <link
       linkend="pdo.constants">constantes
       <constant>PDO::PARAM_*</constant></link>.
       Para devolver un parámetro INOUT desde un procedimiento almacenado,
       se ha de usar el operador OR a nivel de bits para establecer los bits de
       PDO::PARAM_INPUT_OUTPUT para el parámetro <parameter>data_type</parameter>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>length</parameter></term>
     <listitem>
      <para>
       La longitud del tipo de datos. Para indicar que el parámetro es un parámetro
       OUT de un procedimiento almacenado, se debe establecer explícitamente la
       longitud.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>driver_options</parameter></term>
     <listitem>
      <para>

      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.success;
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <example><title>Ejecutar una sentencia preparada con parámetros de sustitución con nombre</title>
   <programlisting role="php">
<![CDATA[
<?php
/* Ejecutar una sentencia preparada vinculando varialbes de PHP */
$calorías = 150;
$color = 'red';
$gsent = $gbd->prepare('SELECT name, colour, calories
    FROM fruit
    WHERE calories < :calories AND colour = :colour');
$gsent->bindParam(':calories', $calorías, PDO::PARAM_INT);
$gsent->bindParam(':colour', $color, PDO::PARAM_STR, 12);
$gsent->execute();
?>
]]>
   </programlisting>
  </example>

  <example><title>Ejecutar una sentencia preparada con parámetros de sustitución de signos de interrogación</title>
   <programlisting role="php">
<![CDATA[
<?php
/* Ejecutar una sentencia preparada vinculando varialbes de PHP */
$calorías = 150;
$color = 'red';
$gsent = $gbd->prepare('SELECT name, colour, calories
    FROM fruit
    WHERE calories < ? AND colour = ?');
$gsent->bindParam(1, $calorías, PDO::PARAM_INT);
$gsent->bindParam(2, $color, PDO::PARAM_STR, 12);
$gsent->execute();
?>
]]>
   </programlisting>
  </example>

  <!--
  <example><title>Pass a NULL value into a prepared statement</title>
   <programlisting role="php">
<![CDATA[
<?php
/* Execute a prepared statement by binding PHP variables */
$calorías = 150;
$color = 'red';
$sth = $dbh->prepare('SELECT name, colour, calories
    FROM fruit
    WHERE calories < :calories AND colour = :colour');
$sth->bindParam(':calories', $calorías, PDO::PARAM_INT);

/* Find fruit with a NULL value in the colour column */
$sth->bindParam(':colour', $color, PDO::PARAM_NULL);

$sth->execute();
?>
]]>
   </programlisting>
  </example>
-->
  <example><title>Llamar a un procedimiento almacenado con un parámetro INOUT</title>
   <programlisting role="php">
<![CDATA[
<?php
/* Llamar a un procedimiento almacenado con un parámetro INOUT */
$color = 'red';
$gsent = $gbd->prepare('CALL puree_fruit(?)');
$gsent->bindParam(1, $color, PDO::PARAM_STR|PDO::PARAM_INPUT_OUTPUT, 12);
$gsent->execute();
print("Después de hacer puré la fruta, el color es: $color");
?>
]]>
   </programlisting>
  </example>

 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>PDO::prepare</function></member>
    <member><function>PDOStatement::execute</function></member>
    <member><function>PDOStatement::bindValue</function></member>
   </simplelist>
  </para>

 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
