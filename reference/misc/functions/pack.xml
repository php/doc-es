<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: ad0f1eaa6510e1d11231f46515ca513d2cd097c4 Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: yes -->

<refentry xml:id="function.pack" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>pack</refname>
  <refpurpose>Compacta datos en una cadena binaria</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>string</type><methodname>pack</methodname>
   <methodparam><type>string</type><parameter>format</parameter></methodparam>
   <methodparam rep="repeat"><type>mixed</type><parameter>values</parameter></methodparam>
  </methodsynopsis>
  <para>
   Compacta los argumentos <parameter>args</parameter>
   en una cadena binaria, siguiendo el formato <parameter>format</parameter>.
  </para>
  <para>
   El concepto proviene de Perl y todo el formato funciona
   de la misma forma que en Perl, pero algunos formatos aún faltan
   (como "<literal>u</literal>").
  </para>
  <para>
   Tenga en cuenta que la distinción entre signado y no signado
   solo afecta a la función <function>unpack</function>, mientras que
   la función <function>pack</function> proporcionará el mismo
   resultado para ambos formatos.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>format</parameter></term>
     <listitem>
      <para>
       La &string; <parameter>format</parameter> consiste en códigos
       de formato seguidos por un argumento repetidor opcional. El repetidor
       puede ser un valor entero o <literal>*</literal> para una repetición hasta el final de los datos de entrada. Para a, A, h, H,
       el repetidor especifica cuántos caracteres de un dato se toman, para
       @, es la posición absoluta donde se insertan los próximos datos, para
       todo lo demás, el repetidor especifica cuántos argumentos de datos son
       consumidos y compactados en la cadena binaria resultante.
      </para>
      <para>
       Los formatos actualmente aceptados son:
       <table>
        <title>Caracteres de formato para <function>pack</function></title>
        <tgroup cols="2">
         <thead>
          <row>
           <entry>Código</entry>
           <entry>Descripción</entry>
          </row>
         </thead>
         <tbody>
          <row>
           <entry>a</entry>
           <entry>NUL - Una cadena completada con &null;</entry>
          </row>
          <row>
           <entry>A</entry>
           <entry>SPACE - Una cadena completada con un espacio</entry></row>
          <row>
           <entry>h</entry>
           <entry>Cadena hexadecimal h, bit de menor peso en primer lugar</entry></row>
          <row>
           <entry>H</entry>
           <entry>Cadena hexadecimal H, bit de mayor peso en primer lugar</entry></row>
          <row>
           <entry>c</entry>
           <entry>Carácter signado</entry></row>
          <row>
           <entry>C</entry>
           <entry>Carácter no signado</entry></row>
          <row>
           <entry>s</entry>
           <entry>entero corto signado (siempre 16 bits, orden de bytes dependiente de la máquina)</entry>
          </row>
          <row>
           <entry>S</entry>
           <entry>entero corto no signado (siempre 16 bits, orden de bytes dependiente de la máquina)</entry>
          </row>
          <row>
           <entry>n</entry>
           <entry>entero corto no signado (siempre 16 bits, orden de bytes big endian)</entry>
          </row>
          <row>
           <entry>v</entry>
           <entry>entero corto no signado (siempre 16 bits, orden de bytes little endian)</entry>
          </row>
          <row>
           <entry>i</entry>
           <entry>entero signado (tamaño y orden de bytes dependientes de la máquina)</entry>
          </row>
          <row>
           <entry>I</entry>
           <entry>entero no signado (tamaño y orden de bytes dependientes de la máquina)</entry>
          </row>
          <row>
           <entry>l</entry>
           <entry>entero largo signado (siempre 32 bits, orden de bytes dependiente de la máquina)</entry>
          </row>
          <row>
           <entry>L</entry>
           <entry>entero largo no signado (siempre 32 bits, orden de bytes dependiente de la máquina)</entry>
          </row>
          <row>
           <entry>N</entry>
           <entry>entero largo no signado (siempre 32 bits, orden de bytes big endian)</entry>
          </row>
          <row>
           <entry>V</entry>
           <entry>entero largo no signado (siempre 32 bits, orden de bytes little endian)</entry>
          </row>
          <row>
           <entry>q</entry>
           <entry>entero doblemente largo signado (siempre 64 bits, orden de bytes dependiente de la máquina)</entry>
          </row>
          <row>
           <entry>Q</entry>
           <entry>entero doblemente largo no signado (siempre 64 bits, orden de bytes dependiente de la máquina)</entry>
          </row>
          <row>
           <entry>J</entry>
           <entry>entero doblemente largo no signado (siempre 64 bits, orden de bytes big endian)</entry>
          </row>
          <row>
           <entry>P</entry>
           <entry>entero doblemente largo no signado (siempre 64 bits, orden de bytes little endian)</entry>
          </row>
          <row>
           <entry>f</entry>
           <entry>número de coma flotante (tamaño y representación dependientes de la máquina)</entry>
          </row>
          <row>
           <entry>g</entry>
           <entry>número de coma flotante (tamaño dependiente de la máquina, orden de bytes little endian)</entry>
          </row>
          <row>
           <entry>G</entry>
           <entry>número de coma flotante (tamaño dependiente de la máquina, orden de bytes big endian)</entry>
          </row>
          <row>
           <entry>d</entry>
           <entry>número de coma flotante doble (tamaño y representación dependientes de la máquina)</entry>
          </row>
          <row>
           <entry>e</entry>
           <entry>número de coma flotante doble (tamaño dependiente de la máquina, orden de bytes little endian)</entry>
          </row>
          <row>
           <entry>E</entry>
           <entry>número de coma flotante doble (tamaño dependiente de la máquina, orden de bytes big endian)</entry>
          </row>
          <row>
           <entry>x</entry>
           <entry>carácter NUL</entry>
          </row>
          <row>
           <entry>X</entry>
           <entry>Retrocede un carácter</entry>
          </row>
          <row>
           <entry>Z</entry>
           <entry>La cadena terminada por NUL (ASCIIZ) será completada con el valor NULL</entry>
          </row>
          <row>
           <entry>@</entry>
           <entry>Rellena con NUL hasta la posición absoluta</entry>
          </row>
         </tbody>
        </tgroup>
       </table>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>values</parameter></term>
     <listitem>
      <para>
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Devuelve una &string; binaria que contiene los datos.
  </para>
 </refsect1>

 <refsect1 role="changelog"><!-- {{{ -->
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>8.0.0</entry>
       <entry>
        Esta función ya no devuelve &false; en caso de error.
       </entry>
      </row>
      <row>
       <entry>7.2.0</entry>
       <entry>
        Los tipos <type>float</type> y <type>double</type> admiten Big Endian y Little Endian.
       </entry>
      </row>
      <row>
       <entry>7.0.15, 7.1.1</entry>
       <entry>
        Se han añadido los códigos "e", "E", "g" y "G" para activar la
        compatibilidad con el orden de bytes para los números de coma flotante
        de simple y doble precisión.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1><!-- }}} -->

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Ejemplo con <function>pack</function></title>
    <programlisting role="php">
<![CDATA[
<?php
$binarydata = pack("nvc*", 0x1234, 0x5678, 65, 66);
?>
]]>
    </programlisting>
    <para>
     La cadena binaria resultante tendrá 6 bytes de longitud,
     y contendrá la secuencia 0x12, 0x34, 0x78, 0x56, 0x41, 0x42.
    </para>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <caution>
   <simpara>
    Los códigos de formato <literal>q</literal>, <literal>Q</literal>, <literal>J</literal> y <literal>P</literal> no están disponibles
    en las versiones de PHP de 32 bits.
   </simpara>
  </caution>
  <caution>
   <para>Tenga en cuenta que PHP almacena internamente los valores <type>int</type> como valores
    signados dependientes de la máquina.
    Las operaciones sobre enteros que llevan a números fuera del espacio de
    definición del <type>int</type> serán almacenados como <type>float</type>.
    Al empaquetar estos flotantes en enteros, se convierten al tipo entero. Esto puede
    llevar potencialmente a una representación inesperada de los bytes.
   </para>
   <para>El caso más clásico es el empaquetado de números no signados que serían
    representables en el tipo <type>int</type> si este fuera no signado.
    En los sistemas con un <type>int</type> de 32 bits, la conversión
    resulta en un byte idéntico al que si el tipo <type>int</type> fuera no signado
    (aunque esto sigue dependiendo de la implementación no signada a signada, del estándar C).
    En los sistemas con un <type>int</type> de 64 bits, el
    <type>float</type> no suele tener una mantisa lo suficientemente amplia para contener el valor
    sin pérdida de precisión. Si estos sistemas también poseen un tipo C nativo
    <literal>int</literal> de 64 bits (la mayoría de los *NIX no lo tienen), la única forma
    de usar el formato de empaquetado <literal>I</literal> en valores altos es crear
    valores <type>int</type> negativos con la misma representación de bytes que la
    valor no signado deseado correspondiente.
   </para>
  </caution>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>unpack</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
