<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 2485376b5b3d6b40e5c0d4e198ab5ff2a142425c Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: yes Maintainer: girgias -->

<sect2 xml:id="migration70.incompatible.error-handling">
 <title>Modificaciones aportadas a la gestión de errores y excepciones</title>

 <para>
  Numerosos errores fatales y recuperables han sido convertidos en excepciones
  en PHP 7. Estas excepciones de error heredan de la clase <classname>Error</classname>,
  que a su vez implementa la interfaz <classname>Throwable</classname> (la nueva
  interfaz base de la que todas las excepciones heredan).
 </para>

 <para>
  Esto significa que los manejadores de errores personalizados pueden no ser
  invocados ya que las excepciones pueden ser lanzadas en su lugar (provocando
  nuevos errores irrecuperables para las excepciones <classname>Error</classname>
  no interceptadas).
 </para>

 <para>
  Una descripción más completa de cómo funcionan los errores en PHP 7
  se encuentra <link linkend="language.errors.php7"> en la página de errores de PHP 7</link>.
  Esta guía de migración simplemente enumerará los cambios que afectan la
  retrocompatibilidad.
 </para>

 <sect3 xml:id="migration70.incompatible.error-handling.set-exception-handler">
  <title>
   <function>set_exception_handler</function> ya no está garantizado para recibir objetos <classname>Exception</classname>
  </title>

  <para>
   El código que implementa un manejador de excepciones inscrito con
   <function>set_exception_handler</function> usando una declaración de tipo
   <classname>Exception</classname> provocará un error fatal cuando un objeto
   <classname>Error</classname> es lanzado.
  </para>

  <para>
   Si el manejador debe funcionar tanto con PHP 5 como con 7, debería
   eliminar la declaración de tipo del manejador, mientras que el código que se migra
   para funcionar exclusivamente en PHP 7 puede simplemente reemplazar la declaración
   de tipo <classname>Exception</classname> por <classname>Throwable</classname>.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
// Código para PHP 5 que fallará.
function handler(Exception $e) { /* ... */ }
set_exception_handler('handler');

// Compatible con PHP 5 y 7.
function handler($e) { /* ... */ }

// Solo PHP 7.
function handler(Throwable $e) { /* ... */ }
?>
]]>
   </programlisting>
  </informalexample>
 </sect3>

 <sect3 xml:id="migration70.incompatible.error-handling.constructors">
  <title>Los constructores internos lanzan excepciones en caso de fallo</title>

  <para>
   Anteriormente, algunas clases internas devolvían &null; o un objeto
   inutilizable cuando el constructor fallaba. Todas las clases internas
   lanzarán ahora una <classname>Exception</classname> en este caso de la
   misma manera que las clases de usuario.
  </para>
 </sect3>

 <sect3 xml:id="migration70.incompatible.error-handling.parse">
  <title>Los errores de análisis lanzan una <classname>ParseError</classname></title>

  <para>
   Los errores del analizador ahora lanzan un objeto <classname>ParseError</classname>.
   El manejo de errores para <function>eval</function> ahora debe incluir
   un bloque &catch; que pueda manejar este error.
  </para>
 </sect3>

 <sect3 xml:id="migration70.incompatible.error-handling.strict">
  <title>Cambios de severidad de los avisos E_STRICT</title>

  <para>
   Todos los avisos <constant>E_STRICT</constant> han sido reclasificados a otros niveles.
   La constante <constant>E_STRICT</constant> se conserva, por lo que las llamadas como
   <literal>error_reporting(E_ALL|E_STRICT)</literal> no provocarán errores.
  </para>
  <para>
   <table>
    <title>Cambios de severidad de los avisos <constant>E_STRICT</constant></title>
     <tgroup cols="2">
      <thead>
       <row>
        <entry>Situación</entry>
        <entry>Nuevo nivel/comportamiento</entry>
       </row>
      </thead>
      <tbody>
       <row>
        <entry>Indexación por un recurso</entry>
        <entry><constant>E_NOTICE</constant></entry>
       </row>
       <row>
        <entry>Métodos estáticos abstractos</entry>
        <entry>Aviso eliminado, no dispara ningún error</entry>
       </row>
       <row>
        <entry>"Redefinir" un constructor</entry>
        <entry>Aviso eliminado, no dispara ningún error</entry>
       </row>
       <row>
        <entry>Incompatibilidad de firma durante la herencia</entry>
        <entry><constant>E_WARNING</constant></entry>
       </row>
       <row>
        <entry>Misma propiedad (compatible) en dos rasgos usados</entry>
        <entry>Aviso eliminado, no dispara ningún error</entry>
       </row>
       <row>
        <entry>Acceso a una propiedad estática de manera no estática</entry>
        <entry><constant>E_NOTICE</constant></entry>
       </row>
       <row>
        <entry>Solo las variables deben ser asignadas por referencia</entry>
        <entry><constant>E_NOTICE</constant></entry>
       </row>
       <row>
        <entry>Solo las variables deben ser pasadas por referencia</entry>
        <entry><constant>E_NOTICE</constant></entry>
       </row>
       <row>
        <entry>Llamada a métodos no estáticos de manera estática</entry>
        <entry><constant>E_DEPRECATED</constant></entry>
       </row>
      </tbody>
     </tgroup>
    </table>
   </para>
 </sect3>
</sect2>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
