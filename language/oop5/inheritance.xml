<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 081cf71ecb97b239c1e07beaadb71af0b0c42764 Maintainer: jpberdejo Status: ready -->
<!-- Reviewed: no -->

 <sect1 xml:id="language.oop5.inheritance" xmlns="http://docbook.org/ns/docbook">
  <title>Herencia de Objetos</title>
  <para>
   La herencia es un principio de programación bien establecido y PHP hace uso
   de él en su modelado de objetos. Este principio afectará la manera
   en que muchas clases y objetos se relacionan unas con otras.
  </para>
  <para>
   Por ejemplo, cuando se extiende una clase, la subclase hereda todos los
   métodos públicos y protegidos de la clase padre. A menos que una clase sobrescriba
   esos métodos, mantendrán su funcionalidad original.
  </para>
  <para>
   Esto es útil para la definición y abstracción de la funcionalidad y permite la
   implementación de funcionalidad adicional en objetos similares sin la
   necesidad de reimplementar toda la funcionalidad compartida.
  </para>
  <para>
   Los métodos privados de una clase padre no son accesibles para una clase hija. Como resultado,
   las clases hijas pueden reimplementar un método privado sin tener en cuenta las reglas de
   herencia normales. Antes de PHP 8.0.0, sin embargo, se aplicaban las restricciones <literal>final</literal> y <literal>static</literal>
   a los métodos privados. A partir de PHP 8.0.0, la única restricción de métodos privados
   es <literal>private final</literal> que se aplica en el constructor de la clase, ya que
   es una forma común de "deshabilitar" el constructor cuando es usado en métodos estáticos de fábrica (Patrón Factory).
  </para>
 <para>
  La <link linkend="language.oop5.visibility">visibilidad</link>
  de los métodos, propiedades y constantes pueden ser relajarse, por ejemplo,
  un méetodo <literal>protected</literal> puede marcase como
  <literal>public</literal>, pero no pueden restringirse, por ejemplo.
  marcando una propiedad <literal>public</literal> como <literal>private</literal>.
 </para>

  <note>
   <para>
    A menos que la carga automática sea utilizada, entonces las clases deben ser definidas antes de ser
    usadas. Si una clase se extiende a otra, entonces la clase padre debe ser declarada
    antes de la estructura de clase hija. Esta regla se aplica a las clases que heredan
    de otras clases e interfaces.
   </para>
  </note>
  <note>
   <para>
    No está permitido sobrescribir una propiedad de lectura-escritura con una <link linkend="language.oop5.properties.readonly-properties">propiedad de sólo lectura</link> o viceversa.
    <example>
     <programlisting role="php">
<![CDATA[
<?php

class A {
    public int $prop;
}
class B extends A {
    // Ilegal: lectura-escritura -> sólo lectura
    public readonly int $prop;
}
?>
]]>
     </programlisting>
    </example>
   </para>
  </note>

  <sect2 xml:id="language.oop5.inheritance.examples">
   <example xml:id="language.oop5.inheritance.examples.ex1">
    <title>Ejemplo de herencia</title>
     <programlisting role="php">
<![CDATA[
<?php

class Foo
{
    public function printItem($string)
    {
        echo 'Foo: ' . $string . PHP_EOL;
    }

    public function printPHP()
    {
        echo 'PHP is great.' . PHP_EOL;
    }
}

class bar extends Foo
{
    public function printItem($string)
    {
        echo 'Bar: ' . $string . PHP_EOL;
    }
}

$foo = new Foo();
$bar = new Bar();
$foo->printItem('baz'); // Salida: 'Foo: baz'
$foo->printPHP();       // Salida: 'PHP is great'
$bar->printItem('baz'); // Salida: 'Bar: baz'
$bar->printPHP();       // Salida: 'PHP is great'

?>
]]>
    </programlisting>
   </example>
  </sect2>

  <sect2 xml:id="language.oop5.inheritance.internal-classes">
   <title>Return Type Compatibility with Internal Classes</title>

   <para>
    Prior to PHP 8.1, most internal classes or methods didn't declare their return types,
    and any return type was allowed when extending them.
   </para>

   <para>
    As of PHP 8.1.0, most internal methods started to "tentatively" declare their return type,
    in that case the return type of methods should be compatible with the parent being extended;
    otherwise, a deprecation notice is emitted.
    Note that lack of an explicit return declaration is also considered a signature mismatch,
    and thus results in the deprecation notice.
   </para>

   <para>
    If the return type cannot be declared for an overriding method due to PHP cross-version compatibility concerns,
    a <code>#[ReturnTypeWillChange]</code> attribute can be added to silence the deprecation notice.
   </para>

   <example>
    <title>The overriding method does not declare any return type</title>
    <programlisting role="php">
<![CDATA[
<?php
class MyDateTime extends DateTime
{
    public function modify(string $modifier) { return false; }
}

// "Deprecated: Return type of MyDateTime::modify(string $modifier) should either be compatible with DateTime::modify(string $modifier): DateTime|false, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice" as of PHP 8.1.0
?>
]]>
    </programlisting>
   </example>

   <example>
    <title>The overriding method declares a wrong return type</title>
    <programlisting role="php">
<![CDATA[
<?php
class MyDateTime extends DateTime
{
    public function modify(string $modifier): ?DateTime { return null; }
}

// "Deprecated: Return type of MyDateTime::modify(string $modifier): ?DateTime should either be compatible with DateTime::modify(string $modifier): DateTime|false, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice" as of PHP 8.1.0
?>
]]>
    </programlisting>
   </example>

   <example>
    <title>The overriding method declares a wrong return type without a deprecation notice</title>
    <programlisting role="php">
<![CDATA[
<?php
class MyDateTime extends DateTime
{
    /**
     * @return DateTime|false
     */
    #[ReturnTypeWillChange]
    public function modify(string $modifier) { return false; }
}

// No notice is triggered
?>
]]>
    </programlisting>
   </example>

  </sect2>

 </sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

