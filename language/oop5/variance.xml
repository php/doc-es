<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 871df69f47f578c79cad7889f7e27d4b737baf4d Maintainer: andresdzphp Status: ready -->
<!-- Reviewed: no Maintainer: andresdzphp -->
<sect1 xml:id="language.oop5.variance" xmlns="http://docbook.org/ns/docbook">
 <title>Covarianza y Contravarianza</title>
 
 <para>
  En PHP 7.2.0, se introdujo la contravarianza parcial mediante la eliminación de las restricciones de tipo
  en los parámetros de un método hijo. A partir de PHP 7.4.0, se añadió soporte 
  completo de covarianza y contravarianza.
 </para>
 <para>
  La covarianza permite que el método hijo devuelva un tipo más específico que el tipo de devolución
  del método de su padre. Mientras que la contravarianza permite que un tipo de parámetro 
  sea menos específico en un método hijo, que el de su padre.
</para>
 <para>
  Una declaración de tipo covarianza se considera más específica en el siguiente caso:
  <itemizedlist>
   <listitem>
    <simpara>
     Se elimina un tipo de un
     <link linkend="language.types.type-system.composite.union">tipo de unión</link>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     Se añade un tipo a un
     <link linkend="language.types.type-system.composite.intersection">tipo de intersección</link>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     Un tipo de clase se cambia a un tipo de clase hijo
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <type>iterable</type> es cambiado a <type>array</type> o <classname>Traversable</classname>
    </simpara>
   </listitem>
  </itemizedlist>

  Una clase de tipo se considera menos específica si ocurre lo contrario.
 </para>

 <sect2 xml:id="language.oop5.variance.covariance">
  <title>Covarianza</title>

  <para>
   Para ilustrar cómo funciona la covarianza, una simple clase de padre abstracta, <varname>Animal</varname>
   es creada. <varname>Animal</varname> se extenderá a las clases hijo, 
   <varname>Cat</varname>, y <varname>Dog</varname>.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

abstract class Animal
{
    protected string $name;

    public function __construct(string $name)
    {
        $this->name = $name;
    }

    abstract public function speak();
}

class Dog extends Animal
{
    public function speak()
    {
        echo $this->name . " barks";
    }
}

class Cat extends Animal 
{
    public function speak()
    {
        echo $this->name . " meows";
    }
}
]]>
   </programlisting>
  </informalexample>

  <para>
   Observe que no hay ningún método que devuelva valores en este ejemplo. Unas pocas fábricas 
   que devuelven un nuevo objeto de tipo clase <varname>Animal</varname>, 
   <varname>Cat</varname>, o <varname>Dog</varname>.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

interface AnimalShelter
{
    public function adopt(string $name): Animal;
}

class CatShelter implements AnimalShelter
{
    public function adopt(string $name): Cat // instead of returning class type Animal, it can return class type Cat
    {
        return new Cat($name);
    }
}

class DogShelter implements AnimalShelter
{
    public function adopt(string $name): Dog // instead of returning class type Animal, it can return class type Dog
    {
        return new Dog($name);
    }
}

$kitty = (new CatShelter)->adopt("Ricky");
$kitty->speak();
echo "\n";

$doggy = (new DogShelter)->adopt("Mavrick");
$doggy->speak();
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
Ricky meows
Mavrick barks
]]>
   </screen>
  </informalexample>
 </sect2>

 <sect2 xml:id="language.oop5.variance.contravariance">
  <title>Contravarianza</title>

  <para>
   Continuando con el ejemplo anterior con las clases <varname>Animal</varname>, 
   <varname>Cat</varname>, y <varname>Dog</varname>, una clase llamada 
   <varname>Food</varname> y <varname>AnimalFood</varname> serán incluidas, y
   un método <varname>eat(AnimalFood $food)</varname> es añadido a la clase
   abstracta <varname>Animal</varname>.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

class Food {}

class AnimalFood extends Food {}

abstract class Animal
{
    protected string $name;

    public function __construct(string $name)
    {
        $this->name = $name;
    }

    public function eat(AnimalFood $food)
    {
        echo $this->name . " eats " . get_class($food);
    }
}
]]>
   </programlisting>
  </informalexample>

  <para>
   Para ver el comportamiento de la contravención, el método 
   <varname>eat</varname> se sobrescribe en la clase <varname>Dog</varname> para permitir 
   cualquier tipo de objeto <varname>Food</varname>. La clase <varname>Cat</varname> permanece sin cambios.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

class Dog extends Animal
{
    public function eat(Food $food) {
        echo $this->name . " eats " . get_class($food);
    }
}
]]>
   </programlisting>
  </informalexample>

  <para>
   El siguiente ejemplo mostrará el comportamiento de la contravarianza.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

$kitty = (new CatShelter)->adopt("Ricky");
$catFood = new AnimalFood();
$kitty->eat($catFood);
echo "\n";

$doggy = (new DogShelter)->adopt("Mavrick");
$banana = new Food();
$doggy->eat($banana);
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
Ricky eats AnimalFood
Mavrick eats Food
]]>
   </screen>

   <para>
    ¿Pero qué pasa si el (gatito) <varname>$kitty</varname> trata de (comer) <varname>eat</varname> la
    <varname>$banana</varname>?
   </para>

   <programlisting role="php">
<![CDATA[
$kitty->eat($banana);
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
Fatal error: Uncaught TypeError: Argument 1 passed to Animal::eat() must be an instance of AnimalFood, instance of Food given
]]>
   </screen>
  </informalexample>
 </sect2>
</sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
