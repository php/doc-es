<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 02f3bf57175c48abff767ad2c0961c6cfe58a39e Maintainer: seros Status: ready -->
<!-- Reviewed: no Maintainer: seros -->
<sect1 xml:id="language.oop5.basic" xmlns="http://docbook.org/ns/docbook">
 <title>Lo básico</title>

 <sect2 xml:id="language.oop5.basic.class">
  <title>class</title>
  <para>
   La definición básica de una clase comienza con la palabra
   reservada <literal>class</literal>, seguida de un nombre de clase,
   y continuando con un par de llaves que encierran las definiciones
   de las propiedades y métodos pertenecientes a dicha clase.
  </para>
  <para>
   El nombre de clase puede ser cualquier etiqueta válida, siempre que no sea
   una <link linkend="reserved">palabra reservada</link> de PHP. Un nombre válido
   de clase comienza con una letra o un guión bajo, seguido de una cantidad arbitraria de
   letras, números o guiones bajos. Como expresión regular, se
   expresaría de la siguiente forma:
   <code>^[a-zA-Z_\x80-\xff][a-zA-Z0-9_\x80-\xff]*$</code>.
  </para>
  <para>
   Una clase puede tener sus propias
   <link linkend="language.oop5.constants">constantes</link>, <link linkend="language.oop5.properties">variables</link>
   (llamadas "propiedades"), y funciones (llamados "métodos").
  </para>
  <example>
   <title>Definición de una clase sencilla</title>
   <programlisting role="php">
<![CDATA[
<?php
class ClaseSencilla
{
    // Declaración de una propiedad
    public $var = 'un valor predeterminado';

    // Declaración de un método
    public function mostrarVar() {
        echo $this->var;
    }
}
?>
]]>
   </programlisting>
  </example>
  <para>
   La pseudovariable <varname>$this</varname> está disponible cuando un
   método es invocado dentro del contexto de un objeto.
   <varname>$this</varname> es una referencia al objeto invocador.
  </para>
  <warning>
    <para>
    Llamar a un método no estático arroja estáticamente un
    <classname>Error</classname>.
    Antes de PHP 8.0.0, esto generaría un aviso de desaprobación obsoleta,
    y <varname>$this</varname> esto no estaría definido.
    </para>
    <example xml:id="language.oop5.basic.class.this">
     <title>Algunos ejemplos de la pseudovariable <varname>$this</varname></title>
     <programlisting role="php">
<![CDATA[
<?php
class A
{
    function foo()
    {
        if (isset($this)) {
            echo '$this está definida (';
            echo get_class($this);
            echo ")\n";
        } else {
            echo "\$this no está definida.\n";
        }
    }
}

class B
{
    function bar()
    {
        A::foo();
    }
}

$a = new A();
$a->foo();

A::foo();

$b = new B();
$b->bar();

B::bar();
?>
]]>
     </programlisting>
     &example.outputs.7;
     <screen>
<![CDATA[
$this está definida (A)

Deprecated: Non-static method A::foo() should not be called statically in %s  on line 27
$this is not defined.

Deprecated: Non-static method A::foo() should not be called statically in %s  on line 20
$this is not defined.

Deprecated: Non-static method B::bar() should not be called statically in %s  on line 32

Deprecated: Non-static method A::foo() should not be called statically in %s  on line 20
$this is not defined.
]]>
     </screen>
     &example.outputs.8;
     <screen>
<![CDATA[
$this está definida (A)

Fatal error: Uncaught Error: Non-static method A::foo() cannot be called statically in %s :27
Stack trace:
#0 {main}
  thrown in %s  on line 27
]]>
     </screen>
    </example>
   </warning>

   <sect3 xml:id="language.oop5.basic.class.readonly">
    <title>Readonly classes</title>
    <para>
     A partir de PHP 8.2.0, una clase puede ser marcada con el
     modificador <modifier>readonly</modifier>.
     Marcar una clase como <modifier>readonly</modifier> añadirá el
     <link linkend="language.oop5.properties.readonly-properties"><modifier>readonly</modifier> modificador</link>
     a cada propiedad declarada, y evitará la creación de
     <link linkend="language.oop5.properties.dynamic-properties">propiedades dinámicas</link>.
     Además, es imposible añadir soporte para ellas utilizando el atributo
     <classname>AllowDynamicProperties</classname>. Intentar hacerlo provocará
     un error en tiempo de compilación.
    </para>
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
#[\AllowDynamicProperties]
readonly class Foo {
}

// Fatal error: Cannot apply #[AllowDynamicProperties] to readonly class Foo
?>
]]>
     </programlisting>
    </informalexample>

    <para>
     Daado que ni las propiedades no tipadas ni las estáticas pueden ser marcadas con el
     modificador <literal>readonly</literal>, las clases readonly tampoco pueden
     ser declararlas:
    </para>
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
readonly class Foo
{
    public $bar;
}

// Fatal error: Readonly property Foo::$bar must have type
?>
]]>
     </programlisting>
     <programlisting role="php">
<![CDATA[
<?php
readonly class Foo
{
    public static int $bar;
}

// Fatal error: Readonly class Foo cannot declare static properties
?>
]]>
     </programlisting>
    </informalexample>
    <para>
     Una clase <modifier>readonly</modifier> puede ser
     <link linkend="language.oop5.basic.extends">extendida</link>
     si, y solo si, la clase hija también es una
     clase <modifier>readonly</modifier>.
    </para>
   </sect3>
  </sect2>

  <sect2 xml:id="language.oop5.basic.new">
   <title>new</title>
   <para>
   Para crear una instancia de una clase, se debe emplear la palabra reservada
   <literal>new</literal>. Un objeto se creará siempre a menos que el objeto tenga un
   <link linkend="language.oop5.decon">constructor</link> que arroje una
   <link linkend="language.exceptions">excepción</link> en caso de error. Las
   clases deberían ser definidas antes de la instanciación (y en algunos casos
   esto es un requerimiento).
   </para>
   <para>
   Si se emplea un <type>string</type> que contenga el nombre de una clase con
   <literal>new</literal>, se creará una nueva instancia de esa clase. Si
   la clase estuviera en un espacio de nombres, se debe utilizar su nombre completo
   al realizar esto.
   </para>

   <note>
    <para>
     Si no hay argumentos para pasar al constructor de la clase,
     se pueden omitir los paréntesis después del nombre de la clase.
    </para>
   </note>

   <example>
   <title>Creación de una instancia</title>
   <programlisting role="php">
<![CDATA[
<?php
$instancia = new ClaseSencilla();

// Esto también se puede hacer con una variable:
$nombreClase = 'ClaseSencilla';
$instancia = new $nombreClase(); // new ClaseSencilla()
?>
]]>
   </programlisting>
  </example>
  <para>
   En el contexto de una clase, es posible crear un nuevo objeto con
   <literal>new self</literal> y <literal>new parent</literal>.
  </para>
  <para>
   Cuando se asigna una instancia ya creada de una clase a una nueva variable, ésta última
   accederá a la misma instancia que el objeto que le fue asignado. Esta
   conducta es la misma que cuando se pasan instancias a una función. Se puede
   realizar una copia de un objeto ya creado a través de la
   <link linkend="language.oop5.cloning">clonación</link> del mismo.
  </para>
  <example>
   <title>Asignación de objetos</title>
   <programlisting role="php">
<![CDATA[
<?php

$instancia = new ClaseSencilla();

$asignada   =  $instancia;
$referencia =& $instancia;

$instancia->var = '$asignada tendrá este valor';

$instancia = null; // $instancia y $referencia son null

var_dump($instancia);
var_dump($referencia);
var_dump($asignada);
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
NULL
NULL
object(ClaseSencilla)#1 (1) {
   ["var"]=>
     string(27) "$asignada tendrá este valor"
}
]]>
    </screen>
   </example>
   <para>
    Existe un par de formas de crear instancias de un objecto:
   </para>
   <example>
    <title>Creación de nuevos objetos</title>
    <programlisting role="php">
<![CDATA[
<?php
class Prueba
{
    static public function getNew()
    {
        return new static;
    }
}

class Hija extends Prueba
{}

$obj1 = new Prueba();
$obj2 = new $obj1;
var_dump($obj1 !== $obj2);

$obj3 = Prueba::getNew();
var_dump($obj3 instanceof Prueba);

$obj4 = Hija::getNew();
var_dump($obj4 instanceof Hija);
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
bool(true)
bool(true)
bool(true)
]]>
    </screen>
   </example>

   <para>
    Es posible acceder a un miembro de un objeto recién creado en
    una única expresión:
   </para>
   <example>
    <title>Acceder a un miembro de un objeto recién creado</title>
    <programlisting role="php">
<![CDATA[
<?php
echo (new DateTime())->format('Y');
?>
]]>
   </programlisting>
   &example.outputs.similar;
   <screen>
<![CDATA[
2016
]]>
    </screen>
   </example>

   <note>
    <simpara>
     Antes de PHP 7.1, los argumentos no se evalúan si no hay una
     función constructora definida.
    </simpara>
   </note>
  </sect2>

 <sect2 xml:id="language.oop5.basic.properties-methods">
  <title>Propiedades y métodos</title>
  <para>
   Las propiedades y métodos de una clase viven en «espacios de nombres» diferentes, por tanto, es
   posible tener una propiedad y un método con el mismo nombre. Al hacer referencia tanto
   a una propiedad como a un método se utiliza la misma notación, y si se accederá a la
   propiedad o se llamará al método, solamente depende del contexto,
   es decir, si el empleo es el acceso a una variable o la llamada a una función.
  </para>
  <example>
   <title>Acceso a propiedad contra llamada a método</title>
   <programlisting role="php">
<![CDATA[
<?php
class Foo
{
    public $bar = 'property';

    public function bar() {
        return 'method';
    }
}

$obj = new Foo();
echo $obj->bar, PHP_EOL, $obj->bar(), PHP_EOL;
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
propiedad
método
]]>
   </screen>
  </example>
  <para>
   Esto significa que llamar a una <link linkend="functions.anonymous">función
   anónima</link> que ha sido asignada a una propiedad no es posible
   directamente. En su lugar, la propiedad ha de ser asignada primero a una variable, por
   ejemplo. A partir de PHP 7.0.0, es posible llamar a dicha propiedad directamente
   encerrándola entre paréntesis.
  </para>
  <example>
   <title>Llamar a una función anónima almacenada en una propiedad</title>
   <programlisting role="php">
<![CDATA[
<?php
class Foo
{
    public $bar;

    public function __construct() {
        $this->bar = function() {
            return 42;
        };
    }
}

$obj = new Foo();

echo ($obj->bar)(), PHP_EOL;
]]>
    </programlisting>
   &example.outputs;
    <screen>
<![CDATA[
42
]]>
    </screen>
   </example>
  </sect2>

  <sect2 xml:id="language.oop5.basic.extends">
   <!-- TODO Example about class constant redefinition -->
   <!-- TODO Split into it's own page? -->
   <title>extends</title>
  <para>
   Una clase puede heredar los métodos y propiedades de otra clase
   empleando la palabra reservada <literal>extends</literal> en la declaración
   de la clase. No es posible la extensión de múltiples clases; una clase
   sólo puede heredar de una clase base.
  </para>
  <para>
   Los métodos y propiedades heredados pueden ser sobrescritos
   con la redeclaración de éstos utilizando el mismo nombre que en
   la clase madre. Sin embargo, si la clase madre definió un método
   como <link linkend="language.oop5.final">final</link>, éste no
   podrá ser sobrescrito. Es posible acceder a los métodos
   sobrescritos o a las propiedades estáticas haciendo referencia a ellos
   con <link linkend="language.oop5.paamayim-nekudotayim">parent::</link>.
  </para>
  <example>
   <title>Herencia de clases sencilla</title>
   <programlisting role="php">
<![CDATA[
<?php
class ClaseExtendida extends ClaseSencilla
{
    // Redefinición del método padre
    function mostrarVar()
    {
        echo "Clase extendida\n";
        parent::mostrarVar();
    }
}

$extendida = new ClaseExtendida();
$extendida->mostrarVar();
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
Clase extendida
un valor predeterminado
]]>
   </screen>
  </example>
  <sect3 xml:id="language.oop.lsp">
    <title>Signature compatibility rules</title>
    <para>
     When overriding a method, its signature must be compatible with the parent
     method. Otherwise, a fatal error is emitted, or, prior to PHP 8.0.0, an
     <constant>E_WARNING</constant> level error is generated.
     A signature is compatible if it respects the
     <link linkend="language.oop5.variance">variance</link> rules, makes a
     mandatory parameter optional, and if any new parameters are optional.
     This is known as the Liskov Substitution Principle, or LSP for short.
     The <link linkend="language.oop5.decon.constructor">constructor</link>,
     and <literal>private</literal> methods are exempt from these signature
     compatibility rules, and thus won't emit a fatal error in case of a
     signature mismatch.
    </para>
    <example>
     <title>Compatible child methods</title>
     <programlisting role="php">
<![CDATA[
<?php

class Base
{
    public function foo(int $a) {
        echo "Valid\n";
    }
}

class Extend1 extends Base
{
    function foo(int $a = 5)
    {
        parent::foo($a);
    }
}

class Extend2 extends Base
{
    function foo(int $a, $b = 5)
    {
        parent::foo($a);
    }
}

$extended1 = new Extend1();
$extended1->foo();
$extended2 = new Extend2();
$extended2->foo(1);
]]>
     </programlisting>
     &example.outputs;
     <screen>
<![CDATA[
Valid
Valid
]]>
     </screen>
    </example>

    <para>
     The following examples demonstrate that a child method which removes a parameter, or makes an optional
     parameter mandatory, is not compatible with the parent method.
    </para>
    <example>
     <title>Fatal error when a child method removes a parameter</title>
     <programlisting role="php">
<![CDATA[
<?php

class Base
{
    public function foo(int $a = 5) {
        echo "Valid\n";
    }
}

class Extend extends Base
{
    function foo()
    {
        parent::foo(1);
    }
}
]]>
     </programlisting>
     &example.outputs.8.similar;
     <screen>
<![CDATA[
Fatal error: Declaration of Extend::foo() must be compatible with Base::foo(int $a = 5) in /in/evtlq on line 13
]]>
     </screen>
    </example>
    <example>
     <title>Fatal error when a child method makes an optional parameter mandatory</title>
     <programlisting role="php">
<![CDATA[
<?php

class Base
{
    public function foo(int $a = 5) {
        echo "Valid\n";
    }
}

class Extend extends Base
{
    function foo(int $a)
    {
        parent::foo($a);
    }
}
]]>
     </programlisting>
     &example.outputs.8.similar;
     <screen>
<![CDATA[
Fatal error: Declaration of Extend::foo(int $a) must be compatible with Base::foo(int $a = 5) in /in/qJXVC on line 13
]]>
     </screen>
    </example>

    <warning>
     <para>
      Renaming a method's parameter in a child class is not a signature
      incompatibility. However, this is discouraged as it will result in a
      runtime <classname>Error</classname> if
      <link linkend="functions.named-arguments">named arguments</link>
      are used.
     </para>
     <example>
      <title>Error when using named arguments and parameters were renamed in a child class</title>
      <programlisting role="php">
<![CDATA[
<?php

class A {
    public function test($foo, $bar) {}
}

class B extends A {
    public function test($a, $b) {}
}

$obj = new B;

// Pass parameters according to A::test() contract
$obj->test(foo: "foo", bar: "bar"); // ERROR!
]]>
      </programlisting>
      &example.outputs.similar;
      <screen>
<![CDATA[
Fatal error: Uncaught Error: Unknown named parameter $foo in /in/XaaeN:14
Stack trace:
#0 {main}
  thrown in /in/XaaeN on line 14
]]>
      </screen>
     </example>
    </warning>
   </sect3>
  </sect2>

  <sect2 xml:id="language.oop5.basic.class.class">
   <title>::class</title>

   <para>
   La palabra reservada <literal>class</literal> es usada para la resolución
   de nombres de clases. Se puede obtener un string con el nombre completamente cualificado
   de la clase <literal>ClassName</literal> utilizando
   <literal>ClassName::class</literal>. Esto es particularmete útil con
   clases en <link linkend="language.namespaces">espacios de nombres</link>.
   </para>
   <para>
    <example xml:id="language.oop5.basic.class.name">
    <title>Resolución de nombres de clases</title>
     <programlisting role="php">
<![CDATA[
<?php
namespace NS {
    class ClassName {
    }

    echo ClassName::class;
}
?>
]]>
     </programlisting>
     &example.outputs;
     <screen>
<![CDATA[
NS\ClassName
]]>
     </screen>
    </example>
   </para>
   <note>
    <para>La resolución de nombres de clases con <literal>::class</literal> es una transformación
    durante la compilación. Esto significa que, en el instante de crear el string del nombre
    de la clase, aún no se ha realizado ninguna autocarga. Como consecuencia, los nombres de clases
    se expanden incluso si la clase no existe. No se emite ningún error en tal
    caso.
    </para>
    <example xml:id="language.oop5.basic.class.class.fail">
     <title>Missing class name resolution</title>
     <programlisting role="php">
<![CDATA[
<?php
print Does\Not\Exist::class;
?>
]]>
     </programlisting>
     &example.outputs;
     <screen>
<![CDATA[
Does\Not\Exist
]]>
     </screen>
    </example>
   </note>
   <para>
    As of PHP 8.0.0, the <literal>::class</literal> constant may also be used on
    objects. This resolution happens at runtime, not compile time. Its effect is
    the same as calling <function>get_class</function> on the object.
   </para>
   <example xml:id="language.oop5.basic.class.class.object">
    <title>Object name resolution</title>
    <programlisting role="php">
<![CDATA[
<?php
namespace NS {
    class ClassName {
    }
}
$c = new ClassName();
print $c::class;
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
NS\ClassName
]]>
    </screen>
   </example>
  </sect2>
 <sect2 xml:id="language.oop5.basic.nullsafe">
  <title>Nullsafe methods and properties</title>
  <para>
   As of PHP 8.0.0, properties and methods may also be accessed with the
   "nullsafe" operator instead: <literal>?-></literal>. The nullsafe operator
   works the same as property or method access as above, except that if the
   object being dereferenced is &null; then &null;
   will be returned rather than an exception thrown. If the dereference is part of a
   chain, the rest of the chain is skipped.
  </para>
  <para>
   The effect is similar to wrapping each access in an <function>is_null</function>
   check first, but more compact.
  </para>
  <para>
   <example>
    <title>Nullsafe Operator</title>
    <programlisting role="php">
<![CDATA[
<?php

// As of PHP 8.0.0, this line:
$result = $repository?->getUser(5)?->name;

// Is equivalent to the following code block:
if (is_null($repository)) {
    $result = null;
} else {
    $user = $repository->getUser(5);
    if (is_null($user)) {
        $result = null;
    } else {
        $result = $user->name;
    }
}
?>
]]>
    </programlisting>
   </example>
  </para>
  <note>
   <para>
    The nullsafe operator is best used when null is considered a valid and expected
    possible value for a property or method return. For indicating an error,
    a thrown exception is preferable.
   </para>
  </note>
 </sect2>
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
