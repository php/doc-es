<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: d73c3dcbd6e2b085781115aa42d17b80ea285b9e Maintainer: seros Status: ready -->
<!-- Reviewed: yes Maintainer: seros -->

<sect1 xml:id="language.oop5.properties" xmlns="http://docbook.org/ns/docbook">
 <title>Propiedades</title>

 <para>
  Las variables pertenecientes a una clase se llaman <emphasis>propiedades</emphasis>.
  También se les puede llamar usando otros términos como <emphasis>atributos</emphasis>,
  o <emphasis>campos</emphasis>, pero para los propósitos de esta referencia se va a utilizar
  <emphasis>propiedades</emphasis>. Éstas se definen usando una de las palabras reservadas
  <literal>public</literal>, <literal>protected</literal>,
  o <literal>private</literal>, opcionalmente, a partir de PHP 7.4,
  seguido de una declaración de tipo, seguida de una declaración de variable normal.
  Esta declaración puede incluir una inicialización, pero
  esta inicialización debe ser un valor de <link linkend="language.constants">constante</link>.
 </para>
 <para>
  Véase la <xref linkend="language.oop5.visibility" /> para más
  información sobre el significado de
  <literal>public</literal>, <literal>protected</literal>,
  y <literal>private</literal>.
 </para>
 <note>
  <para>
   Como alternativa y no recomendada de declarar las propiedades de una clase, ya que es
   para mantener la compatibilidad con PHP 4, se acepta el uso
   de la palabra reservada <literal>var</literal>.
   Esta tratará la propiedad de forma idéntica a como se
   hubiera declarado como <literal>public</literal>.
  </para>
 </note>
 <para>
  Dentro de los métodos de una clase, se puede acceder a las propiedades no estáticas utilizando
  <literal>-&gt;</literal> (el operador de objeto): <varname>$this-&gt;propiedad</varname>
  (donde <literal>propiedad</literal> es el nombre de la propiedad).
  A las propiedades estáticas se puede acceder utilizando <literal>::</literal> (doble dos puntos):
  <varname>self::$propiedad</varname>. Véase <link linkend="language.oop5.static">la palabra reservada 'static'</link>
  para más información sobre la diferencia entre propiedades estáticas y no estáticas.
 </para>
 <para>
  La pseudovariable <varname>$this</varname> está disponible dentro de
  cualquier método de clase cuando éste es invocado dentro del contexto
  de un objeto. <varname>$this</varname> es una referencia al objeto
  invocador (usualmente el objeto al cual pertenece el método,
  aunque puede que sea otro objeto si el método es llamado
  <link linkend="language.oop5.static">estáticamente</link>
  desde el contexto de un objeto secundario).
 </para>

 <para>
  <example>
   <title>Declaración de propiedades</title>
   <programlisting role="php">
<![CDATA[
<?php
class ClaseSencilla
{
   public $var1 = 'hola ' . 'mundo';
   public $var2 = <<<EOD
hola mundo
EOD;
   public $var3 = 1+2;
   // Declaraciones de propiedades inválidas:
   public $var4 = self::miMetodoEstatico();
   public $var5 = $myVar;

   // Declaraciones de propiedades válidas:
   public $var6 = miConstante;
   public $var7 = [true, false];

   public $var8 = <<<'EOD'
hola mundo
EOD;
}
?>
]]>
   </programlisting>
  </example>
 </para>

 <note>
  <para>
   Existen varias funciones para manipular clases y objetos.
   Véase <link linkend="ref.classobj">Las funciones de clases/objetos</link>.
  </para>
 </note>

  <sect2 xml:id="language.oop5.properties.typed-properties">
   <title>Declaraciones de tipo</title>
   <para>
    A partir de PHP 7.4.0, las definiciones de propiedades pueden incluirse
    <xref linkend="language.types.declarations" />,
    con la excepción de los <type>callable</type>.
    <example>
     <title>Ejemplo de propiedades tipadas</title>
     <programlisting role="php">
<![CDATA[
<?php

class User
{
    public int $id;
    public ?string $name;

    public function __construct(int $id, ?string $name)
    {
        $this->id = $id;
        $this->name = $name;
    }
}

$user = new User(1234, null);

var_dump($user->id);
var_dump($user->name);

?>
]]>
     </programlisting>
     &example.outputs;
     <screen>
<![CDATA[
int(1234)
NULL
]]>
     </screen>
    </example>
   </para>

   <para>
    Las propiedades tipadas deben ser inicializadas antes de acceder a ellas,
    de lo contrario se produce un <classname>Error</classname>.
    <example>
     <title>Acceso a las propiedades</title>
     <programlisting role="php">
<![CDATA[
<?php

class Shape
{
    public int $numberOfSides;
    public string $name;

    public function setNumberOfSides(int $numberOfSides): void
    {
        $this->numberOfSides = $numberOfSides;
    }

    public function setName(string $name): void
    {
        $this->name = $name;
    }

    public function getNumberOfSides(): int
    {
        return $this->numberOfSides;
    }

    public function getName(): string
    {
        return $this->name;
    }
}

$triangle = new Shape();
$triangle->setName("triangle");
$triangle->setNumberofSides(3);
var_dump($triangle->getName());
var_dump($triangle->getNumberOfSides());

$circle = new Shape();
$circle->setName("circle");
var_dump($circle->getName());
var_dump($circle->getNumberOfSides());
?>
]]>
     </programlisting>
     &example.outputs;
     <screen>
<![CDATA[
string(8) "triangle"
int(3)
string(6) "circle"

Fatal error: Uncaught Error: Typed property Shape::$numberOfSides must not be accessed before initialization
]]>
     </screen>
    </example>
   </para>
  </sect2>

  <sect2 xml:id="language.oop5.properties.readonly-properties">
   <title>Propiedad Readonly</title>
   <para>
    A partir de PHP 8.1.0, una propiedad se puede declarar con el modificador <code>readonly</code> (de solo lectura), lo que impide la modificación de la propiedad después de la inicialización.
    <example>
     <title>Ejemplo de propiedades de solo lectura</title>
     <programlisting role="php">
<![CDATA[
<?php

class Test {
   public readonly string $prop;

   public function __construct(string $prop) {
       // Inicialización.
       $this->prop = $prop;
   }
}

$test = new Test("foobar");
// Lectura.
var_dump($test->prop); // string(6) "foobar"

// Reasignación ilegal. No importa que el valor asignado sea el mismo.
$test->prop = "foobar";
// Error: Cannot modify readonly property Test::$prop
?>
]]>
     </programlisting>
    </example>
    <note>
     <para>
      El modificador readonly solo se puede aplicar a las <link linkend="language.oop5.properties.typed-properties">propiedades tipadas</link>.
      Se puede crear una propiedad readonly sin restricciones mediante el tipo <xref linkend="language.types.declarations.mixed" />.
     </para>
    </note>
    <note>
     <para>
      El modificador readonly no son compatibles en propiedades estáticas.
     </para>
    </note>
   </para>
   <para>
    Una propiedad readonly solo se puede inicializar una vez, y solo desde el ámbito en el que se ha declarado. Cualquier otra asignación o modificación de la propiedad dará lugar a una excepción de <classname>Error</classname>.
    <example>
     <title>Inicialización ilegal de propiedades readonly</title>
     <programlisting role="php">
<![CDATA[
<?php
class Test1 {
    public readonly string $prop;
}

$test1 = new Test1;
// Inicialización ilegal fuera del ámbito privado.
$test1->prop = "foobar";
// Error: Cannot initialize readonly property Test1::$prop from global scope
?>
]]>
     </programlisting>
    </example>
   </para>
   <note>
    <para>
     No se permite especificar un valor predeterminado explícito en las propiedades readonly, porque una propiedad readonly con un valor predeterminado es esencialmente la misma que una constante y, por lo tanto, no es particularmente útil.
     <informalexample>
      <programlisting role="php">
<![CDATA[
<?php

class Test {
    // Fatal error: Readonly property Test::$prop cannot have default value
    public readonly int $prop = 42;
}
?>
]]>
      </programlisting>
     </informalexample>
    </para>
   </note>
   <note>
    <para>
     Las propiedades readonly no pueden usarse con la función <function>unset</function> una vez inicializadas. Sin embargo, es posible desactivar una propiedad readonly antes de la inicialización, desde el ámbito donde se ha declarado la propiedad.
    </para>
   </note>
   <para>
    Las modificaciones no son necesariamente asignaciones simples, todo lo siguiente también dará lugar a una excepción <classname>Error</classname>:
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php

class Test {
    public function __construct(
        public readonly int $i = 0,
        public readonly array $ary = [],
    ) {}
}

$test = new Test;
$test->i += 1;
$test->i++;
++$test->i;
$test->ary[] = 1;
$test->ary[0][] = 1;
$ref =& $test->i;
$test->i =& $ref;
byRef($test->i);
foreach ($test as &$prop);
?>
]]>
     </programlisting>
    </informalexample>
   </para>
   <para>
    Sin embargo, las propiedades readonly no excluyen la mutabilidad interior. Los objetos (o recursos) almacenados en propiedades readonly aún pueden modificarse internamente:
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php

class Test {
    public function __construct(public readonly object $obj) {}
}

$test = new Test(new stdClass);
// Mutación interior.
$test->obj->foo = 1;
// Reasignación ilegal.
$test->obj = new stdClass;
?>
]]>
     </programlisting>
    </informalexample>
   </para>
  </sect2>

  <sect2 xml:id="language.oop5.properties.dynamic-properties">
   <title>Dynamic properties</title>
   <para>
    If trying to assign to a non existant property on an &object;,
    PHP will automatically create a corresponding property.
    This dynamically created property will <emphasis>only</emphasis> be
    available on this class instance.
   </para>

   <warning>
    <simpara>
     Dynamic properties are deprecated as of PHP 8.2.0.
     It is recommended to declare the property instead.
     To handle arbitrary property names, the class should implement the magic
     methods <link linkend="object.get">__get()</link> and
     <link linkend="object.set">__set()</link>.
     At last resort the class can be marked with the
     <code>#[\AllowDynamicProperties]</code> attribute.
    </simpara>
   </warning>
  </sect2>

 </sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
