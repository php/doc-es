<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 5c04cf0fd637b258d2a3bf7f4b7aba1beef6d823 Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: no Maintainer: Marqitos -->
<sect1 xml:id="language.oop5.visibility" xmlns="http://docbook.org/ns/docbook">
  <title>Visibilidad</title>
  <para>
    La visibilidad de una propiedad, un método o (a partir de PHP 7.1.0) una constante puede
    ser definida prefijando su declaración con una palabra clave: <literal>public</literal>,
    <literal>protected</literal>, o
    <literal>private</literal>. Los elementos declarados como públicos son
    accesibles en cualquier lugar. El acceso a los elementos protegidos está limitado
    a la clase misma, y mediante clases heredadas y a las
    clases padre. A los miembros declarados como privados solo puede acceder la
    clase que los ha definido.
  </para>

  <sect2 xml:id="language.oop5.visibility-members">
    <title>Visibilidad de las propiedades</title>
    <para>
      Las propiedades de las clases pueden ser definidas como públicas, privadas
      o protegidas. Las propiedades declaradas sin utilizar explícitamente una
      palabra clave de visibilidad serán automáticamente definidas como públicas.
    </para>
    <example>
      <title>Declaración de propiedades</title>
      <programlisting role="php" annotations="non-interactive">
<![CDATA[
<?php
/**
 * Definición de MyClass
 */
class MyClass
{
    public $public = 'Public';
    protected $protected = 'Protected';
    private $private = 'Private';

    function printHello()
    {
        echo $this->public;
        echo $this->protected;
        echo $this->private;
    }
}

$obj = new MyClass();
echo $obj->public; // Funciona
echo $obj->protected; // Error fatal
echo $obj->private; // Error fatal
$obj->printHello(); // Muestra Public, Protected y Private

/**
 * Definición de MyClass2
 */
class MyClass2 extends MyClass
{
    // Se pueden redeclarar las propiedades públicas o protegidas, pero no las privadas
    public $public = 'Public2';
    protected $protected = 'Protected2';

    function printHello()
    {
      echo $this->public;
      echo $this->protected;
      echo $this->private;
    }
}

$obj2 = new MyClass2();
echo $obj2->public; // Funciona
echo $obj2->protected; // Error fatal
echo $obj2->private; // Indefinido
$obj2->printHello(); // Muestra Public2, Protected2 y Undefined (Indefinido)

?>
]]>
      </programlisting>
    </example>
    <sect3 xml:id="language.oop5.visibility-members-aviz">
      <title>Visibilidad Asimétrica de las Propiedades</title>
      <simpara>
        A partir de PHP 8.4, las propiedades pueden también tener su
        visibilidad definida de manera asimétrica, con un campo diferente para
        la lectura (<literal>get</literal>) y la escritura (<literal>set</literal>).
        Más precisamente, la visibilidad <literal>set</literal> puede ser
        especificada separadamente, siempre que no sea más permisiva que la
        visibilidad por defecto.
      </simpara>
      <example>
        <title>Visibilidad Asimétrica de las Propiedades</title>
        <programlisting role="php" annotations="non-interactive">
<![CDATA[
<?php
class Book
{
    public function __construct(
        public private(set) string $title,
        public protected(set) string $author,
        protected private(set) int $pubYear,
    ) {}
}

class SpecialBook extends Book
{
    public function update(string $author, int $year): void
    {
        $this->author = $author; // OK
        $this->pubYear = $year; // Error Fatal
    }
}

$b = new Book('Cómo usar PHP', 'Peter H. Peterson', 2024);

echo $b->title; // Funciona
echo $b->author; // Funciona
echo $b->pubYear; // Error Fatal

$b->title = 'Cómo no usar PHP'; // Error Fatal
$b->author = 'Pedro H. Peterson'; // Error Fatal
$b->pubYear = 2023; // Error Fatal
?>
]]>
        </programlisting>
      </example>
      <para>Hay algunas reservas concernientes a la visibilidad asimétrica:</para>
      <itemizedlist>
        <listitem>
          <simpara>
            Solo las propiedades tipadas pueden tener una visibilidad <literal>set</literal> separada.
          </simpara>
        </listitem>
        <listitem>
          <simpara>
            La visibilidad <literal>set</literal> debe ser la misma
            que <literal>get</literal> o más restrictiva. Es decir,
            <code>public protected(set)</code> y <code>protected protected(set)</code>
            están permitidos, pero <code>protected public(set)</code> provocará un error de sintaxis.
          </simpara>
        </listitem>
        <listitem>
          <simpara>
            Si una propiedad es <literal>public</literal>, entonces la visibilidad principal puede ser
            omitida. Es decir, <code>public private(set)</code> y <code>private(set)</code>
            tendrán el mismo resultado.
          </simpara>
        </listitem>
        <listitem>
          <simpara>
            Una propiedad con una visibilidad <literal>private(set)</literal>
            es automáticamente <literal>final</literal>, y no puede ser redefinida en una clase hija.
          </simpara>
        </listitem>
        <listitem>
          <simpara>
            Obtener una referencia a una propiedad sigue la visibilidad <literal>set</literal>, no <literal>get</literal>.
            Esto se debe a que una referencia puede ser utilizada para modificar el valor de la propiedad.
          </simpara>
        </listitem>
        <listitem>
          <simpara>
            De igual manera, intentar escribir en una propiedad de array implica tanto una operación <literal>get</literal> como
            una operación <literal>set</literal> internamente, y seguirá por lo tanto la visibilidad <literal>set</literal>,
            ya que es siempre la más restrictiva.
          </simpara>
        </listitem>
      </itemizedlist>
      <note>
        <simpara>
          Los espacios no están permitidos en la declaración de visibilidad para la modificación.
          <literal>private(set)</literal> es correcto.
          <literal>private( set )</literal> no es correcto y resultará en un error de análisis.
        </simpara>
      </note>
      <simpara>
        Cuando una clase extiende a otra, la clase hija puede redefinir
        cualquier propiedad que no sea <literal>final</literal>. Al hacerlo,
        puede ampliar tanto la visibilidad principal como la visibilidad <literal>set</literal>,
        siempre que la nueva visibilidad sea la misma o más amplia
        que la de la clase padre. Sin embargo, tenga en cuenta que si una propiedad <literal>private</literal>
        es reemplazada, esto no cambia realmente la propiedad de la clase padre,
        sino que crea una nueva propiedad con un nombre interno diferente.
      </simpara>
      <example>
        <title>Herencia de Propiedades Asimétricas</title>
        <programlisting role="php" annotations="non-interactive">
<![CDATA[
<?php
class Book
{
    protected string $title;
    public protected(set) string $author;
    protected private(set) int $pubYear;
}

class SpecialBook extends Book
{
    public protected(set) string $title; // OK, ya que la lectura es más amplia y la escritura es la misma.
    public string $author; // OK, ya que la lectura es la misma y la escritura es más amplia.
    public protected(set) int $pubYear; // Error Fatal. Las propiedades private(set) son finales.
}
?>
]]>
        </programlisting>
      </example>
    </sect3>
  </sect2>

  <sect2 xml:id="language.oop5.visiblity-methods">
    <title>Visibilidad de los métodos</title>
    <para>
      Los métodos de las clases pueden ser definidos como públicos, privados
      o protegidos. Los métodos declarados sin utilizar explícitamente una
      palabra clave de visibilidad serán automáticamente definidos como públicos.
    </para>
    <para>
      <example>
        <title>Declaración de métodos</title>
        <programlisting role="php" annotations="non-interactive">
<![CDATA[
<?php
/**
 * Definición de MyClass
 */
class MyClass
{
    // Declara un constructor público
    public function __construct() { }

    // Declara un método público
    public function MyPublic() { }

    // Declara un método protegido
    protected function MyProtected() { }

    // Declara un método privado
    private function MyPrivate() { }

    // Este será público
    function Foo()
    {
        $this->MyPublic();
        $this->MyProtected();
        $this->MyPrivate();
    }
}

$myclass = new MyClass;
$myclass->MyPublic(); // Funciona
$myclass->MyProtected(); // Error fatal
$myclass->MyPrivate(); // Error fatal
$myclass->Foo(); // Public, Protected y Private funcionan

/**
 * Definición de MyClass2
 */
class MyClass2 extends MyClass
{
    // Este será público
    function Foo2()
    {
        $this->MyPublic();
        $this->MyProtected();
        $this->MyPrivate(); // Error fatal
    }
}

$myclass2 = new MyClass2;
$myclass2->MyPublic(); // Funciona
$myclass2->Foo2(); // Public y Protected funcionan, no Private

class Bar
{
    public function test() {
        $this->testPrivate();
        $this->testPublic();
    }

    public function testPublic() {
        echo "Bar::testPublic\n";
    }

    private function testPrivate() {
        echo "Bar::testPrivate\n";
    }
}

class Foo extends Bar
{
    public function testPublic() {
        echo "Foo::testPublic\n";
    }

    private function testPrivate() {
        echo "Foo::testPrivate\n";
    }
}

$myFoo = new Foo();
$myFoo->test(); // Bar::testPrivate
                // Foo::testPublic
?>
]]>
        </programlisting>
      </example>
    </para>
  </sect2>

  <sect2 xml:id="language.oop5.visiblity-constants">
    <title>Visibilidad de las constantes</title>
    <para>
      A partir de PHP 7.1.0, las constantes de clases pueden ser definidas
      como públicas, privadas o protegidas. Las constantes declaradas sin una palabra clave
      de visibilidad explícita son definidas como públicas.
    </para>
    <example>
      <title>Declaración de constantes a partir de PHP 7.1.0</title>
      <programlisting role="php" annotations="non-interactive">
<![CDATA[
<?php
/**
 * Declaremos MyClass
 */
class MyClass
{
    // Declaremos una constante pública
    public const MY_PUBLIC = 'public';

    // Declaremos una constante protegida
    protected const MY_PROTECTED = 'protected';

    // Declaremos una constante privada
    private const MY_PRIVATE = 'private';

    public function foo()
    {
        echo self::MY_PUBLIC;
        echo self::MY_PROTECTED;
        echo self::MY_PRIVATE;
    }
}

$myclass = new MyClass();
MyClass::MY_PUBLIC; // Funciona
MyClass::MY_PROTECTED; // Error fatal
MyClass::MY_PRIVATE; // Error fatal
$myclass->foo(); // Public, Protegida y Privada funcionan

/**
 * Definir MyClass2
 */
class MyClass2 extends MyClass
{
    // Esto es público
    function foo2()
    {
        echo self::MY_PUBLIC;
        echo self::MY_PROTECTED;
        echo self::MY_PRIVATE; // Error fatal
    }
}

$myclass2 = new MyClass2;
echo MyClass2::MY_PUBLIC; // Funciona
$myclass2->foo2(); // Public y Protegida funcionan, pero no Privada
?>
]]>
      </programlisting>
    </example>
  </sect2>

  <sect2 xml:id="language.oop5.visibility-other-objects">
    <title>Visibilidad desde otros objetos</title>
    <para>
      Los objetos de mismos tipos tienen acceso a los miembros privados y protegidos de los otros,
      incluso si no son la misma instancia. Esto se debe a que
      los detalles específicos de la implementación ya son conocidos internamente
      por estos objetos.
    </para>
    <example>
      <title>Acceso a los miembros privados de un objeto del mismo tipo</title>
      <programlisting role="php" annotations="non-interactive">
<![CDATA[
<?php
class Test
{
    private $foo;

    public function __construct($foo)
    {
        $this->foo = $foo;
    }

    private function bar()
    {
        echo 'Acceso al método privado.';
    }

    public function baz(Test $other)
    {
        // Podemos modificar la propiedad privada:
        $other->foo = 'Hola';
        var_dump($other->foo);

        // También podemos llamar al método privado:
        $other->bar();
    }
}

$test = new Test('test');

$test->baz(new Test('other'));
?>
]]>
      </programlisting>
      &example.outputs;
      <screen>
<![CDATA[
string(5) "Hola"
Acceso al método privado.
]]>
      </screen>
    </example>
  </sect2>
</sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
