<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 80720e59fc88b2522fe2e119b0148caaaa214b0b Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: yes -->
<refentry xml:id="closure.bindto" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>Closure::bindTo</refname>
  <refpurpose>
   Duplica la cierre con un nuevo objeto vinculado y un nuevo contexto de clase.
  </refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis role="Closure">
   <modifier>public</modifier> <type class="union"><type>Closure</type><type>null</type></type><methodname>Closure::bindTo</methodname>
   <methodparam><type class="union"><type>object</type><type>null</type></type><parameter>newThis</parameter></methodparam>
   <methodparam choice="opt"><type class="union"><type>object</type><type>string</type><type>null</type></type><parameter>newScope</parameter><initializer>"static"</initializer></methodparam>
  </methodsynopsis>
  <para>
   Crea y devuelve una nueva <link linkend="functions.anonymous">función anónima
   </link> con el mismo cuerpo y las mismas variables vinculadas que la original, pero con un objeto vinculado
   que puede ser diferente, y un nuevo contexto de clase.
  </para>

  <para>
   El objeto vinculado determina el valor que <literal>$this</literal> tendrá en el cuerpo de la función,
   y el contexto de clase representa una clase que determina a qué miembros privados y protegidos
   la función anónima tendrá acceso. En otras palabras, las propiedades que serán visibles serán las
   mismas que si la función anónima fuera un método de la clase pasada a través del argumento
   <parameter>newScope</parameter>.
  </para>

  <para>
   Las cierres estáticas no pueden tener un objeto vinculado (el valor del argumento
   <parameter>newThis</parameter> debería ser &null;), pero este método puede
   utilizarse para cambiar su ámbito de clase.
  </para>

  <para>
   Este método verificará que una cierre no estática a la que se le pase
   un contexto de objeto se vincule a este objeto (y ya no sea no estática),
   y viceversa. Con este fin, las cierres no estáticas a las que se les pase un
   contexto de clase pero &null; como contexto de objeto serán convertidas en estáticas, y viceversa.
  </para>

  <note>
   <para>
    Si solo se desea duplicar la función anónima, puede utilizarse
    <link linkend="language.oop5.cloning">el clonado</link> en su lugar.
   </para>
  </note>

 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <variablelist>
   <varlistentry>
    <term><parameter>newThis</parameter></term>
    <listitem>
     <para>
      El objeto al que vincular la función anónima, o &null; para una cierre estática.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>newScope</parameter></term>
    <listitem>
     <para>
      El contexto de clase a asociar con la cierre, o 'static' para conservar el
      contexto actual. Si se pasa un objeto, su tipo será utilizado.
      Esto determina la visibilidad de los métodos protegidos y privados del objeto vinculado.
      No está permitido pasar (un objeto de) una clase interna para
      este argumento.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Devuelve la nueva cierre en forma de objeto <classname>Closure</classname>,
   o &null; en caso de error.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title>Ejemplo <function>Closure::bindTo</function></title>
   <programlisting role="php">
<![CDATA[
<?php

class A
{
    private $val;

    public function __construct($val)
    {
        $this->val = $val;
    }

    public function getClosure()
    {
        //Retorna una cierre vinculada a este objeto y contexto
        return function() {
            return $this->val;
        };
    }
}

$ob1 = new A(1);
$ob2 = new A(2);

$cl = $ob1->getClosure();
echo $cl(), "\n";
$cl = $cl->bindTo($ob2);
echo $cl(), "\n";
?>
]]>
   </programlisting>
   &example.outputs.similar;
   <screen>
<![CDATA[
1
2
]]>
   </screen>
  </example>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <simplelist>
   <member><link linkend="functions.anonymous">Funciones anónimas</link></member>
   <member><methodname>Closure::bind</methodname></member>
  </simplelist>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
