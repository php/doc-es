<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<sect1 xml:id="language.types.declarations">
 <title>Declaraciones de tipo</title>

 <para>
  Las declaraciones de tipo pueden ser añadidas a los argumentos de función,
  valores de retorno y desde PHP 7.4.0, propiedades de clase. 
  Éstas declaraciones aseguran que el valor es del tipo especificado en el 
  momento de la llamada, de no ser así se lanzará una 
  excepción de tipo <classname>TypeError</classname>.
 </para>

 <!-- Encontrar un lugar mejor para poner esta nota -->
 <note>
  <!-- TODO Link a la sección de covarianza -->
  <para>
   Cuando se sobreescribe el método de un padre, el método hijo debe coincidir 
   con cualquier tipo de declaración de retorno del padre. Si el padre no 
   tiene definida un tipo de retorno, entonces el método hijo puede 
   realizarla.

  </para>
 </note>

 <sect2 xml:id="language.types.declarations.base">
  <title>Tipos simples</title>
  <informaltable>
   <tgroup cols="3">
    <thead>
     <row>
      <entry>&Type;</entry>
      <entry>&Description;</entry>
      <entry>&Version;</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>Class/interface name</entry>
      <entry>
       The valor debe ser una instancia de la clase o de la interfaz.
      </entry>
      <entry/>
     </row>
     <row>
      <entry><type>self</type></entry>
      <entry>
       El valor debe ser una instancia de la misma clase que aquella en la que
       se utiliza la declaración de tipo. Solamente se puede usar en clases.
      </entry>
      <entry/>
     </row>
     <row>
      <entry><type>parent</type></entry>
      <entry>
        El valor debe ser una instancia del padre de la clase en la que se usa 
        la declaración de tipo. Solo se puede usar en clases.
      </entry>
      <entry/>
     </row>
     <row>
      <entry><type>array</type></entry>
      <entry>
       El valor debe ser un <type>array</type>.
      </entry>
      <entry/>
     </row>
     <row>
      <entry><type>callable</type></entry>
      <entry>
       El valor debe ser un <type>callable</type> válido.
       No puede ser usado como una declaración de tipo de propiedad de clase.
      </entry>
      <entry/>
     </row>
     <row>
      <entry><type>bool</type></entry>
      <entry>
       El valor debe ser un valor booleano.
      </entry>
      <entry/>
     </row>
     <row>
      <entry><type>float</type></entry>
      <entry>
       El valor debe ser un numero de coma flotante.
      </entry>
      <entry/>
     </row>
     <row>
      <entry><type>int</type></entry>
      <entry>
       El valor debe ser un número entero.
      </entry>
      <entry/>
     </row>
     <row>
      <entry><type>string</type></entry>
      <entry>
       El valor debe ser una cadena.
      </entry>
      <entry/>
     </row>
     <row>
      <entry><type>iterable</type></entry>
      <entry>
       El valor debe ser un array o una instancia de <classname>Traversable</classname>.
      </entry>
      <entry>PHP 7.1.0</entry>
     </row>
     <row>
      <entry><type>object</type></entry>
      <entry>
       El valor debe ser un objeto.
      </entry>
      <entry>PHP 7.2.0</entry>
     </row>
     <row>
      <entry><type>mixed</type></entry>
      <entry>
       El valor puede ser cualquier valor. 
      </entry>
      <entry>PHP 8.0.0</entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>

  <warning>
   <para>
    No se admiten los alias para los tipos escalares anteriores.
    En su lugar, se tratan como nombres de clase o interfaz.
    Por ejemplo, usar <literal>boolean</literal> como declaración de tipo
    requerirá que el valor sea una instancia de clase o interfaz
    <literal>boolean</literal>, en lugar de tipo <type>bool</type>:

   </para>
   <para>
    <example>
     <programlisting role="php">
<![CDATA[
<?php
    function test(boolean $parametro) {}
    test(true);
?>
]]>
     </programlisting>
     &example.outputs.8;
     <screen>
<![CDATA[
Warning: "boolean" will be interpreted as a class name. Did you mean "bool"? Write "\boolean" to suppress this warning in /in/9YrUX on line 2

Fatal error: Uncaught TypeError: test(): Argument #1 ($param) must be of type boolean, bool given, called in - on line 3 and defined in -:2
Stack trace:
#0 -(3): test(true)
#1 {main}
  thrown in - on line 2
]]>
     </screen>
    </example>
   </para>
  </warning>

 <sect3 xml:id="language.types.declarations.mixed">
  <title>mixed</title>

  <para>
   <type>mixed</type> es equivalente a <link linkend="language.types.declarations.composite.union">union type</link>
   <type class="union">
    <type>object</type><type>resource</type><type>array</type><type>string</type>
    <type>int</type><type>float</type><type>bool</type><type>null</type>
   </type>.
   Disponible a partir de PHP 8.0.0.
  </para>
 </sect3>

  <sect3 xml:id="language.types.declarations.examples">
   &reftitle.examples;
   <example>
    <title>Declaración de tipo de clase básica</title>
    <programlisting role="php">
<![CDATA[
<?php
class C {}
class D extends C {}

// Esta clase no extiende de C.
class E {}

function f(C $c) {
    echo get_class($c)."\n";
}

f(new C);
f(new D);
f(new E);
?>
]]>
    </programlisting>
    &example.outputs.8;
    <screen>
<![CDATA[
C
D

Fatal error: Uncaught TypeError: f(): Argument #1 ($c) must be of type C, E given, called in /in/gLonb on line 14 and defined in /in/gLonb:8
Stack trace:
#0 -(14): f(Object(E))
#1 {main}
  thrown in - on line 8
]]>
    </screen>
   </example>

   <example>
    <title>Declaración de tipo de interfaz básica</title>
    <programlisting role="php">
<![CDATA[
<?php
interface I { public function f(); }
class C implements I { public function f() {} }

// Esta clase no implementa I.
class E {}

function f(I $i) {
    echo get_class($i)."\n";
}

f(new C);
f(new E);
?>
]]>
    </programlisting>
    &example.outputs.8;
    <screen>
<![CDATA[
C

Fatal error: Uncaught TypeError: f(): Argument #1 ($i) must be of type I, E given, called in - on line 13 and defined in -:8
Stack trace:
#0 -(13): f(Object(E))
#1 {main}
  thrown in - on line 8
]]>
    </screen>
   </example>

   <example>
    <title>Declaración de tipo de retorno básica</title>
    <programlisting role="php">
<![CDATA[
<?php
function suma($a, $b): float {
    return $a + $b;
}

// Se devolverá un valor float.
var_dump(suma(1, 2));
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
float(3)
]]>
    </screen>
   </example>

   <example>
    <title>Retornando un objeto</title>
    <programlisting role="php">
<![CDATA[
<?php
class C {}

function getC(): C {
    return new C;
}

var_dump(getC());
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
object(C)#1 (0) {
}
]]>
    </screen>
   </example>
  </sect3>
 </sect2>

 <sect2 xml:id="language.types.declarations.nullable">
  <title>Tipo Nullable</title>

  <para>
  
   A partir de PHP 7.1.0, las declaraciones de tipo pueden ser marcadas como
   nullable anteponiendo un interrogante(<literal>?</literal>) en el nombre
   de tipo. Esto conlleva a que el valor puede ser del tipo específico o &null;.
  </para>

  <para>
   <example>
    <title>Declaración de tipo de argumento Nullable</title>
    <programlisting role="php">
<![CDATA[
<?php
class C {}

function f(?C $c) {
    var_dump($c);
}

f(new C);
f(null);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
object(C)#1 (0) {
}
NULL
]]>
    </screen>
   </example>

   <example>
    <title>Declaración de tipo de retorno Nullable</title>
    <programlisting role="php">
<![CDATA[
<?php
function get_item(): ?string {
    if (isset($_GET['item'])) {
        return $_GET['item'];
    } else {
        return null;
    }
}
?>
]]>
    </programlisting>
   </example>
  </para>

  <note>
   <para>
    Es posible lograr argumentos anulables haciendo <literal>null</literal> el valor por defecto. 
    Esto no se recomienda ya que se rompe durante la herencia.
   </para>
   <example>
    <title>Forma antigua de hacer argumentos nullable por defecto</title>
    <programlisting role="php">
<![CDATA[
<?php
class C {}

function f(C $c = null) {
    var_dump($c);
}

f(new C);
f(null);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
object(C)#1 (0) {
}
NULL
]]>
    </screen>
   </example>
  </note>
 </sect2>

 <sect2 xml:id="language.types.declarations.composite">
  <title>Tipos compuestos</title>
  <para>
   Es posible combinar tipos simples en tipos compuestos.
   PHP permite combinar tipos de las siguientes maneras:
  </para>

  <itemizedlist>
   <listitem>
    <simpara>
     Union de tipos simples. A partir de 8.0.0.
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     Intersección de tipos de clases (interfaces y nombres de clase). A partir de PHP 8.1.0.
    </simpara>
   </listitem>
  </itemizedlist>

  <caution>
   <simpara>
    No es posible combinar tipos intersección con tipos unión.
   </simpara>
  </caution>

  <sect3 xml:id="language.types.declarations.composite.union">
   <title>Tipos unión</title>
   <para>
    Una declaración de tipo de unión acepta valores de múltiples tipos simples 
    diferentes, en lugar de uno solo.
    Los tipos de unión se especifican mediante la sintaxis <literal>T1|T2|...</literal>.
    Los tipos de unión están disponibles a partir de PHP 8.0.0.
   </para>

   <sect4 xml:id="language.types.declarations.composite.union.nullable">
    <title>Tipos unión Nullable</title>
    <para>
     El tipo <literal>null</literal> se admite como parte de las uniones, de modo que T1|T2|null 
     se puede usar para crear una unión nullable. La notación ?T existente se 
     considera una forma abreviada del caso común de T|null.
    </para>

    <caution>
     <simpara>
      <literal>null</literal> no puede ser usado como tipo standalone.
     </simpara>
    </caution>
   </sect4>

   <sect4 xml:id="language.types.declarations.composite.union.false">
    <title>false pseudo-type</title>
    <para>
     The <literal>false</literal> literal type is supported as part of unions,
     and is included as for historical reasons many internal functions return
     <literal>false</literal> instead of <literal>null</literal> for failures.
     A classic example of such a function is <function>strpos</function>.
    </para>

    <caution>
     <simpara>
      <literal>false</literal> no se puede usar como tipo independiente 
      (incluido tipo independiente nullable). 
      Por este motivo <literal>false</literal>, <literal>false|null</literal>
      y <literal>?false</literal> no están permitidos.
     </simpara>
    </caution>
    <caution>
     <simpara>
      El literal <literal>true</literal> no existe.
     </simpara>
    </caution>
   </sect4>
  </sect3>

  <sect3 xml:id="language.types.declarations.composite.intersection">
   <title>Tipos Intersección</title>
   <para>
    Una declaración de tipo de Intersección acepta valores que satisfacen múltiples
    declaraciones de tipo de clase, en lugar de una sola. 
    Los tipos Intersección se especifican usando la sintaxis <literal>T1&amp;T2&amp;...</literal> 
    Los tipos Intersección están disponibles a partir de PHP 8.1.0.
   </para>
  </sect3>

  <sect3 xml:id="language.types.declarations.composite.redundant">
   <title>Tipos duplicados y redundantes</title>
   <para>
    Para detectar errores simples en declaraciones de tipos compuestos, los tipos redundantes que
    se puedan detectar sin realizar la carga de clase dará como resultado un error en tiempo de compilación. 
    Esto incluye:
    <itemizedlist>
     <listitem>
      <simpara>
       Solamente podrá resolverse un mismo tipo una vez. Los tipos como
       <literal>int|string|INT</literal> o
       <literal>Countable&amp;Traversable&amp;COUNTABLE</literal>
       darán como resultado un error.
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       Usar el tipo <type>mixed</type> dará como resultado un error.
      </simpara>
     </listitem>
     <listitem>
      <simpara>Para los tipos Unión:</simpara>
      <itemizedlist>
       <listitem>
        <simpara>
         Si se usa el tipo <type>bool</type>, <type>false</type> no puede ser usado adicionalmente.
        </simpara>
       </listitem>
       <listitem>
        <simpara>
         Si se usa el tipo <type>object</type>, los tipos para clase no pueden ser usados adicionalmente.
        </simpara>
       </listitem>
       <listitem>
        <simpara>
         Si se usa el tipo <type>iterable</type>, <type>array</type>
         y <classname>Traversable</classname> no podrán ser usados adicionalmente.
        </simpara>
       </listitem>
      </itemizedlist>
     </listitem>
     <listitem>
      <simpara>Para los tipos Intersección:</simpara>
      <itemizedlist>
       <listitem>
        <simpara>
									El uso de un tipo que no sea un tipo de clase dará como resultado un error.
        </simpara>
       </listitem>
       <listitem>
        <simpara>
         El uso de <type>self</type>, <type>parent</type>, o <type>static</type> resultará en error.
        </simpara>
       </listitem>
      </itemizedlist>
     </listitem>
    </itemizedlist>
   </para>

   <note>
    <simpara>
     Esto no garantiza que el tipo sea "mínimo", 
     porque hacerlo requeriría cargar todos los tipos de clase usados.
    </simpara>
   </note>

   <para>
    Por ejemplo, si <literal>A</literal> y <literal>B</literal> son alias de clase, 
    entonces <literal>A|B</literal> sigue siendo un tipo de unión legal, aunque podría 
    reducirse a <literal>A</literal> o <literal>B</literal>.
				De manera similar, si la clase <code>B extends A {}</code>, 
				entonces <literal>A|B</literal> es también un tipo de unión legal, 
				aunque podría reducirse a solo <literal>A</literal>.
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
function foo(): int|INT {} // No permitido
function foo(): bool|false {} // No permitido
function foo(): int&Traversable {} // No permitido
function foo(): self&Traversable {} // No permitido

use A as B;
function foo(): A|B {} // No permitido ("use" es parte de la resolución del nombre)
function foo(): A&B {} // No permitido ("use" es parte de la resolución del nombre)

class_alias('X', 'Y');
function foo(): X|Y {} // Permitido (La redundancia solo se detecta en tiempo de ejecución)
function foo(): X&Y {} // Permitido (La redundancia solo se detecta en tiempo de ejecución)
?>
]]>
     </programlisting>
    </informalexample>
   </para>
  </sect3>
 </sect2>

 <sect2 xml:id="language.types.declarations.return-only">
  <title>Tipos de solo lectura</title>

  <sect3 xml:id="language.types.declarations.void">
   <title>void</title>
   <para>
    <literal>void</literal> es un tipo de retorno que indica que la función 
    no devuelve un valor. Por lo tanto, no puede ser parte de una declaración 
    de tipo de unión. Disponible a partir de PHP 7.1.0.
   </para>
   <note>
    <para>
     Queda obsoleto el retorno por referencia desde una funcion <type>void</type> a partir de PHP 8.1.0, debido a que dicha función es contradictoria.
					Previamente emitía el siguiente <constant>E_NOTICE</constant> cuando se llamaba: <literal>Only variable references should be returned by reference</literal>
     <informalexample>
      <programlisting role="php">
<![CDATA[
<?php
function &test(): void {}
?>
]]>
      </programlisting>
     </informalexample>
    </para>
   </note>
  </sect3>

  <sect3 xml:id="language.types.declarations.never">
   <title>never</title>
   <para>
    <literal>never</literal> es un tipo de retorno que indica que la función no retorna. Esto significa que llama a <function>exit</function>, lanza una excepción o es un ciclo infinito. Por lo tanto, no 
    puede ser parte de una declaración de tipo de unión. Disponible a partir de PHP 8.1.0.
   </para>
   <para>
    <type>never</type> es, en el lenguaje de la teoría de tipos, el tipo inferior. Lo que significa que es el subtipo de cualquier otro tipo y puede reemplazar cualquier otro tipo de retorno durante la 
    herencia.
   </para>
  </sect3>

  <sect3 xml:id="language.types.declarations.static">
   <title>static</title>
   <para>
			 El valor debe ser una instancia de la misma clase en la que se llama al método. 
			 Disponible a partir de PHP 8.0.0.
   </para>
  </sect3>
 </sect2>

 <sect2 xml:id="language.types.declarations.strict">
  <title>Tipificación estricto</title>

  <para>
   Por defecto, PHP forzará los valores del tipo incorrecto en la declaración 
   de tipo escalar esperada si es posible. Por ejemplo, una función a la que se le da un 
   <type>int</type> para un parámetro que espera una <type>string</type> 
   obtendrá una variable de tipo <type>string</type>.
  </para>

  <para>
   Es posible habilitar el modo estricto por archivo. En modo estricto, 
   solo se aceptará un valor que corresponda exactamente a la declaración de tipo. 
   De lo contrario, se lanzará un <classname>TypeError</classname>. 
   La única excepción a esta regla es que un valor <type>int</type> pasará una 
   declaración de tipo <type>float</type>.
  </para>

  <warning>
   <simpara>
    Las llamadas a funciones desde funciones internas no se verán afectadas por la declaración de <literal>strict_types</literal>.
   </simpara>
  </warning>

  <para>
   Para habilitar el modo estricto, se usa el constructor <literal>declare</literal> con la declaración <literal>strict_types</literal>=1.
  </para>

  <note>
   <para>
    El tipado estricto se aplica a las llamadas de función realizadas desde dentro del archivo con el tipado estricto habilitado, no a las funciones declaradas de ese archivo.
    Si un archivo sin <literal>strict_types</literal> activado realiza una llamada a una función que se definió en un archivo con <literal>strict_types</literal> activado, la preferencia será respetada 	
    (escritura coercitiva) y se forzará el valor.
   </para>
  </note>

  <note>
   <para>
    La tipificación estricta solo está definida para declaraciones de tipos escalares.
   </para>
  </note>

  <example>
   <title>Tipificación estricta para los valores de los argumentos</title>
   <programlisting role="php">
<![CDATA[
<?php
declare(strict_types=1);

function suma(int $a, int $b) {
    return $a + $b;
}

var_dump(suma(1, 2));
var_dump(suma(1.5, 2.5));
?>
]]>
   </programlisting>
   &example.outputs.8;
   <screen>
<![CDATA[
int(3)

Fatal error: Uncaught TypeError: suma(): Argument #1 ($a) must be of type int, float given, called in - on line 9 and defined in -:4
Stack trace:
#0 -(9): sum(1.5, 2.5)
#1 {main}
  thrown in - on line 4
]]>
   </screen>
  </example>

  <example>
   <title>Tipificación coercitiva para valores de los argumentos</title>
   <programlisting role="php">
<![CDATA[
<?php
function suma(int $a, int $b) {
    return $a + $b;
}

var_dump(suma(1, 2));

// Estos serán forzados a números enteros: ¡observe el resultado a continuación!
var_dump(suma(1.5, 2.5));
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
int(3)
int(3)
]]>
   </screen>
  </example>

  <example>
   <title>Tipificación estricta para valores de retorno</title>
   <programlisting role="php">
<![CDATA[
<?php
declare(strict_types=1);

function suma($a, $b): int {
    return $a + $b;
}

var_dump(suma(1, 2));
var_dump(suma(1, 2.5));
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
int(3)

Fatal error: Uncaught TypeError: suma(): Return value must be of type int, float returned in -:5
Stack trace:
#0 -(9): suma(1, 2.5)
#1 {main}
  thrown in - on line 5
]]>
   </screen>
  </example>
 </sect2>

 <sect2 xml:id="language.types.declarations.union.coercive">
  <title>Tipificación coercitiva con tipos Unión</title>
  <para>
   Cuando <literal>strict_types</literal> no está activado, las declaraciones de tipo escalar están sujetas a coerciones de tipo limitadas.
			Si el tipo exacto del valor no es parte de la unión, entonces el tipo de destino se elige en el siguiente orden de preferencia:

   <orderedlist>
    <listitem>
     <simpara>
      <type>int</type>
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <type>float</type>
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <type>string</type>
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <type>bool</type>
     </simpara>
    </listitem>
   </orderedlist>

			Si el tipo existe en la unión, y el valor se puede forzar al tipo bajo la semántica 
			de verificación de tipo existente de PHP, entonces se elige el tipo. De lo contrario, 
			se prueba el siguiente tipo.
  </para>

  <caution>
   <para>
				Como excepción, si el valor es una cadena y tanto int como float son parte de la unión, 
				el tipo preferido está determinado por la semántica de "cadena numérica" ​​existente. 
				Por ejemplo, para <literal>"42"</literal> se elige <type>int</type>, mientras que 
				para <literal>"42.0"</literal> se elige <type>float</type>.
   </para>
  </caution>

  <note>
   <para>
    Los tipos que no forman parte de la lista de preferencias anterior no son
    objetivos elegibles para la coerción implícita. En particular, no ocurre 
    ninguna coerción implícita para los tipos <literal>null</literal> y 
    <literal>false</literal>.
   </para>
  </note>

  <example>
   <title>Ejemplo de tipos siendo forzados a formar parte del tipo Unión</title>
   <programlisting role="php">
<![CDATA[
<?php
// int|string
42    --> 42          // tipo exacto
"42"  --> "42"        // tipo exacto
new ObjectWithToString --> "Resultado de __toString()"
                      // object nunca compatible con int, se resuelve como string
42.0  --> 42          // float compatible con int
42.1  --> 42          // float compatible con int
1e100 --> "1.0E+100"  // float demasiado largo para tipo int, se resuelve como string
INF   --> "INF"       // float demasiado largo para tipo int, se resuelve como string
true  --> 1           // bool compatible con int
[]    --> TypeError   // array no compatible con int o string

// int|float|bool
"45"    --> 45        // string numérico int
"45.0"  --> 45.0      // string numérico float

"45X"   --> true      // no es string numérico, se resuelve como bool
""      --> false     // no es string numérico, se resuelve como bool
"X"     --> true      // no es string numérico, se resuelve como bool
[]      --> TypeError // array no compatible con int, float or bool
?>
]]>
   </programlisting>
  </example>
 </sect2>

<!-- TODO parece que se preguntan qué hacer con estas cosas -->
 <sect2 xml:id="language.types.declarations.misc">
  <title>Misc</title>
   <example>
    <title>Tipificación de parámetros pasados por referencia</title>
    <simpara>
     Los tipos declarados de parámetros pasados por referencia se verifican en la entrada
     de la función, pero no cuando la función devuelve el retorno, por lo que después de que 
     la función haya devuelvo el retorno, el tipo de argumento puede haber cambiado.
    </simpara>
    <programlisting role="php">
<![CDATA[
<?php
function array_baz(array &$param)
{
    $param = 1;
}
$var = [];
array_baz($var);
var_dump($var);
array_baz($var);
?>
]]>
    </programlisting>
    &example.outputs.8;
    <screen>
<![CDATA[
int(1)

Fatal error: Uncaught TypeError: array_baz(): Argument #1 ($param) must be of type array, int given, called in - on line 9 and defined in -:2
Stack trace:
#0 -(9): array_baz(1)
#1 {main}
  thrown in - on line 2
]]>
    </screen>
   </example>

   <example>
    <title>Capturando <classname>TypeError</classname></title>
    <programlisting role="php">
<![CDATA[
<?php
declare(strict_types=1);

function suma(int $a, int $b) {
    return $a + $b;
}

try {
    var_dump(suma(1, 2));
    var_dump(suma(1.5, 2.5));
} catch (TypeError $e) {
    echo 'Error: ', $e->getMessage();
}
?>
]]>
    </programlisting>
    &example.outputs.8;
    <screen>
<![CDATA[
int(3)
Error: suma(): Argument #1 ($a) must be of type int, float given, called in - on line 10
]]>
    </screen>
   </example>
 </sect2>

</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
