<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: f90b26b377a61c76c0f64028e47553e550411d08 Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: no Maintainer: Marqitos -->
<sect1 xml:id="language.types.boolean">
 <title>Booleano</title>

 <simpara>
  El tipo <type>bool</type> solo posee dos valores y se utiliza para expresar un valor de verdad. Puede ser &true; o &false;.
 </simpara>

 <sect2 xml:id="language.types.boolean.syntax">
  <title>Sintaxis</title>
  <para>
   Para especificar un &boolean; literal, utilice la constante &true; o &false;. Ambas son insensibles a mayúsculas y minúsculas.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
$foo = true; // asigna el valor TRUE a $foo
?>
]]>
   </programlisting>
  </informalexample>

  <para>
   Típicamente, el resultado de un <link linkend="language.operators">operador</link> que devuelve un &boolean;, pasado luego a una <link linkend="language.control-structures">estructura de control</link>.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
$action = "show_version";
$show_separators = true;

// == es un operador que prueba
// la igualdad y devuelve un booleano
if ($action == "show_version") {
    echo "La versión es 1.23";
}

// esto no es necesario...
if ($show_separators == TRUE) {
    echo "<hr>\n";
}

// ...en su lugar, se puede utilizar, con el mismo significado:
if ($show_separators) {
    echo "<hr>\n";
}
?>
]]>
   </programlisting>
  </informalexample>
 </sect2>

 <sect2 xml:id="language.types.boolean.casting">
  <title>Conversión en booleano</title>

  <simpara>
  Para convertir explícitamente un valor en <type>bool</type>, utilice el cast <literal>(bool)</literal>. Generalmente, esto no es necesario porque cuando un valor se utiliza en un contexto lógico, se interpretará automáticamente como un valor de tipo <type>bool</type>. Para más información, ver la página <link linkend="language.types.type-juggling">Type Juggling</link>.
  </simpara>

  <para>
   Al convertir en &boolean;, los siguientes valores son considerados como &false;:
  </para>

  <itemizedlist>
   <listitem>
    <simpara>
     el <link linkend="language.types.boolean">booleano</link> &false;, en sí mismo
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     el <link linkend="language.types.integer">entero</link> <literal>0</literal> (cero)
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     los <link linkend="language.types.float">números de punto flotante</link> <literal>0.0</literal> y <literal>-0.0</literal> (cero)
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     la <link linkend="language.types.string">cadena</link> vacía <literal>""</literal>, y la <link linkend="language.types.string">cadena</link> <literal>"0"</literal>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     un <link linkend="language.types.array">array</link> sin elementos
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     el tipo unidad <link linkend="language.types.null">NULL</link> (incluyendo variables no definidas)
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     los objetos internos que sobrecargan su comportamiento de casting en booleano. Por ejemplo: los <link linkend="ref.simplexml">objetos SimpleXML</link> creados a partir de elementos vacíos sin atributos.
    </simpara>
   </listitem>
  </itemizedlist>

  <para>
   Todos los demás valores son considerados como &true; (incluyendo los <link linkend="language.types.resource">recursos</link> y <constant>NAN</constant>).
  </para>

  <warning>
   <simpara>
    <literal>-1</literal> es considerado como &true;, como todos los números diferentes de cero (negativos o positivos) !
   </simpara>
  </warning>

  <example>
   <title>Conversión en booleano</title>
   <programlisting role="php">
<![CDATA[
<?php
var_dump((bool) "");        // bool(false)
var_dump((bool) "0");       // bool(false)
var_dump((bool) 1);         // bool(true)
var_dump((bool) -2);        // bool(true)
var_dump((bool) "foo");     // bool(true)
var_dump((bool) 2.3e5);     // bool(true)
var_dump((bool) array(12)); // bool(true)
var_dump((bool) array());   // bool(false)
var_dump((bool) "false");   // bool(true)
?>
]]>
   </programlisting>
  </example>

 </sect2>
</sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
