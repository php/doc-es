<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: eac9eff7b66d8c2b168c25c72de0422126daf8cb Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: no Maintainer: Marqitos -->
<sect1 xml:id="language.types.callable">
 <title>Funciones de retrollamada / Tipos Callable</title>

 <para>
  Las funciones de retrollamada pueden ser identificadas a través del tipo <type>callable</type>.
 </para>

 <para>
  Algunas funciones, como <function>call_user_func</function> o
  <function>usort</function>, aceptan como argumento funciones de retrollamada
  definidas por el usuario. Las funciones de retrollamada pueden ser funciones
  simples, pero también métodos de &object;s, incluyendo métodos
  estáticos de clase.
 </para>

 <sect2 xml:id="language.types.callable.passing">
  <title>Paso de una función de retrollamada</title>

  <para>
   Una función PHP es pasada por su nombre, como un &string; o como
   un <link linkend="functions.first_class_callable_syntax">callable de primera clase</link>..
   Se puede usar cualquier función interna o definida por el usuario, excepto las construcciones del lenguaje
   como: <function>array</function>, <function>echo</function>,
   <function>empty</function>, <function>eval</function>,
   <function>exit</function>, <function>isset</function>,
   <function>list</function>, <function>print</function>, o
   <function>unset</function>.
  </para>

  <para>
   Un método de un &object; instanciado es pasado como un &array; que contiene
   un &object; en el índice 0, y el nombre del método en el índice 1.
   Acceder a los métodos protegidos y privados dentro de una clase
   está permitido.
  </para>

  <para>
   Los métodos estáticos de clase también pueden ser pasados sin instanciar
   un &object; de esa clase, ya sea pasando el nombre de la clase en lugar de un
   &object; en el índice 0, o pasando
   <literal>'NombreDeLaClase::NombreDelMetodo'</literal>.
  </para>

  <para>
   Además de las funciones definidas normalmente por el usuario,
   las <link linkend="functions.anonymous">funciones anónimas</link> y
   las <link linkend="functions.arrow">funciones flecha</link>
   también pueden ser utilizadas como argumento de tipo callback.
  </para>

  <note>
   <para>
    A partir de PHP 8.1.0, las funciones anónimas también pueden ser creadas utilizando la
    <link linkend="functions.first_class_callable_syntax">sintaxis callable de primera clase</link>.
   </para>
  </note>

  <para>
   Generalmente, cualquier objeto que implemente <link linkend="object.invoke">__invoke()</link>
   también puede ser pasado al argumento callback.
  </para>

  <para>
   <example>
    <title>
     Ejemplos de funciones de retrollamada
    </title>
    <programlisting role="php">
<![CDATA[
<?php

// Un ejemplo de función de retrollamada
function my_callback_function() {
    echo 'hello world!', PHP_EOL;
}

// Un ejemplo de método de retrollamada
class MyClass {
    static function myCallbackMethod() {
        echo 'Hello World!', PHP_EOL;
    }
}

// Tipo 1: Función de retrollamada simple
call_user_func('my_callback_function');

// Tipo 2: Llamada a un método estático de clase
call_user_func(array('MyClass', 'myCallbackMethod'));

// Tipo 3: Llamada a un método de objeto
$obj = new MyClass();
call_user_func(array($obj, 'myCallbackMethod'));

// Tipo 4: Llamada a un método estático de clase
call_user_func('MyClass::myCallbackMethod');

// Tipo 5: Llamada a un método estático de clase relativo
class A {
    public static function who() {
        echo "A", PHP_EOL;
    }
}

class B extends A {
    public static function who() {
        echo "B", PHP_EOL;
    }
}

call_user_func(array('B', 'parent::who')); // A, obsoleto a partir de PHP 8.2.0
// Tipo 6: Los objetos que implementan __invoke pueden ser utilizados como callables
class C {
    public function __invoke($name) {
        echo 'Hello ', $name, PHP_EOL;
    }
}

$c = new C();
call_user_func($c, 'PHP!');
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title>
     Ejemplo de una función de retrollamada utilizando una <classname>Closure</classname>
    </title>
   <programlisting role="php">
<![CDATA[
<?php
// Nuestra closure
$double = function($a) {
    return $a * 2;
};

// Este es nuestro rango de números
$numbers = range(1, 5);

// Uso de la closure como función de retrollamada.
// Aquí, para duplicar el tamaño de cada elemento de nuestro rango
$new_numbers = array_map($double, $numbers);

print implode(' ', $new_numbers);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
2 4 6 8 10
]]>
    </screen>
   </example>
  </para>

  &note.func-callback-exceptions;
 </sect2>

</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
