<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 3a97501ec4b56ed700facd0163d11faadc58663d Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: no Maintainer: Marqitos -->
<sect1 xml:id="language.types.type-juggling">
 <title>Manipulación de tipos</title>

 <simpara>
  PHP no requiere una definición de tipo explícita en las declaraciones de variables.
  En este caso, el tipo de una variable se determina en función del valor que tiene almacenado.
  Es decir, si una <type>string</type> se asigna a la variable
  <varname>$var</varname>, entonces <varname>$var</varname> es de tipo
  <type>string</type>. Si después se asigna un valor <type>int</type> a
  <varname>$var</varname>, será de tipo <type>int</type>.
 </simpara>

 <para>
  PHP puede intentar convertir el tipo de un valor en otro automáticamente
  en ciertos contextos. Los diferentes contextos que existen son:
  <itemizedlist>
   <listitem>
    <simpara>Numérico</simpara>
   </listitem>
   <listitem>
    <simpara>String</simpara>
   </listitem>
   <listitem>
    <simpara>Lógico</simpara>
   </listitem>
   <listitem>
    <simpara>Integral y string</simpara>
   </listitem>
   <listitem>
    <simpara>Comparativo</simpara>
   </listitem>
   <listitem>
    <simpara>Función</simpara>
   </listitem>
  </itemizedlist>
 </para>

 <note>
  <simpara>
   Cuando un valor necesita ser interpretado como un tipo diferente,
   el valor en sí <emphasis>no cambia</emphasis> de tipo.
  </simpara>
 </note>

 <simpara>
  Para forzar una variable a ser evaluada como un tipo particular, ver la
  sección sobre <link linkend="language.types.typecasting">casting de tipo</link>.
  Para cambiar el tipo de una variable, ver la función <function>settype</function>.
 </simpara>

 <sect2>
  <title>Contextos numéricos</title>

  <simpara>
   Este es el contexto al utilizar un
   <link linkend="language.operators.arithmetic">operador aritmético</link>.
  </simpara>

  <simpara>
   En este contexto, si uno de los operandos es un <type>float</type> (o
   no interpretable como <type>int</type>), ambos operandos se interpretan
   como <type>float</type>s, y el resultado será un <type>float</type>.
   De lo contrario, los operandos se interpretan como <type>int</type>s,
   y el resultado será también un <type>int</type>.
   A partir de PHP 8.0.0, si uno de los operandos no puede ser interpretado como
   <classname>TypeError</classname> se lanza.
  </simpara>
 </sect2>

 <sect2>
  <title>Contextos string</title>

  <simpara>
   Este es el contexto al utilizar <function>echo</function>,
   <function>print</function>, <link linkend="language.types.string.parsing">la interpolación de cadenas de caracteres</link>, o el
   <link linkend="language.operators.string">operador de concatenación</link>
   para las cadenas de caracteres.
  </simpara>

  <simpara>
   En este contexto, el valor se interpretará como una <type>string</type>.
   Si el valor no puede ser interpretado, se levanta una
   <classname>TypeError</classname>.
   Anterior a PHP 7.4.0, se generaba una <constant>E_RECOVERABLE_ERROR</constant>.
  </simpara>
 </sect2>

 <sect2>
  <title>Contextos lógicos</title>

  <simpara>
   Este es el contexto al utilizar declaraciones condicionales,
   el <link linkend="language.operators.comparison.ternary">operador ternario</link>,
   o un <link linkend="language.operators.logical">operador lógico</link>.
  </simpara>

  <simpara>
   En este contexto, el valor se interpretará como un <type>bool</type>.
  </simpara>
 </sect2>

 <sect2>
  <title>Contextos integrales y string</title>

  <simpara>
   Este es el contexto al utilizar un
   <link linkend="language.operators.bitwise">operador bit a bit</link>.
  </simpara>

  <simpara>
   En este contexto, si todos los operandos son de tipo <type>string</type>
   entonces el resultado será también una <type>string</type>.
   De lo contrario, los operandos se interpretarán como <type>int</type>s,
   y el resultado será también un <type>int</type>.
   A partir de PHP 8.0.0, si uno de los operandos no puede ser interpretado,
   se lanza una <classname>TypeError</classname>.
  </simpara>
 </sect2>

 <sect2>
  <title>Contextos comparativos</title>

  <simpara>
   Este es el contexto al utilizar un
   <link linkend="language.operators.comparison">operador de comparación</link>.
  </simpara>

  <simpara>
   Las conversiones de tipos que se producen en este contexto se explican
   en el <link linkend="language.operators.comparison.types">tabla</link>
   Comparación con varios tipos.
  </simpara>
 </sect2>

 <sect2 xml:id="language.types.type-juggling.function">
  <title>Contextos de funciones</title>

  <simpara>
   Este es el contexto cuando un valor se pasa a un parámetro o propiedad
   tipada o se devuelve desde una función que declara un tipo de retorno.
  </simpara>

  <para>
   En este contexto, el valor debe ser una valor del tipo.
   Existen dos excepciones, la primera es la siguiente: si el valor es de
   tipo <type>int</type> y el tipo declarado es <type>float</type>, entonces
   el entero se convierte en número de coma flotante.
   La segunda es: si el tipo declarado es un tipo <emphasis>escalar</emphasis>
   <!-- por ejemplo, un objeto que implementa __toString pasa por un tipo de cadena de caracteres -->
   , el valor es convertible en un tipo escalar, y el modo de tipado coercitivo
   está activo (por omisión), el valor puede ser convertido en un valor escalar aceptado.
   Ver a continuación para una descripción de este comportamiento.
  </para>

  <warning>
   <simpara>
    <link linkend="functions.internal">Las funciones internas</link>
    fuerzan automáticamente &null; a los tipos escalares,
    este comportamiento está <emphasis>OBSOLETO</emphasis> a partir de PHP 8.1.0.
   </simpara>
  </warning>

  <sect3 xml:id="language.types.type-juggling.function.simple">
   <title>Tipado coercitivo con declaraciones de tipo simples</title>
   <itemizedlist>
    <listitem>
     <simpara>
      Tipo de declaración <type>bool</type>: valor se interpreta como <type>bool</type>.
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      Tipo de declaración <type>int</type>: valor se interpreta como <type>int</type>
      si la conversión está bien definida. Por ejemplo, la cadena es
      <link linkend="language.types.numeric-strings">numérica</link>.
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      Tipo de declaración <type>float</type>: valor se interpreta como <type>float</type>
      si la conversión está bien definida. Por ejemplo, la cadena es
      <link linkend="language.types.numeric-strings">numérica</link>.
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      Tipo de declaración <type>string</type>: valor se interpreta como <type>string</type>.
     </simpara>
    </listitem>
   </itemizedlist>
  </sect3>

  <sect3 xml:id="language.types.type-juggling.function.union">
   <title>Tipado coercitivo con uniones de tipo</title>
   <para>
    Cuando <literal>strict_types</literal> no está activado, las
    declaraciones de tipo escalar están sujetas a restricciones de tipo
    implícitas limitadas.
    Si el tipo exacto del valor no forma parte de la unión, el tipo objetivo
    se elige en el siguiente orden de preferencia:

    <orderedlist>
     <listitem>
      <simpara>
       <type>int</type>
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       <type>float</type>
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       <type>string</type>
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       <type>bool</type>
      </simpara>
     </listitem>
    </orderedlist>

    Si el tipo existe en la unión y el valor puede ser forzado a
    este tipo utilizando la semántica de verificación de tipo existente de PHP, entonces el tipo es elegido.
   </para>

   <caution>
    <para>
     A título de excepción, si el valor es una cadena y <type>int</type> y <type>float</type> forman
     ambos parte de la unión, el tipo preferido se determina por la
     semántica de <link linkend="language.types.numeric-strings">cadena numérica</link>.
     Por ejemplo, para <literal>"42"</literal> <type>int</type> es elegido,
     mientras que para <literal>"42.0"</literal> <type>float</type> es elegido.
    </para>
   </caution>

   <note>
    <para>
     Los tipos que no forman parte de la lista de preferencias anterior no
     son objetivos admisibles para la coerción implícita. En particular,
     ninguna restricción implícita a los tipos <literal>null</literal> y
     <literal>false</literal> se produce.
    </para>
   </note>

   <example>
    <title>Ejemplo de tipos restringidos a una parte del tipo de la unión</title>
    <programlisting>
<![CDATA[
<?php
// int|string
42    --> 42          // tipo exacto
"42"  --> "42"        // tipo exacto
new ObjectWithToString --> "Result of __toString()"
                      // objeto nunca compatible con int, recurrir a string
42.0  --> 42          // float compatible con int
42.1  --> 42          // float compatible con int
1e100 --> "1.0E+100"  // float demasiado grande para el tipo int, recurrir a string
INF   --> "INF"       // float demasiado grande para el tipo int, recurrir a string
true  --> 1           // bool compatible con int
[]    --> TypeError   // array no compatible con int o string

// int|float|bool
"45"    --> 45        // int string numérico
"45.0"  --> 45.0      // float string numérico

"45X"   --> true      // no string numérico, recurrir a bool
""      --> false     // no string numérico, recurrir a bool
"X"     --> true      // no string numérico, recurrir a bool
[]      --> TypeError // array no compatible con int, float o bool
?>
]]>
    </programlisting>
   </example>
  </sect3>

 </sect2>

 <sect2 xml:id="language.types.typecasting">
  <title>Cast de tipo</title>

  <simpara>
   El casting de tipo convierte el valor a un tipo dado escribiendo el tipo
   entre paréntesis antes del valor a convertir.
  </simpara>

  <example>
   <title>Conversión de tipo</title>
   <programlisting role="php">
<![CDATA[
<?php
$foo = 10;          // $foo es un integer
$bar = (bool) $foo; // $bar es un bool

var_dump($bar);
?>
]]>
   </programlisting>
  </example>

  <simpara>
   Los casts permitidos son:
  </simpara>

  <simplelist>
   <member><literal>(int)</literal> - cast en <type>int</type></member>
   <member><literal>(bool)</literal> - cast en <type>bool</type></member>
   <member><literal>(float)</literal> - cast en <type>float</type></member>
   <member><literal>(string)</literal> - cast en <type>string</type></member>
   <member><literal>(array)</literal> - cast en <type>array</type></member>
   <member><literal>(object)</literal> - cast en <type>object</type></member>
   <member><literal>(unset)</literal> - cast en <type>NULL</type></member>
  </simplelist>

  <note>
   <para>
    <literal>(integer)</literal> es un alias del cast <literal>(int)</literal>.
    <literal>(boolean)</literal> es un alias del cast <literal>(bool)</literal>.
    <literal>(binary)</literal> es un alias del cast <literal>(string)</literal>.
    <literal>(double)</literal> y <literal>(real)</literal> son alias del
    cast <literal>(float)</literal>.
    Estos casts no utilizan el nombre de tipo canónico y no son recomendados.
   </para>
  </note>

  <warning>
   <simpara>
    El alias de cast <literal>(real)</literal> está obsoleto a partir de PHP 7.4.0
    y eliminado a partir de PHP 8.0.0.
   </simpara>
  </warning>

  <warning>
   <simpara>
    El cast <literal>(unset)</literal> fue declarado obsoleto a partir de PHP 7.2.0.
    A notar que el cast <literal>(unset)</literal> es idéntico a asignar el
    valor <type>NULL</type> a una variable o una llamada.
    El cast <literal>(unset)</literal> es eliminado a partir de PHP 8.0.0.
   </simpara>
  </warning>

  <caution>
   <simpara>
    El cast <literal>(binary)</literal> y el prefijo <literal>b</literal>
    existen únicamente para la compatibilidad ascendente. Actualmente
    <literal>(binary)</literal> y <literal>(string)</literal> son idénticos,
    pero esto puede cambiar: no se debe contar con ello.
   </simpara>
  </caution>

  <note>
   <para>
    Los espacios en blanco se ignoran dentro de los paréntesis de un cast.
    Así, los dos casts siguientes son equivalentes:
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
$foo = (int) $bar;
$foo = ( int ) $bar;
?>
]]>
     </programlisting>
    </informalexample>
   </para>
  </note>

  <informalexample>
   <simpara>
    Cast de <type>string</type>s literales y variables en
    <type>string</type>s binarios:
   </simpara>

   <programlisting role="php">
<![CDATA[
<?php
$binary = (binary) $string;
$binary = b"binary string";
?>
]]>
   </programlisting>
  </informalexample>

  <!-- TODO Remove or move into string context section? -->
  <simpara>
   En lugar de transtypar una variable en una <type>string</type>, también es posible
   rodear la variable con comillas dobles.
  </simpara>

  <example>
   <title>Diferentes mecanismos de conversión</title>
   <programlisting role="php">
<![CDATA[
<?php
$foo = 10;            // $foo es un integer
$str = "$foo";        // $str es una cadena
$fst = (string) $foo; // $fst es también una cadena

// Esto muestra "Son iguales"
if ($fst === $str) {
    echo "Son iguales", PHP_EOL;
}
?>
]]>
   </programlisting>
  </example>

  <para>
   Lo que ocurrirá exactamente al transtypar entre ciertos tipos
   no es necesariamente evidente. Para más información, ver estas secciones:
   <simplelist>
    <member><link linkend="language.types.boolean.casting">Convertir en boolean</link></member>
    <member><link linkend="language.types.integer.casting">Convertir en integer</link></member>
    <member><link linkend="language.types.float.casting">Convertir en float</link></member>
    <member><link linkend="language.types.string.casting">Convertir en string</link></member>
    <member><link linkend="language.types.array.casting">Convertir en array</link></member>
    <member><link linkend="language.types.object.casting">Convertir en object</link></member>
    <member><link linkend="language.types.resource.casting">Convertir en resource</link></member>
    <member><link linkend="language.types.null.casting">Convertir en NULL</link></member>
    <member><link linkend="types.comparisons">Las tablas de comparación de tipo</link></member>
   </simplelist>
  </para>

  <note>
   <simpara>
    Como PHP soporta la indexación en las <type>string</type>s
    mediante posiciones utilizando la misma sintaxis que la indexación de <type>array</type>,
    el siguiente ejemplo es válido para todas las versiones de PHP:
   </simpara>

   <example>
    <title>Uso de un índice de array con una cadena</title>
    <programlisting role="php">
<![CDATA[
<?php
$a    = 'car'; // $a es una cadena de caracteres
$a[0] = 'b';   // $a sigue siendo una cadena de caracteres
echo $a;       // bar
?>
]]>
    </programlisting>
   </example>

   <simpara>
    Ver la sección sobre el <link linkend="language.types.string.substr">acceso
    a las cadenas por caracter</link> para más información.
   </simpara>
  </note>
 </sect2>

</sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
