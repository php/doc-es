<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: f908fff129bcd8ec1605658e06457cb04e5b2b51 Maintainer: seros Status: ready -->
<!-- Reviewed: yes Maintainer: seros -->
<chapter xml:id="language.types" xmlns="http://docbook.org/ns/docbook">
 <title>Tipos</title>

 <sect1 xml:id="language.types.intro">
  <title>Introducción</title>

  <para>
   Cada expresión en PHP tiene uno de los siguientes
   tipos incorporados dependiendo de su valor:
   <itemizedlist>
    <listitem><simpara><type>null</type></simpara></listitem>
    <listitem><simpara><type>bool</type></simpara></listitem>
    <listitem><simpara><type>int</type></simpara></listitem>
    <listitem><simpara><type>float</type> (número de punto flotante)</simpara></listitem>
    <listitem><simpara><type>string</type></simpara></listitem>
    <listitem><simpara><type>array</type></simpara></listitem>
    <listitem><simpara><type>object</type></simpara></listitem>
    <listitem><simpara><type>callable</type></simpara></listitem>
    <listitem><simpara><type>resource</type></simpara></listitem>
   </itemizedlist>
  </para>

  <para>
   PHP es un lenguaje tipado dinámicamente, lo que significa que, por omisión,
   no es necesario especificar el tipo de una variable, ya que esto se determinará
   en tiempo de ejecución. Sin embargo, es posible tipificar estáticamente algunos
   aspectos del lenguaje mediante el uso de
   <link linkend="language.types.declarations">declaraciones de tipos</link>.
   En la página <link linkend="language.types.type-system">sistema de tipos</link>
   se pueden encontrar los distintos tipos que admite PHP.
  </para>

  <para>
   Los tipos restringen el tipo de operaciones que se pueden realizar en ellos.
   Sin embargo, si se utiliza una expresión/variable en una operación que su tipo
   no admite, PHP intentará <link linkend="language.types.type-juggling">convertir</link>
   el valor en un tipo que admita la operación.
   Este proceso depende del contexto en el que se utiliza el valor.
   Para obtener más información, consulte la sección sobre
   <link linkend="language.types.type-juggling">Manipulación de tipos</link>.
  </para>

  <tip>
   <simpara>
    <link linkend="types.comparisons">Tablas de comparación de tipos de PHP</link>
    también pueden ser útiles, ya que contienen varios ejemplos de comparación entre
    valores de diferentes tipos.
   </simpara>
  </tip>

  <note>
   <simpara>
    Es posible forzar que una expresión se evalúe en un tipo determinado mediante
    una <link linkend="language.types.typecasting">conversión de tipo</link>.
    También se puede convertir el tipo de una variable en el lugar mediante
    la función <function>settype</function>.
   </simpara>
  </note>

  <para>
   Para comprobar el tipo y el valor de una
   <link linkend="language.expressions">expresión</link>,
   utilice la función <function>var_dump</function>.
   Para obtener el tipo de una
   <link linkend="language.expressions">expresión</link>,
   utilice la función <function>get_debug_type</function>.
   To retrieve the type of an
   <link linkend="language.expressions">expression</link>,
   use the <function>get_debug_type</function> function.
   Sin embargo, para comprobar si una expresión es de un tipo
   determinado, utilice las funciones
   <literal>is_<replaceable>type</replaceable></literal>.

   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
$a_bool = true;   // un valor booleano
$a_str  = "foo";  // una cadena de caracteres
$a_str2 = 'foo';  // una cadena de caracteres
$an_int  = 12;     // un número entero

echo get_debug_type($a_bool), "\n";
echo get_debug_type($a_str), "\n";

// Si este valor es un entero, incrementarlo en cuatro
if (is_int($an_int)) {
    $an_int += 4;
}

// Si $a_bool es una cadena, imprimirla
// (no imprime nada)
if (is_string($a_bool)) {
    echo "Cadena: $a_bool";
}
?>
]]>
    </programlisting>
    &example.outputs.8;
    <screen>
<![CDATA[
bool
string
int(16)
]]>
    </screen>
   </informalexample>
  </para>
  <note>
   <simpara>
    Antes de PHP 8.0.0, cuando la función <function>get_debug_type</function>
    no estaba disponible, se podía utilizar en su lugar la función
    <function>gettype</function>.
    Sin embargo, no utiliza los nombres de tipos canónicos.
   </simpara>
  </note>
 </sect1>

 &language.types.type-system;
 &language.types.null;
 &language.types.boolean;
 &language.types.integer;
 &language.types.float;
 &language.types.string;
 &language.types.numeric-strings;
 &language.types.array;
 &language.types.object;
 &language.types.enumerations;
 &language.types.resource;
 &language.types.callable;
 &language.types.mixed;
 &language.types.void;
 &language.types.never;
 &language.types.relative-class-types;
 &language.types.singleton;
 &language.types.iterable;
 &language.types.declarations;
 &language.types.type-juggling;

</chapter>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
